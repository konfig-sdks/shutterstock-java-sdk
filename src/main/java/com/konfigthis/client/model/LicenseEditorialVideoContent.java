/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Individual editorial video content to license
 */
@ApiModel(description = "Individual editorial video content to license")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LicenseEditorialVideoContent {
  public static final String SERIALIZED_NAME_EDITORIAL_ID = "editorial_id";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_ID)
  private String editorialId;

  /**
   * License agreement to use for licensing
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
 public enum LicenseEnum {
    DIGITAL_ONLY("premier_editorial_video_digital_only"),
    
    ALL_MEDIA("premier_editorial_video_all_media"),
    
    ALL_MEDIA_SINGLE_TERRITORY("premier_editorial_video_all_media_single_territory"),
    
    COMP("premier_editorial_video_comp");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  /**
   * Asset size to download
   */
  @JsonAdapter(SizeEnum.Adapter.class)
 public enum SizeEnum {
    ORIGINAL("original");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size = SizeEnum.ORIGINAL;

  public LicenseEditorialVideoContent() {
  }

  public LicenseEditorialVideoContent editorialId(String editorialId) {
    
    
    
    
    this.editorialId = editorialId;
    return this;
  }

   /**
   * Editorial ID
   * @return editorialId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10679854a", required = true, value = "Editorial ID")

  public String getEditorialId() {
    return editorialId;
  }


  public void setEditorialId(String editorialId) {
    
    
    
    this.editorialId = editorialId;
  }


  public LicenseEditorialVideoContent license(LicenseEnum license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * License agreement to use for licensing
   * @return license
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PREMIER_EDITORIAL_VIDEO_DIGITAL_ONLY", required = true, value = "License agreement to use for licensing")

  public LicenseEnum getLicense() {
    return license;
  }


  public void setLicense(LicenseEnum license) {
    
    
    
    this.license = license;
  }


  public LicenseEditorialVideoContent metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"customer_id\":\"12345\",\"geo_location\":\"US\",\"number_viewed\":\"15\",\"search_term\":\"dog\"}", value = "Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public LicenseEditorialVideoContent size(SizeEnum size) {
    
    
    
    
    this.size = size;
    return this;
  }

   /**
   * Asset size to download
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ORIGINAL", value = "Asset size to download")

  public SizeEnum getSize() {
    return size;
  }


  public void setSize(SizeEnum size) {
    
    
    
    this.size = size;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LicenseEditorialVideoContent instance itself
   */
  public LicenseEditorialVideoContent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseEditorialVideoContent licenseEditorialVideoContent = (LicenseEditorialVideoContent) o;
    return Objects.equals(this.editorialId, licenseEditorialVideoContent.editorialId) &&
        Objects.equals(this.license, licenseEditorialVideoContent.license) &&
        Objects.equals(this.metadata, licenseEditorialVideoContent.metadata) &&
        Objects.equals(this.size, licenseEditorialVideoContent.size)&&
        Objects.equals(this.additionalProperties, licenseEditorialVideoContent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editorialId, license, metadata, size, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseEditorialVideoContent {\n");
    sb.append("    editorialId: ").append(toIndentedString(editorialId)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editorial_id");
    openapiFields.add("license");
    openapiFields.add("metadata");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("editorial_id");
    openapiRequiredFields.add("license");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LicenseEditorialVideoContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LicenseEditorialVideoContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseEditorialVideoContent is not found in the empty JSON string", LicenseEditorialVideoContent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseEditorialVideoContent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("editorial_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorial_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorial_id").toString()));
      }
      if (!jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseEditorialVideoContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseEditorialVideoContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseEditorialVideoContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseEditorialVideoContent.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseEditorialVideoContent>() {
           @Override
           public void write(JsonWriter out, LicenseEditorialVideoContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseEditorialVideoContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LicenseEditorialVideoContent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LicenseEditorialVideoContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LicenseEditorialVideoContent
  * @throws IOException if the JSON string is invalid with respect to LicenseEditorialVideoContent
  */
  public static LicenseEditorialVideoContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseEditorialVideoContent.class);
  }

 /**
  * Convert an instance of LicenseEditorialVideoContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

