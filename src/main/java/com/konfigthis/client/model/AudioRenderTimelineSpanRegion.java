/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AudioRenderTimelineSpanRegionEndType;
import com.konfigthis.client.model.AudioRenderTimelineSpanRegionKey;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A period of music or silence, measured in beats
 */
@ApiModel(description = "A period of music or silence, measured in beats")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AudioRenderTimelineSpanRegion {
  public static final String SERIALIZED_NAME_BEAT = "beat";
  @SerializedName(SERIALIZED_NAME_BEAT)
  private Integer beat;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private String descriptor;

  public static final String SERIALIZED_NAME_END_TYPE = "end_type";
  @SerializedName(SERIALIZED_NAME_END_TYPE)
  private AudioRenderTimelineSpanRegionEndType endType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private AudioRenderTimelineSpanRegionKey key;

  /**
   * The type of region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
 public enum RegionEnum {
    MUSIC("music"),
    
    SILENCE("silence");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public AudioRenderTimelineSpanRegion() {
  }

  public AudioRenderTimelineSpanRegion beat(Integer beat) {
    
    
    
    
    this.beat = beat;
    return this;
  }

   /**
   * The beat, relative to the span, at which the region object&#39;s music begins
   * @return beat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12", required = true, value = "The beat, relative to the span, at which the region object's music begins")

  public Integer getBeat() {
    return beat;
  }


  public void setBeat(Integer beat) {
    
    
    
    this.beat = beat;
  }


  public AudioRenderTimelineSpanRegion descriptor(String descriptor) {
    
    
    
    
    this.descriptor = descriptor;
    return this;
  }

   /**
   * The descriptor ID needed to compose the music
   * @return descriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "cinematic_minimal_tense", required = true, value = "The descriptor ID needed to compose the music")

  public String getDescriptor() {
    return descriptor;
  }


  public void setDescriptor(String descriptor) {
    
    
    
    this.descriptor = descriptor;
  }


  public AudioRenderTimelineSpanRegion endType(AudioRenderTimelineSpanRegionEndType endType) {
    
    
    
    
    this.endType = endType;
    return this;
  }

   /**
   * Get endType
   * @return endType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioRenderTimelineSpanRegionEndType getEndType() {
    return endType;
  }


  public void setEndType(AudioRenderTimelineSpanRegionEndType endType) {
    
    
    
    this.endType = endType;
  }


  public AudioRenderTimelineSpanRegion id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public AudioRenderTimelineSpanRegion id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * An identifier which must be unique within the parent span
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "222", required = true, value = "An identifier which must be unique within the parent span")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public AudioRenderTimelineSpanRegion key(AudioRenderTimelineSpanRegionKey key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioRenderTimelineSpanRegionKey getKey() {
    return key;
  }


  public void setKey(AudioRenderTimelineSpanRegionKey key) {
    
    
    
    this.key = key;
  }


  public AudioRenderTimelineSpanRegion region(RegionEnum region) {
    
    
    
    
    this.region = region;
    return this;
  }

   /**
   * The type of region
   * @return region
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "MUSIC", required = true, value = "The type of region")

  public RegionEnum getRegion() {
    return region;
  }


  public void setRegion(RegionEnum region) {
    
    
    
    this.region = region;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AudioRenderTimelineSpanRegion instance itself
   */
  public AudioRenderTimelineSpanRegion putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioRenderTimelineSpanRegion audioRenderTimelineSpanRegion = (AudioRenderTimelineSpanRegion) o;
    return Objects.equals(this.beat, audioRenderTimelineSpanRegion.beat) &&
        Objects.equals(this.descriptor, audioRenderTimelineSpanRegion.descriptor) &&
        Objects.equals(this.endType, audioRenderTimelineSpanRegion.endType) &&
        Objects.equals(this.id, audioRenderTimelineSpanRegion.id) &&
        Objects.equals(this.key, audioRenderTimelineSpanRegion.key) &&
        Objects.equals(this.region, audioRenderTimelineSpanRegion.region)&&
        Objects.equals(this.additionalProperties, audioRenderTimelineSpanRegion.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beat, descriptor, endType, id, key, region, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioRenderTimelineSpanRegion {\n");
    sb.append("    beat: ").append(toIndentedString(beat)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    endType: ").append(toIndentedString(endType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beat");
    openapiFields.add("descriptor");
    openapiFields.add("end_type");
    openapiFields.add("id");
    openapiFields.add("key");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beat");
    openapiRequiredFields.add("descriptor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("region");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AudioRenderTimelineSpanRegion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AudioRenderTimelineSpanRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioRenderTimelineSpanRegion is not found in the empty JSON string", AudioRenderTimelineSpanRegion.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AudioRenderTimelineSpanRegion.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptor").toString()));
      }
      // validate the optional field `end_type`
      if (jsonObj.get("end_type") != null && !jsonObj.get("end_type").isJsonNull()) {
        AudioRenderTimelineSpanRegionEndType.validateJsonObject(jsonObj.getAsJsonObject("end_type"));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        AudioRenderTimelineSpanRegionKey.validateJsonObject(jsonObj.getAsJsonObject("key"));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioRenderTimelineSpanRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioRenderTimelineSpanRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioRenderTimelineSpanRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioRenderTimelineSpanRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioRenderTimelineSpanRegion>() {
           @Override
           public void write(JsonWriter out, AudioRenderTimelineSpanRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioRenderTimelineSpanRegion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AudioRenderTimelineSpanRegion instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AudioRenderTimelineSpanRegion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AudioRenderTimelineSpanRegion
  * @throws IOException if the JSON string is invalid with respect to AudioRenderTimelineSpanRegion
  */
  public static AudioRenderTimelineSpanRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioRenderTimelineSpanRegion.class);
  }

 /**
  * Convert an instance of AudioRenderTimelineSpanRegion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

