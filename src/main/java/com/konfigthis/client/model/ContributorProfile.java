/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContributorProfileSocialMedia;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Contributor profile data
 */
@ApiModel(description = "Contributor profile data")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContributorProfile {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_CONTRIBUTOR_TYPE = "contributor_type";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_TYPE)
  private List<String> contributorType = null;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private List<String> equipment = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PORTFOLIO_URL = "portfolio_url";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_URL)
  private String portfolioUrl;

  public static final String SERIALIZED_NAME_SOCIAL_MEDIA = "social_media";
  @SerializedName(SERIALIZED_NAME_SOCIAL_MEDIA)
  private ContributorProfileSocialMedia socialMedia;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private List<String> styles = null;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = null;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public ContributorProfile() {
  }

  public ContributorProfile about(String about) {
    
    
    
    
    this.about = about;
    return this;
  }

   /**
   * Short description of the contributors&#39; library
   * @return about
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe's photographs", value = "Short description of the contributors' library")

  public String getAbout() {
    return about;
  }


  public void setAbout(String about) {
    
    
    
    this.about = about;
  }


  public ContributorProfile contributorType(List<String> contributorType) {
    
    
    
    
    this.contributorType = contributorType;
    return this;
  }

  public ContributorProfile addContributorTypeItem(String contributorTypeItem) {
    if (this.contributorType == null) {
      this.contributorType = new ArrayList<>();
    }
    this.contributorType.add(contributorTypeItem);
    return this;
  }

   /**
   * Type of content that the contributor specializes in (photographer, illustrator, etc)
   * @return contributorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of content that the contributor specializes in (photographer, illustrator, etc)")

  public List<String> getContributorType() {
    return contributorType;
  }


  public void setContributorType(List<String> contributorType) {
    
    
    
    this.contributorType = contributorType;
  }


  public ContributorProfile displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Preferred name to be displayed for the contributor
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe", value = "Preferred name to be displayed for the contributor")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public ContributorProfile equipment(List<String> equipment) {
    
    
    
    
    this.equipment = equipment;
    return this;
  }

  public ContributorProfile addEquipmentItem(String equipmentItem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<>();
    }
    this.equipment.add(equipmentItem);
    return this;
  }

   /**
   * List of equipment used by the contributor (Canon EOS 5D Mark II, etc)
   * @return equipment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of equipment used by the contributor (Canon EOS 5D Mark II, etc)")

  public List<String> getEquipment() {
    return equipment;
  }


  public void setEquipment(List<String> equipment) {
    
    
    
    this.equipment = equipment;
  }


  public ContributorProfile id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Contributor ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12345678X", required = true, value = "Contributor ID")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ContributorProfile location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Country code representing the contributor&#39;s locale
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "Country code representing the contributor's locale")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public ContributorProfile portfolioUrl(String portfolioUrl) {
    
    
    
    
    this.portfolioUrl = portfolioUrl;
    return this;
  }

   /**
   * Web URL for the contributors&#39; profile
   * @return portfolioUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.shutterstock.com/g/jdoe", value = "Web URL for the contributors' profile")

  public String getPortfolioUrl() {
    return portfolioUrl;
  }


  public void setPortfolioUrl(String portfolioUrl) {
    
    
    
    this.portfolioUrl = portfolioUrl;
  }


  public ContributorProfile socialMedia(ContributorProfileSocialMedia socialMedia) {
    
    
    
    
    this.socialMedia = socialMedia;
    return this;
  }

   /**
   * Get socialMedia
   * @return socialMedia
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContributorProfileSocialMedia getSocialMedia() {
    return socialMedia;
  }


  public void setSocialMedia(ContributorProfileSocialMedia socialMedia) {
    
    
    
    this.socialMedia = socialMedia;
  }


  public ContributorProfile styles(List<String> styles) {
    
    
    
    
    this.styles = styles;
    return this;
  }

  public ContributorProfile addStylesItem(String stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

   /**
   * List of styles that the contributor specializes in (lifestyle, mixed media, etc)
   * @return styles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of styles that the contributor specializes in (lifestyle, mixed media, etc)")

  public List<String> getStyles() {
    return styles;
  }


  public void setStyles(List<String> styles) {
    
    
    
    this.styles = styles;
  }


  public ContributorProfile subjects(List<String> subjects) {
    
    
    
    
    this.subjects = subjects;
    return this;
  }

  public ContributorProfile addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

   /**
   * Generic list of subjects for contributors&#39; work (food_and_drink, holiday, people, etc)
   * @return subjects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)")

  public List<String> getSubjects() {
    return subjects;
  }


  public void setSubjects(List<String> subjects) {
    
    
    
    this.subjects = subjects;
  }


  public ContributorProfile website(String website) {
    
    
    
    
    this.website = website;
    return this;
  }

   /**
   * Personal website for the contributor
   * @return website
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://example.com/profiles/jdoe", value = "Personal website for the contributor")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    
    this.website = website;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContributorProfile instance itself
   */
  public ContributorProfile putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContributorProfile contributorProfile = (ContributorProfile) o;
    return Objects.equals(this.about, contributorProfile.about) &&
        Objects.equals(this.contributorType, contributorProfile.contributorType) &&
        Objects.equals(this.displayName, contributorProfile.displayName) &&
        Objects.equals(this.equipment, contributorProfile.equipment) &&
        Objects.equals(this.id, contributorProfile.id) &&
        Objects.equals(this.location, contributorProfile.location) &&
        Objects.equals(this.portfolioUrl, contributorProfile.portfolioUrl) &&
        Objects.equals(this.socialMedia, contributorProfile.socialMedia) &&
        Objects.equals(this.styles, contributorProfile.styles) &&
        Objects.equals(this.subjects, contributorProfile.subjects) &&
        Objects.equals(this.website, contributorProfile.website)&&
        Objects.equals(this.additionalProperties, contributorProfile.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, contributorType, displayName, equipment, id, location, portfolioUrl, socialMedia, styles, subjects, website, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContributorProfile {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    contributorType: ").append(toIndentedString(contributorType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    portfolioUrl: ").append(toIndentedString(portfolioUrl)).append("\n");
    sb.append("    socialMedia: ").append(toIndentedString(socialMedia)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("contributor_type");
    openapiFields.add("display_name");
    openapiFields.add("equipment");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("portfolio_url");
    openapiFields.add("social_media");
    openapiFields.add("styles");
    openapiFields.add("subjects");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContributorProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContributorProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContributorProfile is not found in the empty JSON string", ContributorProfile.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContributorProfile.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contributor_type") != null && !jsonObj.get("contributor_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributor_type` to be an array in the JSON string but got `%s`", jsonObj.get("contributor_type").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equipment` to be an array in the JSON string but got `%s`", jsonObj.get("equipment").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("portfolio_url") != null && !jsonObj.get("portfolio_url").isJsonNull()) && !jsonObj.get("portfolio_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portfolio_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portfolio_url").toString()));
      }
      // validate the optional field `social_media`
      if (jsonObj.get("social_media") != null && !jsonObj.get("social_media").isJsonNull()) {
        ContributorProfileSocialMedia.validateJsonObject(jsonObj.getAsJsonObject("social_media"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("styles") != null && !jsonObj.get("styles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `styles` to be an array in the JSON string but got `%s`", jsonObj.get("styles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContributorProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContributorProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContributorProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContributorProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ContributorProfile>() {
           @Override
           public void write(JsonWriter out, ContributorProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContributorProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContributorProfile instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContributorProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContributorProfile
  * @throws IOException if the JSON string is invalid with respect to ContributorProfile
  */
  public static ContributorProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContributorProfile.class);
  }

 /**
  * Convert an instance of ContributorProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

