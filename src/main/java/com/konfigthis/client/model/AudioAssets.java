/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AudioAssetDetails;
import com.konfigthis.client.model.ShortsLoopsStems;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Files that are available as part of an audio asset
 */
@ApiModel(description = "Files that are available as part of an audio asset")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AudioAssets {
  public static final String SERIALIZED_NAME_ALBUM_ART = "album_art";
  @SerializedName(SERIALIZED_NAME_ALBUM_ART)
  private AudioAssetDetails albumArt;

  public static final String SERIALIZED_NAME_CLEAN_AUDIO = "clean_audio";
  @SerializedName(SERIALIZED_NAME_CLEAN_AUDIO)
  private AudioAssetDetails cleanAudio;

  public static final String SERIALIZED_NAME_ORIGINAL_AUDIO = "original_audio";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_AUDIO)
  private AudioAssetDetails originalAudio;

  public static final String SERIALIZED_NAME_PREVIEW_MP3 = "preview_mp3";
  @SerializedName(SERIALIZED_NAME_PREVIEW_MP3)
  private AudioAssetDetails previewMp3;

  public static final String SERIALIZED_NAME_PREVIEW_OGG = "preview_ogg";
  @SerializedName(SERIALIZED_NAME_PREVIEW_OGG)
  private AudioAssetDetails previewOgg;

  public static final String SERIALIZED_NAME_SHORTS_LOOPS_STEMS = "shorts_loops_stems";
  @SerializedName(SERIALIZED_NAME_SHORTS_LOOPS_STEMS)
  private ShortsLoopsStems shortsLoopsStems;

  public static final String SERIALIZED_NAME_WAVEFORM = "waveform";
  @SerializedName(SERIALIZED_NAME_WAVEFORM)
  private AudioAssetDetails waveform;

  public AudioAssets() {
  }

  public AudioAssets albumArt(AudioAssetDetails albumArt) {
    
    
    
    
    this.albumArt = albumArt;
    return this;
  }

   /**
   * Get albumArt
   * @return albumArt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getAlbumArt() {
    return albumArt;
  }


  public void setAlbumArt(AudioAssetDetails albumArt) {
    
    
    
    this.albumArt = albumArt;
  }


  public AudioAssets cleanAudio(AudioAssetDetails cleanAudio) {
    
    
    
    
    this.cleanAudio = cleanAudio;
    return this;
  }

   /**
   * Get cleanAudio
   * @return cleanAudio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getCleanAudio() {
    return cleanAudio;
  }


  public void setCleanAudio(AudioAssetDetails cleanAudio) {
    
    
    
    this.cleanAudio = cleanAudio;
  }


  public AudioAssets originalAudio(AudioAssetDetails originalAudio) {
    
    
    
    
    this.originalAudio = originalAudio;
    return this;
  }

   /**
   * Get originalAudio
   * @return originalAudio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getOriginalAudio() {
    return originalAudio;
  }


  public void setOriginalAudio(AudioAssetDetails originalAudio) {
    
    
    
    this.originalAudio = originalAudio;
  }


  public AudioAssets previewMp3(AudioAssetDetails previewMp3) {
    
    
    
    
    this.previewMp3 = previewMp3;
    return this;
  }

   /**
   * Get previewMp3
   * @return previewMp3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getPreviewMp3() {
    return previewMp3;
  }


  public void setPreviewMp3(AudioAssetDetails previewMp3) {
    
    
    
    this.previewMp3 = previewMp3;
  }


  public AudioAssets previewOgg(AudioAssetDetails previewOgg) {
    
    
    
    
    this.previewOgg = previewOgg;
    return this;
  }

   /**
   * Get previewOgg
   * @return previewOgg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getPreviewOgg() {
    return previewOgg;
  }


  public void setPreviewOgg(AudioAssetDetails previewOgg) {
    
    
    
    this.previewOgg = previewOgg;
  }


  public AudioAssets shortsLoopsStems(ShortsLoopsStems shortsLoopsStems) {
    
    
    
    
    this.shortsLoopsStems = shortsLoopsStems;
    return this;
  }

   /**
   * Get shortsLoopsStems
   * @return shortsLoopsStems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShortsLoopsStems getShortsLoopsStems() {
    return shortsLoopsStems;
  }


  public void setShortsLoopsStems(ShortsLoopsStems shortsLoopsStems) {
    
    
    
    this.shortsLoopsStems = shortsLoopsStems;
  }


  public AudioAssets waveform(AudioAssetDetails waveform) {
    
    
    
    
    this.waveform = waveform;
    return this;
  }

   /**
   * Get waveform
   * @return waveform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssetDetails getWaveform() {
    return waveform;
  }


  public void setWaveform(AudioAssetDetails waveform) {
    
    
    
    this.waveform = waveform;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AudioAssets instance itself
   */
  public AudioAssets putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAssets audioAssets = (AudioAssets) o;
    return Objects.equals(this.albumArt, audioAssets.albumArt) &&
        Objects.equals(this.cleanAudio, audioAssets.cleanAudio) &&
        Objects.equals(this.originalAudio, audioAssets.originalAudio) &&
        Objects.equals(this.previewMp3, audioAssets.previewMp3) &&
        Objects.equals(this.previewOgg, audioAssets.previewOgg) &&
        Objects.equals(this.shortsLoopsStems, audioAssets.shortsLoopsStems) &&
        Objects.equals(this.waveform, audioAssets.waveform)&&
        Objects.equals(this.additionalProperties, audioAssets.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumArt, cleanAudio, originalAudio, previewMp3, previewOgg, shortsLoopsStems, waveform, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAssets {\n");
    sb.append("    albumArt: ").append(toIndentedString(albumArt)).append("\n");
    sb.append("    cleanAudio: ").append(toIndentedString(cleanAudio)).append("\n");
    sb.append("    originalAudio: ").append(toIndentedString(originalAudio)).append("\n");
    sb.append("    previewMp3: ").append(toIndentedString(previewMp3)).append("\n");
    sb.append("    previewOgg: ").append(toIndentedString(previewOgg)).append("\n");
    sb.append("    shortsLoopsStems: ").append(toIndentedString(shortsLoopsStems)).append("\n");
    sb.append("    waveform: ").append(toIndentedString(waveform)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album_art");
    openapiFields.add("clean_audio");
    openapiFields.add("original_audio");
    openapiFields.add("preview_mp3");
    openapiFields.add("preview_ogg");
    openapiFields.add("shorts_loops_stems");
    openapiFields.add("waveform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AudioAssets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AudioAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioAssets is not found in the empty JSON string", AudioAssets.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `album_art`
      if (jsonObj.get("album_art") != null && !jsonObj.get("album_art").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("album_art"));
      }
      // validate the optional field `clean_audio`
      if (jsonObj.get("clean_audio") != null && !jsonObj.get("clean_audio").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("clean_audio"));
      }
      // validate the optional field `original_audio`
      if (jsonObj.get("original_audio") != null && !jsonObj.get("original_audio").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("original_audio"));
      }
      // validate the optional field `preview_mp3`
      if (jsonObj.get("preview_mp3") != null && !jsonObj.get("preview_mp3").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("preview_mp3"));
      }
      // validate the optional field `preview_ogg`
      if (jsonObj.get("preview_ogg") != null && !jsonObj.get("preview_ogg").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("preview_ogg"));
      }
      // validate the optional field `shorts_loops_stems`
      if (jsonObj.get("shorts_loops_stems") != null && !jsonObj.get("shorts_loops_stems").isJsonNull()) {
        ShortsLoopsStems.validateJsonObject(jsonObj.getAsJsonObject("shorts_loops_stems"));
      }
      // validate the optional field `waveform`
      if (jsonObj.get("waveform") != null && !jsonObj.get("waveform").isJsonNull()) {
        AudioAssetDetails.validateJsonObject(jsonObj.getAsJsonObject("waveform"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioAssets>() {
           @Override
           public void write(JsonWriter out, AudioAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioAssets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AudioAssets instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AudioAssets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AudioAssets
  * @throws IOException if the JSON string is invalid with respect to AudioAssets
  */
  public static AudioAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioAssets.class);
  }

 /**
  * Convert an instance of AudioAssets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

