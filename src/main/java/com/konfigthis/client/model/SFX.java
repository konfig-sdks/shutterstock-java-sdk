/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contributor;
import com.konfigthis.client.model.SFXAssets;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SFX metadata
 */
@ApiModel(description = "SFX metadata")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SFX {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDED_DATE = "added_date";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE)
  private LocalDate addedDate;

  public static final String SERIALIZED_NAME_AFFILIATE_URL = "affiliate_url";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_URL)
  private String affiliateUrl;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private SFXAssets assets;

  public static final String SERIALIZED_NAME_CONTRIBUTOR = "contributor";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR)
  private Contributor contributor;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = null;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_RELEASES = "releases";
  @SerializedName(SERIALIZED_NAME_RELEASES)
  private List<String> releases = null;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public SFX() {
  }

  public SFX title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of this sound effect
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of this sound effect")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public SFX description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of this sound effect
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of this sound effect")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SFX addedDate(LocalDate addedDate) {
    
    
    
    
    this.addedDate = addedDate;
    return this;
  }

   /**
   * Date this sound effect was added to the Shutterstock library
   * @return addedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this sound effect was added to the Shutterstock library")

  public LocalDate getAddedDate() {
    return addedDate;
  }


  public void setAddedDate(LocalDate addedDate) {
    
    
    
    this.addedDate = addedDate;
  }


  public SFX affiliateUrl(String affiliateUrl) {
    
    
    
    
    this.affiliateUrl = affiliateUrl;
    return this;
  }

   /**
   * Affiliate referral link; appears only for registered affiliate partners
   * @return affiliateUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate referral link; appears only for registered affiliate partners")

  public String getAffiliateUrl() {
    return affiliateUrl;
  }


  public void setAffiliateUrl(String affiliateUrl) {
    
    
    
    this.affiliateUrl = affiliateUrl;
  }


  public SFX artist(String artist) {
    
    
    
    
    this.artist = artist;
    return this;
  }

   /**
   * Artist of the sound effect
   * @return artist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Artist of the sound effect")

  public String getArtist() {
    return artist;
  }


  public void setArtist(String artist) {
    
    
    
    this.artist = artist;
  }


  public SFX assets(SFXAssets assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SFXAssets getAssets() {
    return assets;
  }


  public void setAssets(SFXAssets assets) {
    
    
    
    this.assets = assets;
  }


  public SFX contributor(Contributor contributor) {
    
    
    
    
    this.contributor = contributor;
    return this;
  }

   /**
   * Get contributor
   * @return contributor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contributor getContributor() {
    return contributor;
  }


  public void setContributor(Contributor contributor) {
    
    
    
    this.contributor = contributor;
  }


  public SFX duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public SFX duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * Duration of this sound effect in seconds
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Duration of this sound effect in seconds")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public SFX id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Shutterstock ID of this sound effect
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123X", required = true, value = "Shutterstock ID of this sound effect")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public SFX keywords(List<String> keywords) {
    
    
    
    
    this.keywords = keywords;
    return this;
  }

  public SFX addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * List of all keywords for this sound effect
   * @return keywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all keywords for this sound effect")

  public List<String> getKeywords() {
    return keywords;
  }


  public void setKeywords(List<String> keywords) {
    
    
    
    this.keywords = keywords;
  }


  public SFX mediaType(String mediaType) {
    
    
    
    
    this.mediaType = mediaType;
    return this;
  }

   /**
   * Media type of this track; should always be \&quot;sfx\&quot;
   * @return mediaType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sfx", required = true, value = "Media type of this track; should always be \"sfx\"")

  public String getMediaType() {
    return mediaType;
  }


  public void setMediaType(String mediaType) {
    
    
    
    this.mediaType = mediaType;
  }


  public SFX releases(List<String> releases) {
    
    
    
    
    this.releases = releases;
    return this;
  }

  public SFX addReleasesItem(String releasesItem) {
    if (this.releases == null) {
      this.releases = new ArrayList<>();
    }
    this.releases.add(releasesItem);
    return this;
  }

   /**
   * List of all releases of this sound effect
   * @return releases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all releases of this sound effect")

  public List<String> getReleases() {
    return releases;
  }


  public void setReleases(List<String> releases) {
    
    
    
    this.releases = releases;
  }


  public SFX updatedTime(OffsetDateTime updatedTime) {
    
    
    
    
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Time this sound effect was last updated
   * @return updatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time this sound effect was last updated")

  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }


  public void setUpdatedTime(OffsetDateTime updatedTime) {
    
    
    
    this.updatedTime = updatedTime;
  }


  public SFX url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * 
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SFX instance itself
   */
  public SFX putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SFX SFX = (SFX) o;
    return Objects.equals(this.title, SFX.title) &&
        Objects.equals(this.description, SFX.description) &&
        Objects.equals(this.addedDate, SFX.addedDate) &&
        Objects.equals(this.affiliateUrl, SFX.affiliateUrl) &&
        Objects.equals(this.artist, SFX.artist) &&
        Objects.equals(this.assets, SFX.assets) &&
        Objects.equals(this.contributor, SFX.contributor) &&
        Objects.equals(this.duration, SFX.duration) &&
        Objects.equals(this.id, SFX.id) &&
        Objects.equals(this.keywords, SFX.keywords) &&
        Objects.equals(this.mediaType, SFX.mediaType) &&
        Objects.equals(this.releases, SFX.releases) &&
        Objects.equals(this.updatedTime, SFX.updatedTime) &&
        Objects.equals(this.url, SFX.url)&&
        Objects.equals(this.additionalProperties, SFX.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, addedDate, affiliateUrl, artist, assets, contributor, duration, id, keywords, mediaType, releases, updatedTime, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SFX {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addedDate: ").append(toIndentedString(addedDate)).append("\n");
    sb.append("    affiliateUrl: ").append(toIndentedString(affiliateUrl)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    contributor: ").append(toIndentedString(contributor)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("added_date");
    openapiFields.add("affiliate_url");
    openapiFields.add("artist");
    openapiFields.add("assets");
    openapiFields.add("contributor");
    openapiFields.add("duration");
    openapiFields.add("id");
    openapiFields.add("keywords");
    openapiFields.add("media_type");
    openapiFields.add("releases");
    openapiFields.add("updated_time");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contributor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("media_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SFX
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SFX.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SFX is not found in the empty JSON string", SFX.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SFX.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("affiliate_url") != null && !jsonObj.get("affiliate_url").isJsonNull()) && !jsonObj.get("affiliate_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliate_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliate_url").toString()));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        SFXAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
      // validate the required field `contributor`
      Contributor.validateJsonObject(jsonObj.getAsJsonObject("contributor"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releases") != null && !jsonObj.get("releases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases` to be an array in the JSON string but got `%s`", jsonObj.get("releases").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SFX.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SFX' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SFX> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SFX.class));

       return (TypeAdapter<T>) new TypeAdapter<SFX>() {
           @Override
           public void write(JsonWriter out, SFX value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SFX read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SFX instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SFX given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SFX
  * @throws IOException if the JSON string is invalid with respect to SFX
  */
  public static SFX fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SFX.class);
  }

 /**
  * Convert an instance of SFX to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

