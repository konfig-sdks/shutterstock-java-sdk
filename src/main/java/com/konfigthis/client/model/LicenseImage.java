/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomSizeDimensions;
import com.konfigthis.client.model.LicenseImageAuthCookie;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data required to license an image
 */
@ApiModel(description = "Data required to license an image")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LicenseImage {
  public static final String SERIALIZED_NAME_AUTH_COOKIE = "auth_cookie";
  @SerializedName(SERIALIZED_NAME_AUTH_COOKIE)
  private LicenseImageAuthCookie authCookie;

  public static final String SERIALIZED_NAME_CUSTOM_DIMENSIONS = "custom_dimensions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DIMENSIONS)
  private CustomSizeDimensions customDimensions;

  public static final String SERIALIZED_NAME_EDITORIAL_ACKNOWLEDGEMENT = "editorial_acknowledgement";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_ACKNOWLEDGEMENT)
  private Boolean editorialAcknowledgement;

  /**
   * (Deprecated) Image format to download
   */
  @JsonAdapter(FormatEnum.Adapter.class)
 public enum FormatEnum {
    JPG("jpg");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.JPG;

  public static final String SERIALIZED_NAME_IMAGE_ID = "image_id";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_SEARCH_ID = "search_id";
  @SerializedName(SERIALIZED_NAME_SEARCH_ID)
  private String searchId;

  public static final String SERIALIZED_NAME_SHOW_MODAL = "show_modal";
  @SerializedName(SERIALIZED_NAME_SHOW_MODAL)
  private Boolean showModal;

  /**
   * Image size to download
   */
  @JsonAdapter(SizeEnum.Adapter.class)
 public enum SizeEnum {
    SMALL("small"),
    
    MEDIUM("medium"),
    
    HUGE("huge"),
    
    CUSTOM("custom");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_VERIFICATION_CODE = "verification_code";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_CODE)
  private String verificationCode;

  public LicenseImage() {
  }

  public LicenseImage authCookie(LicenseImageAuthCookie authCookie) {
    
    
    
    
    this.authCookie = authCookie;
    return this;
  }

   /**
   * Get authCookie
   * @return authCookie
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LicenseImageAuthCookie getAuthCookie() {
    return authCookie;
  }


  public void setAuthCookie(LicenseImageAuthCookie authCookie) {
    
    
    
    this.authCookie = authCookie;
  }


  public LicenseImage customDimensions(CustomSizeDimensions customDimensions) {
    
    
    
    
    this.customDimensions = customDimensions;
    return this;
  }

   /**
   * Get customDimensions
   * @return customDimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomSizeDimensions getCustomDimensions() {
    return customDimensions;
  }


  public void setCustomDimensions(CustomSizeDimensions customDimensions) {
    
    
    
    this.customDimensions = customDimensions;
  }


  public LicenseImage editorialAcknowledgement(Boolean editorialAcknowledgement) {
    
    
    
    
    this.editorialAcknowledgement = editorialAcknowledgement;
    return this;
  }

   /**
   * Set to true to acknowledge the editorial agreement
   * @return editorialAcknowledgement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Set to true to acknowledge the editorial agreement")

  public Boolean getEditorialAcknowledgement() {
    return editorialAcknowledgement;
  }


  public void setEditorialAcknowledgement(Boolean editorialAcknowledgement) {
    
    
    
    this.editorialAcknowledgement = editorialAcknowledgement;
  }


  public LicenseImage format(FormatEnum format) {
    
    
    
    
    this.format = format;
    return this;
  }

   /**
   * (Deprecated) Image format to download
   * @return format
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "JPG", value = "(Deprecated) Image format to download")

  public FormatEnum getFormat() {
    return format;
  }


  public void setFormat(FormatEnum format) {
    
    
    
    this.format = format;
  }


  public LicenseImage imageId(String imageId) {
    
    
    
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Image ID
   * @return imageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123456789", required = true, value = "Image ID")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    
    
    
    this.imageId = imageId;
  }


  public LicenseImage metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"customer_id\":\"12345\",\"geo_location\":\"US\",\"number_viewed\":\"15\",\"search_term\":\"dog\"}", value = "Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public LicenseImage price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

  public LicenseImage price(Integer price) {
    
    
    
    
    this.price = price.doubleValue();
    return this;
  }

   /**
   * For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12.34", value = "For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public LicenseImage searchId(String searchId) {
    
    
    
    
    this.searchId = searchId;
    return this;
  }

   /**
   * ID of the search that led to this licensing transaction
   * @return searchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the search that led to this licensing transaction")

  public String getSearchId() {
    return searchId;
  }


  public void setSearchId(String searchId) {
    
    
    
    this.searchId = searchId;
  }


  public LicenseImage showModal(Boolean showModal) {
    
    
    
    
    this.showModal = showModal;
    return this;
  }

   /**
   * (Deprecated)
   * @return showModal
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "(Deprecated)")

  public Boolean getShowModal() {
    return showModal;
  }


  public void setShowModal(Boolean showModal) {
    
    
    
    this.showModal = showModal;
  }


  public LicenseImage size(SizeEnum size) {
    
    
    
    
    this.size = size;
    return this;
  }

   /**
   * Image size to download
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SMALL", value = "Image size to download")

  public SizeEnum getSize() {
    return size;
  }


  public void setSize(SizeEnum size) {
    
    
    
    this.size = size;
  }


  public LicenseImage subscriptionId(String subscriptionId) {
    
    
    
    
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * ID of the subscription to use for the download.
   * @return subscriptionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "s12345678", value = "ID of the subscription to use for the download.")

  public String getSubscriptionId() {
    return subscriptionId;
  }


  public void setSubscriptionId(String subscriptionId) {
    
    
    
    this.subscriptionId = subscriptionId;
  }


  public LicenseImage verificationCode(String verificationCode) {
    
    
    
    
    this.verificationCode = verificationCode;
    return this;
  }

   /**
   * (Deprecated)
   * @return verificationCode
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(Deprecated)")

  public String getVerificationCode() {
    return verificationCode;
  }


  public void setVerificationCode(String verificationCode) {
    
    
    
    this.verificationCode = verificationCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LicenseImage instance itself
   */
  public LicenseImage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseImage licenseImage = (LicenseImage) o;
    return Objects.equals(this.authCookie, licenseImage.authCookie) &&
        Objects.equals(this.customDimensions, licenseImage.customDimensions) &&
        Objects.equals(this.editorialAcknowledgement, licenseImage.editorialAcknowledgement) &&
        Objects.equals(this.format, licenseImage.format) &&
        Objects.equals(this.imageId, licenseImage.imageId) &&
        Objects.equals(this.metadata, licenseImage.metadata) &&
        Objects.equals(this.price, licenseImage.price) &&
        Objects.equals(this.searchId, licenseImage.searchId) &&
        Objects.equals(this.showModal, licenseImage.showModal) &&
        Objects.equals(this.size, licenseImage.size) &&
        Objects.equals(this.subscriptionId, licenseImage.subscriptionId) &&
        Objects.equals(this.verificationCode, licenseImage.verificationCode)&&
        Objects.equals(this.additionalProperties, licenseImage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authCookie, customDimensions, editorialAcknowledgement, format, imageId, metadata, price, searchId, showModal, size, subscriptionId, verificationCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseImage {\n");
    sb.append("    authCookie: ").append(toIndentedString(authCookie)).append("\n");
    sb.append("    customDimensions: ").append(toIndentedString(customDimensions)).append("\n");
    sb.append("    editorialAcknowledgement: ").append(toIndentedString(editorialAcknowledgement)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    searchId: ").append(toIndentedString(searchId)).append("\n");
    sb.append("    showModal: ").append(toIndentedString(showModal)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_cookie");
    openapiFields.add("custom_dimensions");
    openapiFields.add("editorial_acknowledgement");
    openapiFields.add("format");
    openapiFields.add("image_id");
    openapiFields.add("metadata");
    openapiFields.add("price");
    openapiFields.add("search_id");
    openapiFields.add("show_modal");
    openapiFields.add("size");
    openapiFields.add("subscription_id");
    openapiFields.add("verification_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LicenseImage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LicenseImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseImage is not found in the empty JSON string", LicenseImage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseImage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `auth_cookie`
      if (jsonObj.get("auth_cookie") != null && !jsonObj.get("auth_cookie").isJsonNull()) {
        LicenseImageAuthCookie.validateJsonObject(jsonObj.getAsJsonObject("auth_cookie"));
      }
      // validate the optional field `custom_dimensions`
      if (jsonObj.get("custom_dimensions") != null && !jsonObj.get("custom_dimensions").isJsonNull()) {
        CustomSizeDimensions.validateJsonObject(jsonObj.getAsJsonObject("custom_dimensions"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if (!jsonObj.get("image_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_id").toString()));
      }
      if ((jsonObj.get("search_id") != null && !jsonObj.get("search_id").isJsonNull()) && !jsonObj.get("search_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_id").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if ((jsonObj.get("verification_code") != null && !jsonObj.get("verification_code").isJsonNull()) && !jsonObj.get("verification_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseImage.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseImage>() {
           @Override
           public void write(JsonWriter out, LicenseImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseImage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LicenseImage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LicenseImage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LicenseImage
  * @throws IOException if the JSON string is invalid with respect to LicenseImage
  */
  public static LicenseImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseImage.class);
  }

 /**
  * Convert an instance of LicenseImage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

