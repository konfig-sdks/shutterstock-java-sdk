/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Bands;
import com.konfigthis.client.model.Instruments;
import com.konfigthis.client.model.Preview;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about a descriptor
 */
@ApiModel(description = "Information about a descriptor")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Descriptors {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_AVERAGE_RENDER_SPEED = "average_render_speed";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RENDER_SPEED)
  private Double averageRenderSpeed;

  public static final String SERIALIZED_NAME_BANDS = "bands";
  @SerializedName(SERIALIZED_NAME_BANDS)
  private List<Bands> bands = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUMENTS = "instruments";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTS)
  private List<Instruments> instruments = null;

  public static final String SERIALIZED_NAME_MAX_TEMPO = "max_tempo";
  @SerializedName(SERIALIZED_NAME_MAX_TEMPO)
  private Double maxTempo;

  public static final String SERIALIZED_NAME_MIN_TEMPO = "min_tempo";
  @SerializedName(SERIALIZED_NAME_MIN_TEMPO)
  private Double minTempo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIEWS = "previews";
  @SerializedName(SERIALIZED_NAME_PREVIEWS)
  private List<Preview> previews = null;

  public Descriptors() {
  }

  public Descriptors tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Descriptors addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags that describe the descriptor
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags that describe the descriptor")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public Descriptors averageRenderSpeed(Double averageRenderSpeed) {
    
    
    
    
    this.averageRenderSpeed = averageRenderSpeed;
    return this;
  }

  public Descriptors averageRenderSpeed(Integer averageRenderSpeed) {
    
    
    
    
    this.averageRenderSpeed = averageRenderSpeed.doubleValue();
    return this;
  }

   /**
   * The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds
   * @return averageRenderSpeed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8.242664029014177", value = "The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds")

  public Double getAverageRenderSpeed() {
    return averageRenderSpeed;
  }


  public void setAverageRenderSpeed(Double averageRenderSpeed) {
    
    
    
    this.averageRenderSpeed = averageRenderSpeed;
  }


  public Descriptors bands(List<Bands> bands) {
    
    
    
    
    this.bands = bands;
    return this;
  }

  public Descriptors addBandsItem(Bands bandsItem) {
    if (this.bands == null) {
      this.bands = new ArrayList<>();
    }
    this.bands.add(bandsItem);
    return this;
  }

   /**
   * The bands that are available to use this descriptor
   * @return bands
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bands that are available to use this descriptor")

  public List<Bands> getBands() {
    return bands;
  }


  public void setBands(List<Bands> bands) {
    
    
    
    this.bands = bands;
  }


  public Descriptors id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the descriptor
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cinematic_minimal_tense", value = "The ID of the descriptor")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Descriptors instruments(List<Instruments> instruments) {
    
    
    
    
    this.instruments = instruments;
    return this;
  }

  public Descriptors addInstrumentsItem(Instruments instrumentsItem) {
    if (this.instruments == null) {
      this.instruments = new ArrayList<>();
    }
    this.instruments.add(instrumentsItem);
    return this;
  }

   /**
   * The instruments that can play with this descriptor
   * @return instruments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The instruments that can play with this descriptor")

  public List<Instruments> getInstruments() {
    return instruments;
  }


  public void setInstruments(List<Instruments> instruments) {
    
    
    
    this.instruments = instruments;
  }


  public Descriptors maxTempo(Double maxTempo) {
    
    
    
    
    this.maxTempo = maxTempo;
    return this;
  }

  public Descriptors maxTempo(Integer maxTempo) {
    
    
    
    
    this.maxTempo = maxTempo.doubleValue();
    return this;
  }

   /**
   * The maximum beats per minute that the descriptor is intended to be used with
   * @return maxTempo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "76", value = "The maximum beats per minute that the descriptor is intended to be used with")

  public Double getMaxTempo() {
    return maxTempo;
  }


  public void setMaxTempo(Double maxTempo) {
    
    
    
    this.maxTempo = maxTempo;
  }


  public Descriptors minTempo(Double minTempo) {
    
    
    
    
    this.minTempo = minTempo;
    return this;
  }

  public Descriptors minTempo(Integer minTempo) {
    
    
    
    
    this.minTempo = minTempo.doubleValue();
    return this;
  }

   /**
   * The minimum beats per minute that the descriptor is intended to be used with
   * @return minTempo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "58", value = "The minimum beats per minute that the descriptor is intended to be used with")

  public Double getMinTempo() {
    return minTempo;
  }


  public void setMinTempo(Double minTempo) {
    
    
    
    this.minTempo = minTempo;
  }


  public Descriptors name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the descriptor
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cinematic Minimal Tense", value = "The name of the descriptor")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Descriptors previews(List<Preview> previews) {
    
    
    
    
    this.previews = previews;
    return this;
  }

  public Descriptors addPreviewsItem(Preview previewsItem) {
    if (this.previews == null) {
      this.previews = new ArrayList<>();
    }
    this.previews.add(previewsItem);
    return this;
  }

   /**
   * Preview of the descriptor
   * @return previews
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Preview of the descriptor")

  public List<Preview> getPreviews() {
    return previews;
  }


  public void setPreviews(List<Preview> previews) {
    
    
    
    this.previews = previews;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Descriptors instance itself
   */
  public Descriptors putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Descriptors descriptors = (Descriptors) o;
    return Objects.equals(this.tags, descriptors.tags) &&
        Objects.equals(this.averageRenderSpeed, descriptors.averageRenderSpeed) &&
        Objects.equals(this.bands, descriptors.bands) &&
        Objects.equals(this.id, descriptors.id) &&
        Objects.equals(this.instruments, descriptors.instruments) &&
        Objects.equals(this.maxTempo, descriptors.maxTempo) &&
        Objects.equals(this.minTempo, descriptors.minTempo) &&
        Objects.equals(this.name, descriptors.name) &&
        Objects.equals(this.previews, descriptors.previews)&&
        Objects.equals(this.additionalProperties, descriptors.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, averageRenderSpeed, bands, id, instruments, maxTempo, minTempo, name, previews, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Descriptors {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    averageRenderSpeed: ").append(toIndentedString(averageRenderSpeed)).append("\n");
    sb.append("    bands: ").append(toIndentedString(bands)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instruments: ").append(toIndentedString(instruments)).append("\n");
    sb.append("    maxTempo: ").append(toIndentedString(maxTempo)).append("\n");
    sb.append("    minTempo: ").append(toIndentedString(minTempo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("average_render_speed");
    openapiFields.add("bands");
    openapiFields.add("id");
    openapiFields.add("instruments");
    openapiFields.add("max_tempo");
    openapiFields.add("min_tempo");
    openapiFields.add("name");
    openapiFields.add("previews");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Descriptors
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Descriptors.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Descriptors is not found in the empty JSON string", Descriptors.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("bands") != null && !jsonObj.get("bands").isJsonNull()) {
        JsonArray jsonArraybands = jsonObj.getAsJsonArray("bands");
        if (jsonArraybands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bands` to be an array in the JSON string but got `%s`", jsonObj.get("bands").toString()));
          }

          // validate the optional field `bands` (array)
          for (int i = 0; i < jsonArraybands.size(); i++) {
            Bands.validateJsonObject(jsonArraybands.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("instruments") != null && !jsonObj.get("instruments").isJsonNull()) {
        JsonArray jsonArrayinstruments = jsonObj.getAsJsonArray("instruments");
        if (jsonArrayinstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instruments` to be an array in the JSON string but got `%s`", jsonObj.get("instruments").toString()));
          }

          // validate the optional field `instruments` (array)
          for (int i = 0; i < jsonArrayinstruments.size(); i++) {
            Instruments.validateJsonObject(jsonArrayinstruments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("previews") != null && !jsonObj.get("previews").isJsonNull()) {
        JsonArray jsonArraypreviews = jsonObj.getAsJsonArray("previews");
        if (jsonArraypreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previews` to be an array in the JSON string but got `%s`", jsonObj.get("previews").toString()));
          }

          // validate the optional field `previews` (array)
          for (int i = 0; i < jsonArraypreviews.size(); i++) {
            Preview.validateJsonObject(jsonArraypreviews.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Descriptors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Descriptors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Descriptors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Descriptors.class));

       return (TypeAdapter<T>) new TypeAdapter<Descriptors>() {
           @Override
           public void write(JsonWriter out, Descriptors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Descriptors read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Descriptors instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Descriptors given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Descriptors
  * @throws IOException if the JSON string is invalid with respect to Descriptors
  */
  public static Descriptors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Descriptors.class);
  }

 /**
  * Convert an instance of Descriptors to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

