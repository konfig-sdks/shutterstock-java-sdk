/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Allotment;
import com.konfigthis.client.model.LicenseFormat;
import com.konfigthis.client.model.Price;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Subscription information
 */
@ApiModel(description = "Subscription information")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Subscription {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ALLOTMENT = "allotment";
  @SerializedName(SERIALIZED_NAME_ALLOTMENT)
  private Allotment allotment;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "asset_type";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expiration_time";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<LicenseFormat> formats = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PRICE_PER_DOWNLOAD = "price_per_download";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_DOWNLOAD)
  private Price pricePerDownload;

  public Subscription() {
  }

  public Subscription description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the subscription
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Annual Subscription", value = "Description of the subscription")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Subscription allotment(Allotment allotment) {
    
    
    
    
    this.allotment = allotment;
    return this;
  }

   /**
   * Get allotment
   * @return allotment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Allotment getAllotment() {
    return allotment;
  }


  public void setAllotment(Allotment allotment) {
    
    
    
    this.allotment = allotment;
  }


  public Subscription assetType(String assetType) {
    
    
    
    
    this.assetType = assetType;
    return this;
  }

   /**
   * Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)
   * @return assetType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "images", value = "Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)")

  public String getAssetType() {
    return assetType;
  }


  public void setAssetType(String assetType) {
    
    
    
    this.assetType = assetType;
  }


  public Subscription expirationTime(OffsetDateTime expirationTime) {
    
    
    
    
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * Date the subscription ends
   * @return expirationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-05-29T17:10:22Z", value = "Date the subscription ends")

  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }


  public void setExpirationTime(OffsetDateTime expirationTime) {
    
    
    
    this.expirationTime = expirationTime;
  }


  public Subscription formats(List<LicenseFormat> formats) {
    
    
    
    
    this.formats = formats;
    return this;
  }

  public Subscription addFormatsItem(LicenseFormat formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

   /**
   * List of formats that are licensable for the subscription
   * @return formats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of formats that are licensable for the subscription")

  public List<LicenseFormat> getFormats() {
    return formats;
  }


  public void setFormats(List<LicenseFormat> formats) {
    
    
    
    this.formats = formats;
  }


  public Subscription id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique internal identifier for the subscription
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "s8906043", required = true, value = "Unique internal identifier for the subscription")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Subscription license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * Internal identifier for the type of subscription
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "standard", value = "Internal identifier for the type of subscription")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public Subscription metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Subscription metadata; different for each customer
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"client\":{\"is_required\":false,\"name\":\"purchase_order\"},\"job\":{\"is_required\":true,\"name\":\"client_name\"},\"other\":{\"is_required\":false,\"name\":\"custom_value\"}}", value = "Subscription metadata; different for each customer")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Subscription pricePerDownload(Price pricePerDownload) {
    
    
    
    
    this.pricePerDownload = pricePerDownload;
    return this;
  }

   /**
   * Get pricePerDownload
   * @return pricePerDownload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Price getPricePerDownload() {
    return pricePerDownload;
  }


  public void setPricePerDownload(Price pricePerDownload) {
    
    
    
    this.pricePerDownload = pricePerDownload;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Subscription instance itself
   */
  public Subscription putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.description, subscription.description) &&
        Objects.equals(this.allotment, subscription.allotment) &&
        Objects.equals(this.assetType, subscription.assetType) &&
        Objects.equals(this.expirationTime, subscription.expirationTime) &&
        Objects.equals(this.formats, subscription.formats) &&
        Objects.equals(this.id, subscription.id) &&
        Objects.equals(this.license, subscription.license) &&
        Objects.equals(this.metadata, subscription.metadata) &&
        Objects.equals(this.pricePerDownload, subscription.pricePerDownload)&&
        Objects.equals(this.additionalProperties, subscription.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, allotment, assetType, expirationTime, formats, id, license, metadata, pricePerDownload, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    allotment: ").append(toIndentedString(allotment)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    pricePerDownload: ").append(toIndentedString(pricePerDownload)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("allotment");
    openapiFields.add("asset_type");
    openapiFields.add("expiration_time");
    openapiFields.add("formats");
    openapiFields.add("id");
    openapiFields.add("license");
    openapiFields.add("metadata");
    openapiFields.add("price_per_download");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Subscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `allotment`
      if (jsonObj.get("allotment") != null && !jsonObj.get("allotment").isJsonNull()) {
        Allotment.validateJsonObject(jsonObj.getAsJsonObject("allotment"));
      }
      if ((jsonObj.get("asset_type") != null && !jsonObj.get("asset_type").isJsonNull()) && !jsonObj.get("asset_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_type").toString()));
      }
      if (jsonObj.get("formats") != null && !jsonObj.get("formats").isJsonNull()) {
        JsonArray jsonArrayformats = jsonObj.getAsJsonArray("formats");
        if (jsonArrayformats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
          }

          // validate the optional field `formats` (array)
          for (int i = 0; i < jsonArrayformats.size(); i++) {
            LicenseFormat.validateJsonObject(jsonArrayformats.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // validate the optional field `price_per_download`
      if (jsonObj.get("price_per_download") != null && !jsonObj.get("price_per_download").isJsonNull()) {
        Price.validateJsonObject(jsonObj.getAsJsonObject("price_per_download"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Subscription instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Subscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Subscription
  * @throws IOException if the JSON string is invalid with respect to Subscription
  */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

 /**
  * Convert an instance of Subscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

