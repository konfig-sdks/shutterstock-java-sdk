/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Album;
import com.konfigthis.client.model.Artist;
import com.konfigthis.client.model.AudioAssets;
import com.konfigthis.client.model.Contributor;
import com.konfigthis.client.model.ModelRelease;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Audio metadata
 */
@ApiModel(description = "Audio metadata")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Audio {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDED_DATE = "added_date";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE)
  private LocalDate addedDate;

  public static final String SERIALIZED_NAME_AFFILIATE_URL = "affiliate_url";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_URL)
  private String affiliateUrl;

  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private Album album;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<Artist> artists = null;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private AudioAssets assets;

  public static final String SERIALIZED_NAME_BPM = "bpm";
  @SerializedName(SERIALIZED_NAME_BPM)
  private Integer bpm;

  public static final String SERIALIZED_NAME_CONTRIBUTOR = "contributor";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR)
  private Contributor contributor;

  public static final String SERIALIZED_NAME_DELETED_TIME = "deleted_time";
  @SerializedName(SERIALIZED_NAME_DELETED_TIME)
  private OffsetDateTime deletedTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<String> genres = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUMENTS = "instruments";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTS)
  private List<String> instruments = null;

  public static final String SERIALIZED_NAME_IS_ADULT = "is_adult";
  @SerializedName(SERIALIZED_NAME_IS_ADULT)
  private Boolean isAdult;

  public static final String SERIALIZED_NAME_IS_INSTRUMENTAL = "is_instrumental";
  @SerializedName(SERIALIZED_NAME_IS_INSTRUMENTAL)
  private Boolean isInstrumental;

  public static final String SERIALIZED_NAME_ISRC = "isrc";
  @SerializedName(SERIALIZED_NAME_ISRC)
  private String isrc;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LYRICS = "lyrics";
  @SerializedName(SERIALIZED_NAME_LYRICS)
  private String lyrics;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_MODEL_RELEASES = "model_releases";
  @SerializedName(SERIALIZED_NAME_MODEL_RELEASES)
  private List<ModelRelease> modelReleases = null;

  public static final String SERIALIZED_NAME_MOODS = "moods";
  @SerializedName(SERIALIZED_NAME_MOODS)
  private List<String> moods = null;

  public static final String SERIALIZED_NAME_PUBLISHED_TIME = "published_time";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_TIME)
  private OffsetDateTime publishedTime;

  public static final String SERIALIZED_NAME_RECORDING_VERSION = "recording_version";
  @SerializedName(SERIALIZED_NAME_RECORDING_VERSION)
  private String recordingVersion;

  public static final String SERIALIZED_NAME_RELEASES = "releases";
  @SerializedName(SERIALIZED_NAME_RELEASES)
  private List<String> releases = null;

  public static final String SERIALIZED_NAME_SIMILAR_ARTISTS = "similar_artists";
  @SerializedName(SERIALIZED_NAME_SIMILAR_ARTISTS)
  private List<Artist> similarArtists = null;

  public static final String SERIALIZED_NAME_SUBMITTED_TIME = "submitted_time";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_TIME)
  private OffsetDateTime submittedTime;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VOCAL_DESCRIPTION = "vocal_description";
  @SerializedName(SERIALIZED_NAME_VOCAL_DESCRIPTION)
  private String vocalDescription;

  public Audio() {
  }

  public Audio title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of this track
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Another Tomorrow", value = "Title of this track")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Audio description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of this track
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.", value = "Description of this track")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Audio addedDate(LocalDate addedDate) {
    
    
    
    
    this.addedDate = addedDate;
    return this;
  }

   /**
   * Date this track was added to the Shutterstock library
   * @return addedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this track was added to the Shutterstock library")

  public LocalDate getAddedDate() {
    return addedDate;
  }


  public void setAddedDate(LocalDate addedDate) {
    
    
    
    this.addedDate = addedDate;
  }


  public Audio affiliateUrl(String affiliateUrl) {
    
    
    
    
    this.affiliateUrl = affiliateUrl;
    return this;
  }

   /**
   * Affiliate referral link; appears only for registered affiliate partners
   * @return affiliateUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate referral link; appears only for registered affiliate partners")

  public String getAffiliateUrl() {
    return affiliateUrl;
  }


  public void setAffiliateUrl(String affiliateUrl) {
    
    
    
    this.affiliateUrl = affiliateUrl;
  }


  public Audio album(Album album) {
    
    
    
    
    this.album = album;
    return this;
  }

   /**
   * Get album
   * @return album
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Album getAlbum() {
    return album;
  }


  public void setAlbum(Album album) {
    
    
    
    this.album = album;
  }


  public Audio artists(List<Artist> artists) {
    
    
    
    
    this.artists = artists;
    return this;
  }

  public Audio addArtistsItem(Artist artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * List of artists
   * @return artists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of artists")

  public List<Artist> getArtists() {
    return artists;
  }


  public void setArtists(List<Artist> artists) {
    
    
    
    this.artists = artists;
  }


  public Audio assets(AudioAssets assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAssets getAssets() {
    return assets;
  }


  public void setAssets(AudioAssets assets) {
    
    
    
    this.assets = assets;
  }


  public Audio bpm(Integer bpm) {
    
    
    
    
    this.bpm = bpm;
    return this;
  }

   /**
   * BPM (beats per minute) of this track
   * @return bpm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "110", value = "BPM (beats per minute) of this track")

  public Integer getBpm() {
    return bpm;
  }


  public void setBpm(Integer bpm) {
    
    
    
    this.bpm = bpm;
  }


  public Audio contributor(Contributor contributor) {
    
    
    
    
    this.contributor = contributor;
    return this;
  }

   /**
   * Get contributor
   * @return contributor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contributor getContributor() {
    return contributor;
  }


  public void setContributor(Contributor contributor) {
    
    
    
    this.contributor = contributor;
  }


  public Audio deletedTime(OffsetDateTime deletedTime) {
    
    
    
    
    this.deletedTime = deletedTime;
    return this;
  }

   /**
   * Get deletedTime
   * @return deletedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeletedTime() {
    return deletedTime;
  }


  public void setDeletedTime(OffsetDateTime deletedTime) {
    
    
    
    this.deletedTime = deletedTime;
  }


  public Audio duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public Audio duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * Duration of this track in seconds
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "183", value = "Duration of this track in seconds")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public Audio genres(List<String> genres) {
    
    
    
    
    this.genres = genres;
    return this;
  }

  public Audio addGenresItem(String genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * List of all genres for this track
   * @return genres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all genres for this track")

  public List<String> getGenres() {
    return genres;
  }


  public void setGenres(List<String> genres) {
    
    
    
    this.genres = genres;
  }


  public Audio id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Shutterstock ID of this track
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "442583X", required = true, value = "Shutterstock ID of this track")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Audio instruments(List<String> instruments) {
    
    
    
    
    this.instruments = instruments;
    return this;
  }

  public Audio addInstrumentsItem(String instrumentsItem) {
    if (this.instruments == null) {
      this.instruments = new ArrayList<>();
    }
    this.instruments.add(instrumentsItem);
    return this;
  }

   /**
   * List of all instruments that appear in this track
   * @return instruments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all instruments that appear in this track")

  public List<String> getInstruments() {
    return instruments;
  }


  public void setInstruments(List<String> instruments) {
    
    
    
    this.instruments = instruments;
  }


  public Audio isAdult(Boolean isAdult) {
    
    
    
    
    this.isAdult = isAdult;
    return this;
  }

   /**
   * Whether or not this track contains adult content
   * @return isAdult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not this track contains adult content")

  public Boolean getIsAdult() {
    return isAdult;
  }


  public void setIsAdult(Boolean isAdult) {
    
    
    
    this.isAdult = isAdult;
  }


  public Audio isInstrumental(Boolean isInstrumental) {
    
    
    
    
    this.isInstrumental = isInstrumental;
    return this;
  }

   /**
   * Whether or not this track is purely instrumental (lacking lyrics)
   * @return isInstrumental
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not this track is purely instrumental (lacking lyrics)")

  public Boolean getIsInstrumental() {
    return isInstrumental;
  }


  public void setIsInstrumental(Boolean isInstrumental) {
    
    
    
    this.isInstrumental = isInstrumental;
  }


  public Audio isrc(String isrc) {
    
    
    
    
    this.isrc = isrc;
    return this;
  }

   /**
   * 
   * @return isrc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getIsrc() {
    return isrc;
  }


  public void setIsrc(String isrc) {
    
    
    
    this.isrc = isrc;
  }


  public Audio keywords(List<String> keywords) {
    
    
    
    
    this.keywords = keywords;
    return this;
  }

  public Audio addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * List of all keywords for this track
   * @return keywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all keywords for this track")

  public List<String> getKeywords() {
    return keywords;
  }


  public void setKeywords(List<String> keywords) {
    
    
    
    this.keywords = keywords;
  }


  public Audio language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * Language of this track&#39;s lyrics
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "Language of this track's lyrics")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public Audio lyrics(String lyrics) {
    
    
    
    
    this.lyrics = lyrics;
    return this;
  }

   /**
   * Lyrics of this track
   * @return lyrics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Lyrics of this track")

  public String getLyrics() {
    return lyrics;
  }


  public void setLyrics(String lyrics) {
    
    
    
    this.lyrics = lyrics;
  }


  public Audio mediaType(String mediaType) {
    
    
    
    
    this.mediaType = mediaType;
    return this;
  }

   /**
   * Media type of this track; should always be \&quot;audio\&quot;
   * @return mediaType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "audio", required = true, value = "Media type of this track; should always be \"audio\"")

  public String getMediaType() {
    return mediaType;
  }


  public void setMediaType(String mediaType) {
    
    
    
    this.mediaType = mediaType;
  }


  public Audio modelReleases(List<ModelRelease> modelReleases) {
    
    
    
    
    this.modelReleases = modelReleases;
    return this;
  }

  public Audio addModelReleasesItem(ModelRelease modelReleasesItem) {
    if (this.modelReleases == null) {
      this.modelReleases = new ArrayList<>();
    }
    this.modelReleases.add(modelReleasesItem);
    return this;
  }

   /**
   * List of all model releases for this track
   * @return modelReleases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all model releases for this track")

  public List<ModelRelease> getModelReleases() {
    return modelReleases;
  }


  public void setModelReleases(List<ModelRelease> modelReleases) {
    
    
    
    this.modelReleases = modelReleases;
  }


  public Audio moods(List<String> moods) {
    
    
    
    
    this.moods = moods;
    return this;
  }

  public Audio addMoodsItem(String moodsItem) {
    if (this.moods == null) {
      this.moods = new ArrayList<>();
    }
    this.moods.add(moodsItem);
    return this;
  }

   /**
   * List of all moods of this track
   * @return moods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all moods of this track")

  public List<String> getMoods() {
    return moods;
  }


  public void setMoods(List<String> moods) {
    
    
    
    this.moods = moods;
  }


  public Audio publishedTime(OffsetDateTime publishedTime) {
    
    
    
    
    this.publishedTime = publishedTime;
    return this;
  }

   /**
   * Time this track was published
   * @return publishedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-08-16T18:30:03Z", value = "Time this track was published")

  public OffsetDateTime getPublishedTime() {
    return publishedTime;
  }


  public void setPublishedTime(OffsetDateTime publishedTime) {
    
    
    
    this.publishedTime = publishedTime;
  }


  public Audio recordingVersion(String recordingVersion) {
    
    
    
    
    this.recordingVersion = recordingVersion;
    return this;
  }

   /**
   * Recording version of this track
   * @return recordingVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Recording version of this track")

  public String getRecordingVersion() {
    return recordingVersion;
  }


  public void setRecordingVersion(String recordingVersion) {
    
    
    
    this.recordingVersion = recordingVersion;
  }


  public Audio releases(List<String> releases) {
    
    
    
    
    this.releases = releases;
    return this;
  }

  public Audio addReleasesItem(String releasesItem) {
    if (this.releases == null) {
      this.releases = new ArrayList<>();
    }
    this.releases.add(releasesItem);
    return this;
  }

   /**
   * List of all releases of this track
   * @return releases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all releases of this track")

  public List<String> getReleases() {
    return releases;
  }


  public void setReleases(List<String> releases) {
    
    
    
    this.releases = releases;
  }


  public Audio similarArtists(List<Artist> similarArtists) {
    
    
    
    
    this.similarArtists = similarArtists;
    return this;
  }

  public Audio addSimilarArtistsItem(Artist similarArtistsItem) {
    if (this.similarArtists == null) {
      this.similarArtists = new ArrayList<>();
    }
    this.similarArtists.add(similarArtistsItem);
    return this;
  }

   /**
   * List of all similar artists of this track
   * @return similarArtists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all similar artists of this track")

  public List<Artist> getSimilarArtists() {
    return similarArtists;
  }


  public void setSimilarArtists(List<Artist> similarArtists) {
    
    
    
    this.similarArtists = similarArtists;
  }


  public Audio submittedTime(OffsetDateTime submittedTime) {
    
    
    
    
    this.submittedTime = submittedTime;
    return this;
  }

   /**
   * Time this track was submitted
   * @return submittedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time this track was submitted")

  public OffsetDateTime getSubmittedTime() {
    return submittedTime;
  }


  public void setSubmittedTime(OffsetDateTime submittedTime) {
    
    
    
    this.submittedTime = submittedTime;
  }


  public Audio updatedTime(OffsetDateTime updatedTime) {
    
    
    
    
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Time this track was last updated
   * @return updatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-08-18T21:59:33Z", value = "Time this track was last updated")

  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }


  public void setUpdatedTime(OffsetDateTime updatedTime) {
    
    
    
    this.updatedTime = updatedTime;
  }


  public Audio url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * 
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public Audio vocalDescription(String vocalDescription) {
    
    
    
    
    this.vocalDescription = vocalDescription;
    return this;
  }

   /**
   * Vocal description of this track
   * @return vocalDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Vocal description of this track")

  public String getVocalDescription() {
    return vocalDescription;
  }


  public void setVocalDescription(String vocalDescription) {
    
    
    
    this.vocalDescription = vocalDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Audio instance itself
   */
  public Audio putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Audio audio = (Audio) o;
    return Objects.equals(this.title, audio.title) &&
        Objects.equals(this.description, audio.description) &&
        Objects.equals(this.addedDate, audio.addedDate) &&
        Objects.equals(this.affiliateUrl, audio.affiliateUrl) &&
        Objects.equals(this.album, audio.album) &&
        Objects.equals(this.artists, audio.artists) &&
        Objects.equals(this.assets, audio.assets) &&
        Objects.equals(this.bpm, audio.bpm) &&
        Objects.equals(this.contributor, audio.contributor) &&
        Objects.equals(this.deletedTime, audio.deletedTime) &&
        Objects.equals(this.duration, audio.duration) &&
        Objects.equals(this.genres, audio.genres) &&
        Objects.equals(this.id, audio.id) &&
        Objects.equals(this.instruments, audio.instruments) &&
        Objects.equals(this.isAdult, audio.isAdult) &&
        Objects.equals(this.isInstrumental, audio.isInstrumental) &&
        Objects.equals(this.isrc, audio.isrc) &&
        Objects.equals(this.keywords, audio.keywords) &&
        Objects.equals(this.language, audio.language) &&
        Objects.equals(this.lyrics, audio.lyrics) &&
        Objects.equals(this.mediaType, audio.mediaType) &&
        Objects.equals(this.modelReleases, audio.modelReleases) &&
        Objects.equals(this.moods, audio.moods) &&
        Objects.equals(this.publishedTime, audio.publishedTime) &&
        Objects.equals(this.recordingVersion, audio.recordingVersion) &&
        Objects.equals(this.releases, audio.releases) &&
        Objects.equals(this.similarArtists, audio.similarArtists) &&
        Objects.equals(this.submittedTime, audio.submittedTime) &&
        Objects.equals(this.updatedTime, audio.updatedTime) &&
        Objects.equals(this.url, audio.url) &&
        Objects.equals(this.vocalDescription, audio.vocalDescription)&&
        Objects.equals(this.additionalProperties, audio.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, addedDate, affiliateUrl, album, artists, assets, bpm, contributor, deletedTime, duration, genres, id, instruments, isAdult, isInstrumental, isrc, keywords, language, lyrics, mediaType, modelReleases, moods, publishedTime, recordingVersion, releases, similarArtists, submittedTime, updatedTime, url, vocalDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Audio {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addedDate: ").append(toIndentedString(addedDate)).append("\n");
    sb.append("    affiliateUrl: ").append(toIndentedString(affiliateUrl)).append("\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    bpm: ").append(toIndentedString(bpm)).append("\n");
    sb.append("    contributor: ").append(toIndentedString(contributor)).append("\n");
    sb.append("    deletedTime: ").append(toIndentedString(deletedTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instruments: ").append(toIndentedString(instruments)).append("\n");
    sb.append("    isAdult: ").append(toIndentedString(isAdult)).append("\n");
    sb.append("    isInstrumental: ").append(toIndentedString(isInstrumental)).append("\n");
    sb.append("    isrc: ").append(toIndentedString(isrc)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lyrics: ").append(toIndentedString(lyrics)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    modelReleases: ").append(toIndentedString(modelReleases)).append("\n");
    sb.append("    moods: ").append(toIndentedString(moods)).append("\n");
    sb.append("    publishedTime: ").append(toIndentedString(publishedTime)).append("\n");
    sb.append("    recordingVersion: ").append(toIndentedString(recordingVersion)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    similarArtists: ").append(toIndentedString(similarArtists)).append("\n");
    sb.append("    submittedTime: ").append(toIndentedString(submittedTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vocalDescription: ").append(toIndentedString(vocalDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("added_date");
    openapiFields.add("affiliate_url");
    openapiFields.add("album");
    openapiFields.add("artists");
    openapiFields.add("assets");
    openapiFields.add("bpm");
    openapiFields.add("contributor");
    openapiFields.add("deleted_time");
    openapiFields.add("duration");
    openapiFields.add("genres");
    openapiFields.add("id");
    openapiFields.add("instruments");
    openapiFields.add("is_adult");
    openapiFields.add("is_instrumental");
    openapiFields.add("isrc");
    openapiFields.add("keywords");
    openapiFields.add("language");
    openapiFields.add("lyrics");
    openapiFields.add("media_type");
    openapiFields.add("model_releases");
    openapiFields.add("moods");
    openapiFields.add("published_time");
    openapiFields.add("recording_version");
    openapiFields.add("releases");
    openapiFields.add("similar_artists");
    openapiFields.add("submitted_time");
    openapiFields.add("updated_time");
    openapiFields.add("url");
    openapiFields.add("vocal_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contributor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("media_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Audio
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Audio.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Audio is not found in the empty JSON string", Audio.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Audio.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("affiliate_url") != null && !jsonObj.get("affiliate_url").isJsonNull()) && !jsonObj.get("affiliate_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliate_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliate_url").toString()));
      }
      // validate the optional field `album`
      if (jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) {
        Album.validateJsonObject(jsonObj.getAsJsonObject("album"));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            Artist.validateJsonObject(jsonArrayartists.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        AudioAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
      // validate the required field `contributor`
      Contributor.validateJsonObject(jsonObj.getAsJsonObject("contributor"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("genres") != null && !jsonObj.get("genres").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genres` to be an array in the JSON string but got `%s`", jsonObj.get("genres").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instruments") != null && !jsonObj.get("instruments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instruments` to be an array in the JSON string but got `%s`", jsonObj.get("instruments").toString()));
      }
      if ((jsonObj.get("isrc") != null && !jsonObj.get("isrc").isJsonNull()) && !jsonObj.get("isrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isrc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("lyrics") != null && !jsonObj.get("lyrics").isJsonNull()) && !jsonObj.get("lyrics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lyrics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lyrics").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      if (jsonObj.get("model_releases") != null && !jsonObj.get("model_releases").isJsonNull()) {
        JsonArray jsonArraymodelReleases = jsonObj.getAsJsonArray("model_releases");
        if (jsonArraymodelReleases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model_releases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model_releases` to be an array in the JSON string but got `%s`", jsonObj.get("model_releases").toString()));
          }

          // validate the optional field `model_releases` (array)
          for (int i = 0; i < jsonArraymodelReleases.size(); i++) {
            ModelRelease.validateJsonObject(jsonArraymodelReleases.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("moods") != null && !jsonObj.get("moods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `moods` to be an array in the JSON string but got `%s`", jsonObj.get("moods").toString()));
      }
      if ((jsonObj.get("recording_version") != null && !jsonObj.get("recording_version").isJsonNull()) && !jsonObj.get("recording_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releases") != null && !jsonObj.get("releases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases` to be an array in the JSON string but got `%s`", jsonObj.get("releases").toString()));
      }
      if (jsonObj.get("similar_artists") != null && !jsonObj.get("similar_artists").isJsonNull()) {
        JsonArray jsonArraysimilarArtists = jsonObj.getAsJsonArray("similar_artists");
        if (jsonArraysimilarArtists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("similar_artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `similar_artists` to be an array in the JSON string but got `%s`", jsonObj.get("similar_artists").toString()));
          }

          // validate the optional field `similar_artists` (array)
          for (int i = 0; i < jsonArraysimilarArtists.size(); i++) {
            Artist.validateJsonObject(jsonArraysimilarArtists.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("vocal_description") != null && !jsonObj.get("vocal_description").isJsonNull()) && !jsonObj.get("vocal_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vocal_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vocal_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Audio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Audio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Audio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Audio.class));

       return (TypeAdapter<T>) new TypeAdapter<Audio>() {
           @Override
           public void write(JsonWriter out, Audio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Audio read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Audio instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Audio given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Audio
  * @throws IOException if the JSON string is invalid with respect to Audio
  */
  public static Audio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Audio.class);
  }

 /**
  * Convert an instance of Audio to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

