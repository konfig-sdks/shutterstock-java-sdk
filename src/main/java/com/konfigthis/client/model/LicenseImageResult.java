/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Price;
import com.konfigthis.client.model.Url;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The response to a licensing request for an image
 */
@ApiModel(description = "The response to a licensing request for an image")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LicenseImageResult {
  public static final String SERIALIZED_NAME_ALLOTMENT_CHARGE = "allotment_charge";
  @SerializedName(SERIALIZED_NAME_ALLOTMENT_CHARGE)
  private Integer allotmentCharge;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Url download;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_IMAGE_ID = "image_id";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public LicenseImageResult() {
  }

  public LicenseImageResult allotmentCharge(Integer allotmentCharge) {
    
    
    
    
    this.allotmentCharge = allotmentCharge;
    return this;
  }

   /**
   * Number of credits that this licensing event used
   * @return allotmentCharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Number of credits that this licensing event used")

  public Integer getAllotmentCharge() {
    return allotmentCharge;
  }


  public void setAllotmentCharge(Integer allotmentCharge) {
    
    
    
    this.allotmentCharge = allotmentCharge;
  }


  public LicenseImageResult download(Url download) {
    
    
    
    
    this.download = download;
    return this;
  }

   /**
   * Get download
   * @return download
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Url getDownload() {
    return download;
  }


  public void setDownload(Url download) {
    
    
    
    this.download = download;
  }


  public LicenseImageResult error(String error) {
    
    
    
    
    this.error = error;
    return this;
  }

   /**
   * Error message, appears only if there was an error
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Error message, appears only if there was an error")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    
    
    
    this.error = error;
  }


  public LicenseImageResult imageId(String imageId) {
    
    
    
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Image ID that was licensed
   * @return imageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "59656357", required = true, value = "Image ID that was licensed")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    
    
    
    this.imageId = imageId;
  }


  public LicenseImageResult licenseId(String licenseId) {
    
    
    
    
    this.licenseId = licenseId;
    return this;
  }

   /**
   * ID of the license event
   * @return licenseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the license event")

  public String getLicenseId() {
    return licenseId;
  }


  public void setLicenseId(String licenseId) {
    
    
    
    this.licenseId = licenseId;
  }


  public LicenseImageResult price(Price price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Price getPrice() {
    return price;
  }


  public void setPrice(Price price) {
    
    
    
    this.price = price;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LicenseImageResult instance itself
   */
  public LicenseImageResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseImageResult licenseImageResult = (LicenseImageResult) o;
    return Objects.equals(this.allotmentCharge, licenseImageResult.allotmentCharge) &&
        Objects.equals(this.download, licenseImageResult.download) &&
        Objects.equals(this.error, licenseImageResult.error) &&
        Objects.equals(this.imageId, licenseImageResult.imageId) &&
        Objects.equals(this.licenseId, licenseImageResult.licenseId) &&
        Objects.equals(this.price, licenseImageResult.price)&&
        Objects.equals(this.additionalProperties, licenseImageResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allotmentCharge, download, error, imageId, licenseId, price, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseImageResult {\n");
    sb.append("    allotmentCharge: ").append(toIndentedString(allotmentCharge)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allotment_charge");
    openapiFields.add("download");
    openapiFields.add("error");
    openapiFields.add("image_id");
    openapiFields.add("license_id");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LicenseImageResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LicenseImageResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseImageResult is not found in the empty JSON string", LicenseImageResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseImageResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `download`
      if (jsonObj.get("download") != null && !jsonObj.get("download").isJsonNull()) {
        Url.validateJsonObject(jsonObj.getAsJsonObject("download"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if (!jsonObj.get("image_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_id").toString()));
      }
      if ((jsonObj.get("license_id") != null && !jsonObj.get("license_id").isJsonNull()) && !jsonObj.get("license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_id").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseImageResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseImageResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseImageResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseImageResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseImageResult>() {
           @Override
           public void write(JsonWriter out, LicenseImageResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseImageResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LicenseImageResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LicenseImageResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LicenseImageResult
  * @throws IOException if the JSON string is invalid with respect to LicenseImageResult
  */
  public static LicenseImageResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseImageResult.class);
  }

 /**
  * Convert an instance of LicenseImageResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

