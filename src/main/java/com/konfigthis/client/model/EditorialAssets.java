/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ImageSizeDetails;
import com.konfigthis.client.model.Thumbnail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Asset information, including size and thumbnail URLs
 */
@ApiModel(description = "Asset information, including size and thumbnail URLs")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EditorialAssets {
  public static final String SERIALIZED_NAME_MEDIUM_JPG = "medium_jpg";
  @SerializedName(SERIALIZED_NAME_MEDIUM_JPG)
  private ImageSizeDetails mediumJpg;

  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private ImageSizeDetails original;

  public static final String SERIALIZED_NAME_SMALL_JPG = "small_jpg";
  @SerializedName(SERIALIZED_NAME_SMALL_JPG)
  private ImageSizeDetails smallJpg;

  public static final String SERIALIZED_NAME_THUMB170 = "thumb_170";
  @SerializedName(SERIALIZED_NAME_THUMB170)
  private Thumbnail thumb170;

  public static final String SERIALIZED_NAME_THUMB220 = "thumb_220";
  @SerializedName(SERIALIZED_NAME_THUMB220)
  private Thumbnail thumb220;

  public static final String SERIALIZED_NAME_WATERMARK1500 = "watermark_1500";
  @SerializedName(SERIALIZED_NAME_WATERMARK1500)
  private Thumbnail watermark1500;

  public static final String SERIALIZED_NAME_WATERMARK450 = "watermark_450";
  @SerializedName(SERIALIZED_NAME_WATERMARK450)
  private Thumbnail watermark450;

  public EditorialAssets() {
  }

  public EditorialAssets mediumJpg(ImageSizeDetails mediumJpg) {
    
    
    
    
    this.mediumJpg = mediumJpg;
    return this;
  }

   /**
   * Get mediumJpg
   * @return mediumJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getMediumJpg() {
    return mediumJpg;
  }


  public void setMediumJpg(ImageSizeDetails mediumJpg) {
    
    
    
    this.mediumJpg = mediumJpg;
  }


  public EditorialAssets original(ImageSizeDetails original) {
    
    
    
    
    this.original = original;
    return this;
  }

   /**
   * Get original
   * @return original
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getOriginal() {
    return original;
  }


  public void setOriginal(ImageSizeDetails original) {
    
    
    
    this.original = original;
  }


  public EditorialAssets smallJpg(ImageSizeDetails smallJpg) {
    
    
    
    
    this.smallJpg = smallJpg;
    return this;
  }

   /**
   * Get smallJpg
   * @return smallJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getSmallJpg() {
    return smallJpg;
  }


  public void setSmallJpg(ImageSizeDetails smallJpg) {
    
    
    
    this.smallJpg = smallJpg;
  }


  public EditorialAssets thumb170(Thumbnail thumb170) {
    
    
    
    
    this.thumb170 = thumb170;
    return this;
  }

   /**
   * Get thumb170
   * @return thumb170
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getThumb170() {
    return thumb170;
  }


  public void setThumb170(Thumbnail thumb170) {
    
    
    
    this.thumb170 = thumb170;
  }


  public EditorialAssets thumb220(Thumbnail thumb220) {
    
    
    
    
    this.thumb220 = thumb220;
    return this;
  }

   /**
   * Get thumb220
   * @return thumb220
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getThumb220() {
    return thumb220;
  }


  public void setThumb220(Thumbnail thumb220) {
    
    
    
    this.thumb220 = thumb220;
  }


  public EditorialAssets watermark1500(Thumbnail watermark1500) {
    
    
    
    
    this.watermark1500 = watermark1500;
    return this;
  }

   /**
   * Get watermark1500
   * @return watermark1500
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getWatermark1500() {
    return watermark1500;
  }


  public void setWatermark1500(Thumbnail watermark1500) {
    
    
    
    this.watermark1500 = watermark1500;
  }


  public EditorialAssets watermark450(Thumbnail watermark450) {
    
    
    
    
    this.watermark450 = watermark450;
    return this;
  }

   /**
   * Get watermark450
   * @return watermark450
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getWatermark450() {
    return watermark450;
  }


  public void setWatermark450(Thumbnail watermark450) {
    
    
    
    this.watermark450 = watermark450;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EditorialAssets instance itself
   */
  public EditorialAssets putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditorialAssets editorialAssets = (EditorialAssets) o;
    return Objects.equals(this.mediumJpg, editorialAssets.mediumJpg) &&
        Objects.equals(this.original, editorialAssets.original) &&
        Objects.equals(this.smallJpg, editorialAssets.smallJpg) &&
        Objects.equals(this.thumb170, editorialAssets.thumb170) &&
        Objects.equals(this.thumb220, editorialAssets.thumb220) &&
        Objects.equals(this.watermark1500, editorialAssets.watermark1500) &&
        Objects.equals(this.watermark450, editorialAssets.watermark450)&&
        Objects.equals(this.additionalProperties, editorialAssets.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediumJpg, original, smallJpg, thumb170, thumb220, watermark1500, watermark450, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditorialAssets {\n");
    sb.append("    mediumJpg: ").append(toIndentedString(mediumJpg)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    smallJpg: ").append(toIndentedString(smallJpg)).append("\n");
    sb.append("    thumb170: ").append(toIndentedString(thumb170)).append("\n");
    sb.append("    thumb220: ").append(toIndentedString(thumb220)).append("\n");
    sb.append("    watermark1500: ").append(toIndentedString(watermark1500)).append("\n");
    sb.append("    watermark450: ").append(toIndentedString(watermark450)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("medium_jpg");
    openapiFields.add("original");
    openapiFields.add("small_jpg");
    openapiFields.add("thumb_170");
    openapiFields.add("thumb_220");
    openapiFields.add("watermark_1500");
    openapiFields.add("watermark_450");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditorialAssets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EditorialAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditorialAssets is not found in the empty JSON string", EditorialAssets.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `medium_jpg`
      if (jsonObj.get("medium_jpg") != null && !jsonObj.get("medium_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("medium_jpg"));
      }
      // validate the optional field `original`
      if (jsonObj.get("original") != null && !jsonObj.get("original").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("original"));
      }
      // validate the optional field `small_jpg`
      if (jsonObj.get("small_jpg") != null && !jsonObj.get("small_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("small_jpg"));
      }
      // validate the optional field `thumb_170`
      if (jsonObj.get("thumb_170") != null && !jsonObj.get("thumb_170").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("thumb_170"));
      }
      // validate the optional field `thumb_220`
      if (jsonObj.get("thumb_220") != null && !jsonObj.get("thumb_220").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("thumb_220"));
      }
      // validate the optional field `watermark_1500`
      if (jsonObj.get("watermark_1500") != null && !jsonObj.get("watermark_1500").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("watermark_1500"));
      }
      // validate the optional field `watermark_450`
      if (jsonObj.get("watermark_450") != null && !jsonObj.get("watermark_450").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("watermark_450"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditorialAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditorialAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditorialAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditorialAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<EditorialAssets>() {
           @Override
           public void write(JsonWriter out, EditorialAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EditorialAssets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EditorialAssets instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditorialAssets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditorialAssets
  * @throws IOException if the JSON string is invalid with respect to EditorialAssets
  */
  public static EditorialAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditorialAssets.class);
  }

 /**
  * Convert an instance of EditorialAssets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

