/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EditorialAssets;
import com.konfigthis.client.model.EditorialCategory;
import com.konfigthis.client.model.EditorialUpdatedContentCommercialStatus;
import com.konfigthis.client.model.EditorialUpdatedContentRights;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Metadata about updated editorial content
 */
@ApiModel(description = "Metadata about updated editorial content")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EditorialUpdatedContent {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ASPECT = "aspect";
  @SerializedName(SERIALIZED_NAME_ASPECT)
  private Double aspect;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private EditorialAssets assets;

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private String byline;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<EditorialCategory> categories = null;

  public static final String SERIALIZED_NAME_COMMERCIAL_STATUS = "commercial_status";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_STATUS)
  private EditorialUpdatedContentCommercialStatus commercialStatus;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DATE_TAKEN = "date_taken";
  @SerializedName(SERIALIZED_NAME_DATE_TAKEN)
  private LocalDate dateTaken;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = null;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private EditorialUpdatedContentRights rights;

  public static final String SERIALIZED_NAME_SPECIAL_INSTRUCTIONS = "special_instructions";
  @SerializedName(SERIALIZED_NAME_SPECIAL_INSTRUCTIONS)
  private String specialInstructions;

  public static final String SERIALIZED_NAME_SUPPLIER_CODE = "supplier_code";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_CODE)
  private String supplierCode;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_UPDATES = "updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private List<String> updates = null;

  public EditorialUpdatedContent() {
  }

  public EditorialUpdatedContent title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018", value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public EditorialUpdatedContent description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public EditorialUpdatedContent aspect(Double aspect) {
    
    
    
    
    this.aspect = aspect;
    return this;
  }

  public EditorialUpdatedContent aspect(Integer aspect) {
    
    
    
    
    this.aspect = aspect.doubleValue();
    return this;
  }

   /**
   * Get aspect
   * @return aspect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.481", value = "")

  public Double getAspect() {
    return aspect;
  }


  public void setAspect(Double aspect) {
    
    
    
    this.aspect = aspect;
  }


  public EditorialUpdatedContent assets(EditorialAssets assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EditorialAssets getAssets() {
    return assets;
  }


  public void setAssets(EditorialAssets assets) {
    
    
    
    this.assets = assets;
  }


  public EditorialUpdatedContent byline(String byline) {
    
    
    
    
    this.byline = byline;
    return this;
  }

   /**
   * Get byline
   * @return byline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ALEX HOFFORD/EPA-EFE/Shutterstock", value = "")

  public String getByline() {
    return byline;
  }


  public void setByline(String byline) {
    
    
    
    this.byline = byline;
  }


  public EditorialUpdatedContent caption(String caption) {
    
    
    
    
    this.caption = caption;
    return this;
  }

   /**
   * Get caption
   * @return caption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getCaption() {
    return caption;
  }


  public void setCaption(String caption) {
    
    
    
    this.caption = caption;
  }


  public EditorialUpdatedContent categories(List<EditorialCategory> categories) {
    
    
    
    
    this.categories = categories;
    return this;
  }

  public EditorialUpdatedContent addCategoriesItem(EditorialCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * List of categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of categories")

  public List<EditorialCategory> getCategories() {
    return categories;
  }


  public void setCategories(List<EditorialCategory> categories) {
    
    
    
    this.categories = categories;
  }


  public EditorialUpdatedContent commercialStatus(EditorialUpdatedContentCommercialStatus commercialStatus) {
    
    
    
    
    this.commercialStatus = commercialStatus;
    return this;
  }

   /**
   * Get commercialStatus
   * @return commercialStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EditorialUpdatedContentCommercialStatus getCommercialStatus() {
    return commercialStatus;
  }


  public void setCommercialStatus(EditorialUpdatedContentCommercialStatus commercialStatus) {
    
    
    
    this.commercialStatus = commercialStatus;
  }


  public EditorialUpdatedContent createdTime(OffsetDateTime createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(OffsetDateTime createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public EditorialUpdatedContent dateTaken(LocalDate dateTaken) {
    
    
    
    
    this.dateTaken = dateTaken;
    return this;
  }

   /**
   * Get dateTaken
   * @return dateTaken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDateTaken() {
    return dateTaken;
  }


  public void setDateTaken(LocalDate dateTaken) {
    
    
    
    this.dateTaken = dateTaken;
  }


  public EditorialUpdatedContent id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9804979n", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EditorialUpdatedContent keywords(List<String> keywords) {
    
    
    
    
    this.keywords = keywords;
    return this;
  }

  public EditorialUpdatedContent addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Get keywords
   * @return keywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getKeywords() {
    return keywords;
  }


  public void setKeywords(List<String> keywords) {
    
    
    
    this.keywords = keywords;
  }


  public EditorialUpdatedContent rights(EditorialUpdatedContentRights rights) {
    
    
    
    
    this.rights = rights;
    return this;
  }

   /**
   * Get rights
   * @return rights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EditorialUpdatedContentRights getRights() {
    return rights;
  }


  public void setRights(EditorialUpdatedContentRights rights) {
    
    
    
    this.rights = rights;
  }


  public EditorialUpdatedContent specialInstructions(String specialInstructions) {
    
    
    
    
    this.specialInstructions = specialInstructions;
    return this;
  }

   /**
   * Get specialInstructions
   * @return specialInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpecialInstructions() {
    return specialInstructions;
  }


  public void setSpecialInstructions(String specialInstructions) {
    
    
    
    this.specialInstructions = specialInstructions;
  }


  public EditorialUpdatedContent supplierCode(String supplierCode) {
    
    
    
    
    this.supplierCode = supplierCode;
    return this;
  }

   /**
   * Get supplierCode
   * @return supplierCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EPA", value = "")

  public String getSupplierCode() {
    return supplierCode;
  }


  public void setSupplierCode(String supplierCode) {
    
    
    
    this.supplierCode = supplierCode;
  }


  public EditorialUpdatedContent updatedTime(OffsetDateTime updatedTime) {
    
    
    
    
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Get updatedTime
   * @return updatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-07-16T00:04:44Z", value = "")

  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }


  public void setUpdatedTime(OffsetDateTime updatedTime) {
    
    
    
    this.updatedTime = updatedTime;
  }


  public EditorialUpdatedContent updates(List<String> updates) {
    
    
    
    
    this.updates = updates;
    return this;
  }

  public EditorialUpdatedContent addUpdatesItem(String updatesItem) {
    if (this.updates == null) {
      this.updates = new ArrayList<>();
    }
    this.updates.add(updatesItem);
    return this;
  }

   /**
   * Get updates
   * @return updates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getUpdates() {
    return updates;
  }


  public void setUpdates(List<String> updates) {
    
    
    
    this.updates = updates;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EditorialUpdatedContent instance itself
   */
  public EditorialUpdatedContent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditorialUpdatedContent editorialUpdatedContent = (EditorialUpdatedContent) o;
    return Objects.equals(this.title, editorialUpdatedContent.title) &&
        Objects.equals(this.description, editorialUpdatedContent.description) &&
        Objects.equals(this.aspect, editorialUpdatedContent.aspect) &&
        Objects.equals(this.assets, editorialUpdatedContent.assets) &&
        Objects.equals(this.byline, editorialUpdatedContent.byline) &&
        Objects.equals(this.caption, editorialUpdatedContent.caption) &&
        Objects.equals(this.categories, editorialUpdatedContent.categories) &&
        Objects.equals(this.commercialStatus, editorialUpdatedContent.commercialStatus) &&
        Objects.equals(this.createdTime, editorialUpdatedContent.createdTime) &&
        Objects.equals(this.dateTaken, editorialUpdatedContent.dateTaken) &&
        Objects.equals(this.id, editorialUpdatedContent.id) &&
        Objects.equals(this.keywords, editorialUpdatedContent.keywords) &&
        Objects.equals(this.rights, editorialUpdatedContent.rights) &&
        Objects.equals(this.specialInstructions, editorialUpdatedContent.specialInstructions) &&
        Objects.equals(this.supplierCode, editorialUpdatedContent.supplierCode) &&
        Objects.equals(this.updatedTime, editorialUpdatedContent.updatedTime) &&
        Objects.equals(this.updates, editorialUpdatedContent.updates)&&
        Objects.equals(this.additionalProperties, editorialUpdatedContent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, aspect, assets, byline, caption, categories, commercialStatus, createdTime, dateTaken, id, keywords, rights, specialInstructions, supplierCode, updatedTime, updates, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditorialUpdatedContent {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    aspect: ").append(toIndentedString(aspect)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    commercialStatus: ").append(toIndentedString(commercialStatus)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    dateTaken: ").append(toIndentedString(dateTaken)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    specialInstructions: ").append(toIndentedString(specialInstructions)).append("\n");
    sb.append("    supplierCode: ").append(toIndentedString(supplierCode)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("aspect");
    openapiFields.add("assets");
    openapiFields.add("byline");
    openapiFields.add("caption");
    openapiFields.add("categories");
    openapiFields.add("commercial_status");
    openapiFields.add("created_time");
    openapiFields.add("date_taken");
    openapiFields.add("id");
    openapiFields.add("keywords");
    openapiFields.add("rights");
    openapiFields.add("special_instructions");
    openapiFields.add("supplier_code");
    openapiFields.add("updated_time");
    openapiFields.add("updates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditorialUpdatedContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EditorialUpdatedContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditorialUpdatedContent is not found in the empty JSON string", EditorialUpdatedContent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EditorialUpdatedContent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        EditorialAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
      if ((jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) && !jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            EditorialCategory.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `commercial_status`
      if (jsonObj.get("commercial_status") != null && !jsonObj.get("commercial_status").isJsonNull()) {
        EditorialUpdatedContentCommercialStatus.validateJsonObject(jsonObj.getAsJsonObject("commercial_status"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      // validate the optional field `rights`
      if (jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) {
        EditorialUpdatedContentRights.validateJsonObject(jsonObj.getAsJsonObject("rights"));
      }
      if ((jsonObj.get("special_instructions") != null && !jsonObj.get("special_instructions").isJsonNull()) && !jsonObj.get("special_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_instructions").toString()));
      }
      if ((jsonObj.get("supplier_code") != null && !jsonObj.get("supplier_code").isJsonNull()) && !jsonObj.get("supplier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplier_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("updates") != null && !jsonObj.get("updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updates` to be an array in the JSON string but got `%s`", jsonObj.get("updates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditorialUpdatedContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditorialUpdatedContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditorialUpdatedContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditorialUpdatedContent.class));

       return (TypeAdapter<T>) new TypeAdapter<EditorialUpdatedContent>() {
           @Override
           public void write(JsonWriter out, EditorialUpdatedContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EditorialUpdatedContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EditorialUpdatedContent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditorialUpdatedContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditorialUpdatedContent
  * @throws IOException if the JSON string is invalid with respect to EditorialUpdatedContent
  */
  public static EditorialUpdatedContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditorialUpdatedContent.class);
  }

 /**
  * Convert an instance of EditorialUpdatedContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

