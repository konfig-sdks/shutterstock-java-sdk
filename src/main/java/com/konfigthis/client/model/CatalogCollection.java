/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CatalogCollectionItem;
import com.konfigthis.client.model.CatalogCollectionRoleAssignments;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Catalog collection
 */
@ApiModel(description = "Catalog collection")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CatalogCollection {
  public static final String SERIALIZED_NAME_COVER_ASSET = "cover_asset";
  @SerializedName(SERIALIZED_NAME_COVER_ASSET)
  private CatalogCollectionItem coverAsset;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ASSIGNMENTS = "role_assignments";
  @SerializedName(SERIALIZED_NAME_ROLE_ASSIGNMENTS)
  private CatalogCollectionRoleAssignments roleAssignments;

  public static final String SERIALIZED_NAME_TOTAL_ITEM_COUNT = "total_item_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEM_COUNT)
  private Double totalItemCount;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  /**
   * Gets or Sets visibility
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
 public enum VisibilityEnum {
    PRIVATE("private"),
    
    PUBLIC("public");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public CatalogCollection() {
  }

  public CatalogCollection coverAsset(CatalogCollectionItem coverAsset) {
    
    
    
    
    this.coverAsset = coverAsset;
    return this;
  }

   /**
   * Get coverAsset
   * @return coverAsset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogCollectionItem getCoverAsset() {
    return coverAsset;
  }


  public void setCoverAsset(CatalogCollectionItem coverAsset) {
    
    
    
    this.coverAsset = coverAsset;
  }


  public CatalogCollection createdTime(OffsetDateTime createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-05-20T20:15:22Z", required = true, value = "")

  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(OffsetDateTime createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public CatalogCollection id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "126351028", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CatalogCollection name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My collection", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CatalogCollection roleAssignments(CatalogCollectionRoleAssignments roleAssignments) {
    
    
    
    
    this.roleAssignments = roleAssignments;
    return this;
  }

   /**
   * Get roleAssignments
   * @return roleAssignments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CatalogCollectionRoleAssignments getRoleAssignments() {
    return roleAssignments;
  }


  public void setRoleAssignments(CatalogCollectionRoleAssignments roleAssignments) {
    
    
    
    this.roleAssignments = roleAssignments;
  }


  public CatalogCollection totalItemCount(Double totalItemCount) {
    
    
    
    
    this.totalItemCount = totalItemCount;
    return this;
  }

  public CatalogCollection totalItemCount(Integer totalItemCount) {
    
    
    
    
    this.totalItemCount = totalItemCount.doubleValue();
    return this;
  }

   /**
   * Get totalItemCount
   * @return totalItemCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "")

  public Double getTotalItemCount() {
    return totalItemCount;
  }


  public void setTotalItemCount(Double totalItemCount) {
    
    
    
    this.totalItemCount = totalItemCount;
  }


  public CatalogCollection updatedTime(OffsetDateTime updatedTime) {
    
    
    
    
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Get updatedTime
   * @return updatedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-06-10T17:26:09Z", required = true, value = "")

  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }


  public void setUpdatedTime(OffsetDateTime updatedTime) {
    
    
    
    this.updatedTime = updatedTime;
  }


  public CatalogCollection visibility(VisibilityEnum visibility) {
    
    
    
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PUBLIC", required = true, value = "")

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  public void setVisibility(VisibilityEnum visibility) {
    
    
    
    this.visibility = visibility;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CatalogCollection instance itself
   */
  public CatalogCollection putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogCollection catalogCollection = (CatalogCollection) o;
    return Objects.equals(this.coverAsset, catalogCollection.coverAsset) &&
        Objects.equals(this.createdTime, catalogCollection.createdTime) &&
        Objects.equals(this.id, catalogCollection.id) &&
        Objects.equals(this.name, catalogCollection.name) &&
        Objects.equals(this.roleAssignments, catalogCollection.roleAssignments) &&
        Objects.equals(this.totalItemCount, catalogCollection.totalItemCount) &&
        Objects.equals(this.updatedTime, catalogCollection.updatedTime) &&
        Objects.equals(this.visibility, catalogCollection.visibility)&&
        Objects.equals(this.additionalProperties, catalogCollection.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverAsset, createdTime, id, name, roleAssignments, totalItemCount, updatedTime, visibility, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogCollection {\n");
    sb.append("    coverAsset: ").append(toIndentedString(coverAsset)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleAssignments: ").append(toIndentedString(roleAssignments)).append("\n");
    sb.append("    totalItemCount: ").append(toIndentedString(totalItemCount)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cover_asset");
    openapiFields.add("created_time");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("role_assignments");
    openapiFields.add("total_item_count");
    openapiFields.add("updated_time");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("role_assignments");
    openapiRequiredFields.add("total_item_count");
    openapiRequiredFields.add("updated_time");
    openapiRequiredFields.add("visibility");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogCollection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogCollection is not found in the empty JSON string", CatalogCollection.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogCollection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `cover_asset`
      if (jsonObj.get("cover_asset") != null && !jsonObj.get("cover_asset").isJsonNull()) {
        CatalogCollectionItem.validateJsonObject(jsonObj.getAsJsonObject("cover_asset"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `role_assignments`
      CatalogCollectionRoleAssignments.validateJsonObject(jsonObj.getAsJsonObject("role_assignments"));
      if (!jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogCollection>() {
           @Override
           public void write(JsonWriter out, CatalogCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogCollection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CatalogCollection instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogCollection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogCollection
  * @throws IOException if the JSON string is invalid with respect to CatalogCollection
  */
  public static CatalogCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogCollection.class);
  }

 /**
  * Convert an instance of CatalogCollection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

