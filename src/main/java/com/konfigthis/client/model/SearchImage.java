/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Language;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data required to search for an image
 */
@ApiModel(description = "Data required to search for an image")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SearchImage {
  public static final String SERIALIZED_NAME_ADDED_DATE = "added_date";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE)
  private LocalDate addedDate;

  public static final String SERIALIZED_NAME_ADDED_DATE_END = "added_date_end";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE_END)
  private LocalDate addedDateEnd;

  public static final String SERIALIZED_NAME_ADDED_DATE_START = "added_date_start";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE_START)
  private LocalDate addedDateStart;

  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspect_ratio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private Double aspectRatio;

  public static final String SERIALIZED_NAME_ASPECT_RATIO_MAX = "aspect_ratio_max";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_MAX)
  private Double aspectRatioMax;

  public static final String SERIALIZED_NAME_ASPECT_RATIO_MIN = "aspect_ratio_min";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO_MIN)
  private Double aspectRatioMin;

  public static final String SERIALIZED_NAME_AUTHENTIC = "authentic";
  @SerializedName(SERIALIZED_NAME_AUTHENTIC)
  private Boolean authentic;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CONTRIBUTOR = "contributor";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR)
  private List<String> contributor = null;

  public static final String SERIALIZED_NAME_CONTRIBUTOR_COUNTRY = "contributor_country";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_COUNTRY)
  private Object contributorCountry = null;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private String fields;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HEIGHT_FROM = "height_from";
  @SerializedName(SERIALIZED_NAME_HEIGHT_FROM)
  private Integer heightFrom;

  public static final String SERIALIZED_NAME_HEIGHT_TO = "height_to";
  @SerializedName(SERIALIZED_NAME_HEIGHT_TO)
  private Integer heightTo;

  /**
   * Gets or Sets imageType
   */
  @JsonAdapter(ImageTypeEnum.Adapter.class)
 public enum ImageTypeEnum {
    PHOTO("photo"),
    
    ILLUSTRATION("illustration"),
    
    VECTOR("vector");

    private String value;

    ImageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageTypeEnum fromValue(String value) {
      for (ImageTypeEnum b : ImageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "image_type";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private List<ImageTypeEnum> imageType = null;

  public static final String SERIALIZED_NAME_KEYWORD_SAFE_SEARCH = "keyword_safe_search";
  @SerializedName(SERIALIZED_NAME_KEYWORD_SAFE_SEARCH)
  private Boolean keywordSafeSearch = true;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private Language language;

  /**
   * Gets or Sets license
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
 public enum LicenseEnum {
    COMMERCIAL("commercial"),
    
    EDITORIAL("editorial"),
    
    ENHANCED("enhanced");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private List<LicenseEnum> license = null;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<String> model = null;

  /**
   * Show image results with horizontal or vertical orientation
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
 public enum OrientationEnum {
    HORIZONTAL("horizontal"),
    
    VERTICAL("vertical");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page = 1;

  /**
   * Show images that feature people of the specified age category
   */
  @JsonAdapter(PeopleAgeEnum.Adapter.class)
 public enum PeopleAgeEnum {
    INFANTS("infants"),
    
    CHILDREN("children"),
    
    TEENAGERS("teenagers"),
    
    _20S("20s"),
    
    _30S("30s"),
    
    _40S("40s"),
    
    _50S("50s"),
    
    _60S("60s"),
    
    OLDER("older");

    private String value;

    PeopleAgeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeopleAgeEnum fromValue(String value) {
      for (PeopleAgeEnum b : PeopleAgeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeopleAgeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeopleAgeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeopleAgeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeopleAgeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PEOPLE_AGE = "people_age";
  @SerializedName(SERIALIZED_NAME_PEOPLE_AGE)
  private PeopleAgeEnum peopleAge;

  /**
   * Gets or Sets peopleEthnicity
   */
  @JsonAdapter(PeopleEthnicityEnum.Adapter.class)
 public enum PeopleEthnicityEnum {
    AFRICAN("african"),
    
    AFRICAN_AMERICAN("african_american"),
    
    BLACK("black"),
    
    BRAZILIAN("brazilian"),
    
    CHINESE("chinese"),
    
    CAUCASIAN("caucasian"),
    
    EAST_ASIAN("east_asian"),
    
    HISPANIC("hispanic"),
    
    JAPANESE("japanese"),
    
    MIDDLE_EASTERN("middle_eastern"),
    
    NATIVE_AMERICAN("native_american"),
    
    PACIFIC_ISLANDER("pacific_islander"),
    
    SOUTH_ASIAN("south_asian"),
    
    SOUTHEAST_ASIAN("southeast_asian"),
    
    OTHER("other"),
    
    NOT_AFRICAN("NOT african"),
    
    NOT_AFRICAN_AMERICAN("NOT african_american"),
    
    NOT_BLACK("NOT black"),
    
    NOT_BRAZILIAN("NOT brazilian"),
    
    NOT_CHINESE("NOT chinese"),
    
    NOT_CAUCASIAN("NOT caucasian"),
    
    NOT_EAST_ASIAN("NOT east_asian"),
    
    NOT_HISPANIC("NOT hispanic"),
    
    NOT_JAPANESE("NOT japanese"),
    
    NOT_MIDDLE_EASTERN("NOT middle_eastern"),
    
    NOT_NATIVE_AMERICAN("NOT native_american"),
    
    NOT_PACIFIC_ISLANDER("NOT pacific_islander"),
    
    NOT_SOUTH_ASIAN("NOT south_asian"),
    
    NOT_SOUTHEAST_ASIAN("NOT southeast_asian"),
    
    NOT_OTHER("NOT other");

    private String value;

    PeopleEthnicityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeopleEthnicityEnum fromValue(String value) {
      for (PeopleEthnicityEnum b : PeopleEthnicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeopleEthnicityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeopleEthnicityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeopleEthnicityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeopleEthnicityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PEOPLE_ETHNICITY = "people_ethnicity";
  @SerializedName(SERIALIZED_NAME_PEOPLE_ETHNICITY)
  private List<PeopleEthnicityEnum> peopleEthnicity = null;

  /**
   * Show images with people of the specified gender
   */
  @JsonAdapter(PeopleGenderEnum.Adapter.class)
 public enum PeopleGenderEnum {
    MALE("male"),
    
    FEMALE("female"),
    
    BOTH("both");

    private String value;

    PeopleGenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeopleGenderEnum fromValue(String value) {
      for (PeopleGenderEnum b : PeopleGenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeopleGenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeopleGenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeopleGenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeopleGenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PEOPLE_GENDER = "people_gender";
  @SerializedName(SERIALIZED_NAME_PEOPLE_GENDER)
  private PeopleGenderEnum peopleGender;

  public static final String SERIALIZED_NAME_PEOPLE_MODEL_RELEASED = "people_model_released";
  @SerializedName(SERIALIZED_NAME_PEOPLE_MODEL_RELEASED)
  private Boolean peopleModelReleased;

  public static final String SERIALIZED_NAME_PEOPLE_NUMBER = "people_number";
  @SerializedName(SERIALIZED_NAME_PEOPLE_NUMBER)
  private Integer peopleNumber;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Integer perPage = 20;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SAFE = "safe";
  @SerializedName(SERIALIZED_NAME_SAFE)
  private Boolean safe = true;

  /**
   * Sort by
   */
  @JsonAdapter(SortEnum.Adapter.class)
 public enum SortEnum {
    NEWEST("newest"),
    
    POPULAR("popular"),
    
    RELEVANCE("relevance"),
    
    RANDOM("random");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort = SortEnum.POPULAR;

  public static final String SERIALIZED_NAME_SPELLCHECK_QUERY = "spellcheck_query";
  @SerializedName(SERIALIZED_NAME_SPELLCHECK_QUERY)
  private Boolean spellcheckQuery = true;

  /**
   * Amount of detail to render in the response
   */
  @JsonAdapter(ViewEnum.Adapter.class)
 public enum ViewEnum {
    MINIMAL("minimal"),
    
    FULL("full");

    private String value;

    ViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewEnum fromValue(String value) {
      for (ViewEnum b : ViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ViewEnum view = ViewEnum.MINIMAL;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_WIDTH_FROM = "width_from";
  @SerializedName(SERIALIZED_NAME_WIDTH_FROM)
  private Integer widthFrom;

  public static final String SERIALIZED_NAME_WIDTH_TO = "width_to";
  @SerializedName(SERIALIZED_NAME_WIDTH_TO)
  private Integer widthTo;

  public SearchImage() {
  }

  public SearchImage addedDate(LocalDate addedDate) {
    
    
    
    
    this.addedDate = addedDate;
    return this;
  }

   /**
   * Show images added on the specified date
   * @return addedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images added on the specified date")

  public LocalDate getAddedDate() {
    return addedDate;
  }


  public void setAddedDate(LocalDate addedDate) {
    
    
    
    this.addedDate = addedDate;
  }


  public SearchImage addedDateEnd(LocalDate addedDateEnd) {
    
    
    
    
    this.addedDateEnd = addedDateEnd;
    return this;
  }

   /**
   * Show images added before the specified date
   * @return addedDateEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images added before the specified date")

  public LocalDate getAddedDateEnd() {
    return addedDateEnd;
  }


  public void setAddedDateEnd(LocalDate addedDateEnd) {
    
    
    
    this.addedDateEnd = addedDateEnd;
  }


  public SearchImage addedDateStart(LocalDate addedDateStart) {
    
    
    
    
    this.addedDateStart = addedDateStart;
    return this;
  }

   /**
   * Show images added on or after the specified date
   * @return addedDateStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images added on or after the specified date")

  public LocalDate getAddedDateStart() {
    return addedDateStart;
  }


  public void setAddedDateStart(LocalDate addedDateStart) {
    
    
    
    this.addedDateStart = addedDateStart;
  }


  public SearchImage aspectRatio(Double aspectRatio) {
    
    
    
    
    this.aspectRatio = aspectRatio;
    return this;
  }

  public SearchImage aspectRatio(Integer aspectRatio) {
    
    
    
    
    this.aspectRatio = aspectRatio.doubleValue();
    return this;
  }

   /**
   * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   * @return aspectRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image")

  public Double getAspectRatio() {
    return aspectRatio;
  }


  public void setAspectRatio(Double aspectRatio) {
    
    
    
    this.aspectRatio = aspectRatio;
  }


  public SearchImage aspectRatioMax(Double aspectRatioMax) {
    if (aspectRatioMax != null && aspectRatioMax < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMax. Must be greater than or equal to 0.");
    }
    
    
    
    this.aspectRatioMax = aspectRatioMax;
    return this;
  }

  public SearchImage aspectRatioMax(Integer aspectRatioMax) {
    if (aspectRatioMax != null && aspectRatioMax < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMax. Must be greater than or equal to 0.");
    }
    
    
    
    this.aspectRatioMax = aspectRatioMax.doubleValue();
    return this;
  }

   /**
   * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   * minimum: 0
   * @return aspectRatioMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image")

  public Double getAspectRatioMax() {
    return aspectRatioMax;
  }


  public void setAspectRatioMax(Double aspectRatioMax) {
    if (aspectRatioMax != null && aspectRatioMax < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMax. Must be greater than or equal to 0.");
    }
    
    
    this.aspectRatioMax = aspectRatioMax;
  }


  public SearchImage aspectRatioMin(Double aspectRatioMin) {
    if (aspectRatioMin != null && aspectRatioMin < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMin. Must be greater than or equal to 0.");
    }
    
    
    
    this.aspectRatioMin = aspectRatioMin;
    return this;
  }

  public SearchImage aspectRatioMin(Integer aspectRatioMin) {
    if (aspectRatioMin != null && aspectRatioMin < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMin. Must be greater than or equal to 0.");
    }
    
    
    
    this.aspectRatioMin = aspectRatioMin.doubleValue();
    return this;
  }

   /**
   * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   * minimum: 0
   * @return aspectRatioMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image")

  public Double getAspectRatioMin() {
    return aspectRatioMin;
  }


  public void setAspectRatioMin(Double aspectRatioMin) {
    if (aspectRatioMin != null && aspectRatioMin < 0) {
      throw new IllegalArgumentException("Invalid value for aspectRatioMin. Must be greater than or equal to 0.");
    }
    
    
    this.aspectRatioMin = aspectRatioMin;
  }


  public SearchImage authentic(Boolean authentic) {
    
    
    
    
    this.authentic = authentic;
    return this;
  }

   /**
   * Show only authentic images
   * @return authentic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show only authentic images")

  public Boolean getAuthentic() {
    return authentic;
  }


  public void setAuthentic(Boolean authentic) {
    
    
    
    this.authentic = authentic;
  }


  public SearchImage category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Show images with the specified Shutterstock-defined category; specify a category name or ID
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified Shutterstock-defined category; specify a category name or ID")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public SearchImage color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public SearchImage contributor(List<String> contributor) {
    
    
    
    
    this.contributor = contributor;
    return this;
  }

  public SearchImage addContributorItem(String contributorItem) {
    if (this.contributor == null) {
      this.contributor = new ArrayList<>();
    }
    this.contributor.add(contributorItem);
    return this;
  }

   /**
   * Show images with the specified contributor names or IDs, allows multiple
   * @return contributor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified contributor names or IDs, allows multiple")

  public List<String> getContributor() {
    return contributor;
  }


  public void setContributor(List<String> contributor) {
    
    
    
    this.contributor = contributor;
  }


  public SearchImage contributorCountry(Object contributorCountry) {
    
    
    
    
    this.contributorCountry = contributorCountry;
    return this;
  }

   /**
   * Get contributorCountry
   * @return contributorCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getContributorCountry() {
    return contributorCountry;
  }


  public void setContributorCountry(Object contributorCountry) {
    
    
    
    this.contributorCountry = contributorCountry;
  }


  public SearchImage fields(String fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

   /**
   * Fields to display in the response; see the documentation for the fields parameter in the overview section
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fields to display in the response; see the documentation for the fields parameter in the overview section")

  public String getFields() {
    return fields;
  }


  public void setFields(String fields) {
    
    
    
    this.fields = fields;
  }


  public SearchImage height(Integer height) {
    
    
    
    
    this.height = height;
    return this;
  }

   /**
   * (Deprecated; use height_from and height_to instead) Show images with the specified height
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(Deprecated; use height_from and height_to instead) Show images with the specified height")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    
    
    
    this.height = height;
  }


  public SearchImage heightFrom(Integer heightFrom) {
    
    
    
    
    this.heightFrom = heightFrom;
    return this;
  }

   /**
   * Show images with the specified height or larger, in pixels
   * @return heightFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified height or larger, in pixels")

  public Integer getHeightFrom() {
    return heightFrom;
  }


  public void setHeightFrom(Integer heightFrom) {
    
    
    
    this.heightFrom = heightFrom;
  }


  public SearchImage heightTo(Integer heightTo) {
    
    
    
    
    this.heightTo = heightTo;
    return this;
  }

   /**
   * Show images with the specified height or smaller, in pixels
   * @return heightTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified height or smaller, in pixels")

  public Integer getHeightTo() {
    return heightTo;
  }


  public void setHeightTo(Integer heightTo) {
    
    
    
    this.heightTo = heightTo;
  }


  public SearchImage imageType(List<ImageTypeEnum> imageType) {
    
    
    
    
    this.imageType = imageType;
    return this;
  }

  public SearchImage addImageTypeItem(ImageTypeEnum imageTypeItem) {
    if (this.imageType == null) {
      this.imageType = new ArrayList<>();
    }
    this.imageType.add(imageTypeItem);
    return this;
  }

   /**
   * Show images of the specified type
   * @return imageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images of the specified type")

  public List<ImageTypeEnum> getImageType() {
    return imageType;
  }


  public void setImageType(List<ImageTypeEnum> imageType) {
    
    
    
    this.imageType = imageType;
  }


  public SearchImage keywordSafeSearch(Boolean keywordSafeSearch) {
    
    
    
    
    this.keywordSafeSearch = keywordSafeSearch;
    return this;
  }

   /**
   * Hide results with potentially unsafe keywords
   * @return keywordSafeSearch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Hide results with potentially unsafe keywords")

  public Boolean getKeywordSafeSearch() {
    return keywordSafeSearch;
  }


  public void setKeywordSafeSearch(Boolean keywordSafeSearch) {
    
    
    
    this.keywordSafeSearch = keywordSafeSearch;
  }


  public SearchImage language(Language language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Language getLanguage() {
    return language;
  }


  public void setLanguage(Language language) {
    
    
    
    this.language = language;
  }


  public SearchImage license(List<LicenseEnum> license) {
    
    
    
    
    this.license = license;
    return this;
  }

  public SearchImage addLicenseItem(LicenseEnum licenseItem) {
    if (this.license == null) {
      this.license = new ArrayList<>();
    }
    this.license.add(licenseItem);
    return this;
  }

   /**
   * Show only images with the specified license
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"commercial\"]", value = "Show only images with the specified license")

  public List<LicenseEnum> getLicense() {
    return license;
  }


  public void setLicense(List<LicenseEnum> license) {
    
    
    
    this.license = license;
  }


  public SearchImage model(List<String> model) {
    
    
    
    
    this.model = model;
    return this;
  }

  public SearchImage addModelItem(String modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

   /**
   * Show image results with the specified model IDs
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show image results with the specified model IDs")

  public List<String> getModel() {
    return model;
  }


  public void setModel(List<String> model) {
    
    
    
    this.model = model;
  }


  public SearchImage orientation(OrientationEnum orientation) {
    
    
    
    
    this.orientation = orientation;
    return this;
  }

   /**
   * Show image results with horizontal or vertical orientation
   * @return orientation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show image results with horizontal or vertical orientation")

  public OrientationEnum getOrientation() {
    return orientation;
  }


  public void setOrientation(OrientationEnum orientation) {
    
    
    
    this.orientation = orientation;
  }


  public SearchImage page(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    
    
    
    this.page = page;
    return this;
  }

   /**
   * Page number
   * minimum: 1
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Page number")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    
    
    this.page = page;
  }


  public SearchImage peopleAge(PeopleAgeEnum peopleAge) {
    
    
    
    
    this.peopleAge = peopleAge;
    return this;
  }

   /**
   * Show images that feature people of the specified age category
   * @return peopleAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images that feature people of the specified age category")

  public PeopleAgeEnum getPeopleAge() {
    return peopleAge;
  }


  public void setPeopleAge(PeopleAgeEnum peopleAge) {
    
    
    
    this.peopleAge = peopleAge;
  }


  public SearchImage peopleEthnicity(List<PeopleEthnicityEnum> peopleEthnicity) {
    
    
    
    
    this.peopleEthnicity = peopleEthnicity;
    return this;
  }

  public SearchImage addPeopleEthnicityItem(PeopleEthnicityEnum peopleEthnicityItem) {
    if (this.peopleEthnicity == null) {
      this.peopleEthnicity = new ArrayList<>();
    }
    this.peopleEthnicity.add(peopleEthnicityItem);
    return this;
  }

   /**
   * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
   * @return peopleEthnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities")

  public List<PeopleEthnicityEnum> getPeopleEthnicity() {
    return peopleEthnicity;
  }


  public void setPeopleEthnicity(List<PeopleEthnicityEnum> peopleEthnicity) {
    
    
    
    this.peopleEthnicity = peopleEthnicity;
  }


  public SearchImage peopleGender(PeopleGenderEnum peopleGender) {
    
    
    
    
    this.peopleGender = peopleGender;
    return this;
  }

   /**
   * Show images with people of the specified gender
   * @return peopleGender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with people of the specified gender")

  public PeopleGenderEnum getPeopleGender() {
    return peopleGender;
  }


  public void setPeopleGender(PeopleGenderEnum peopleGender) {
    
    
    
    this.peopleGender = peopleGender;
  }


  public SearchImage peopleModelReleased(Boolean peopleModelReleased) {
    
    
    
    
    this.peopleModelReleased = peopleModelReleased;
    return this;
  }

   /**
   * Show images of people with a signed model release
   * @return peopleModelReleased
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images of people with a signed model release")

  public Boolean getPeopleModelReleased() {
    return peopleModelReleased;
  }


  public void setPeopleModelReleased(Boolean peopleModelReleased) {
    
    
    
    this.peopleModelReleased = peopleModelReleased;
  }


  public SearchImage peopleNumber(Integer peopleNumber) {
    if (peopleNumber != null && peopleNumber < 0) {
      throw new IllegalArgumentException("Invalid value for peopleNumber. Must be greater than or equal to 0.");
    }
    if (peopleNumber != null && peopleNumber > 4) {
      throw new IllegalArgumentException("Invalid value for peopleNumber. Must be less than or equal to 4.");
    }
    
    
    this.peopleNumber = peopleNumber;
    return this;
  }

   /**
   * Show images with the specified number of people
   * minimum: 0
   * maximum: 4
   * @return peopleNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified number of people")

  public Integer getPeopleNumber() {
    return peopleNumber;
  }


  public void setPeopleNumber(Integer peopleNumber) {
    if (peopleNumber != null && peopleNumber < 0) {
      throw new IllegalArgumentException("Invalid value for peopleNumber. Must be greater than or equal to 0.");
    }
    if (peopleNumber != null && peopleNumber > 4) {
      throw new IllegalArgumentException("Invalid value for peopleNumber. Must be less than or equal to 4.");
    }
    
    this.peopleNumber = peopleNumber;
  }


  public SearchImage perPage(Integer perPage) {
    if (perPage != null && perPage < 0) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 0.");
    }
    if (perPage != null && perPage > 20) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be less than or equal to 20.");
    }
    
    
    this.perPage = perPage;
    return this;
  }

   /**
   * Number of results per page
   * minimum: 0
   * maximum: 20
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Number of results per page")

  public Integer getPerPage() {
    return perPage;
  }


  public void setPerPage(Integer perPage) {
    if (perPage != null && perPage < 0) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 0.");
    }
    if (perPage != null && perPage > 20) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be less than or equal to 20.");
    }
    
    this.perPage = perPage;
  }


  public SearchImage query(String query) {
    
    
    
    
    this.query = query;
    return this;
  }

   /**
   * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cat", value = "One or more search terms separated by spaces; you can use NOT to filter out images that match a term")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    
    
    
    this.query = query;
  }


  public SearchImage region(String region) {
    
    
    
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    
    
    
    this.region = region;
  }


  public SearchImage safe(Boolean safe) {
    
    
    
    
    this.safe = safe;
    return this;
  }

   /**
   * Enable or disable safe search
   * @return safe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Enable or disable safe search")

  public Boolean getSafe() {
    return safe;
  }


  public void setSafe(Boolean safe) {
    
    
    
    this.safe = safe;
  }


  public SearchImage sort(SortEnum sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * Sort by
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "POPULAR", value = "Sort by")

  public SortEnum getSort() {
    return sort;
  }


  public void setSort(SortEnum sort) {
    
    
    
    this.sort = sort;
  }


  public SearchImage spellcheckQuery(Boolean spellcheckQuery) {
    
    
    
    
    this.spellcheckQuery = spellcheckQuery;
    return this;
  }

   /**
   * Spellcheck the search query and return results on suggested spellings
   * @return spellcheckQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Spellcheck the search query and return results on suggested spellings")

  public Boolean getSpellcheckQuery() {
    return spellcheckQuery;
  }


  public void setSpellcheckQuery(Boolean spellcheckQuery) {
    
    
    
    this.spellcheckQuery = spellcheckQuery;
  }


  public SearchImage view(ViewEnum view) {
    
    
    
    
    this.view = view;
    return this;
  }

   /**
   * Amount of detail to render in the response
   * @return view
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MINIMAL", value = "Amount of detail to render in the response")

  public ViewEnum getView() {
    return view;
  }


  public void setView(ViewEnum view) {
    
    
    
    this.view = view;
  }


  public SearchImage width(Integer width) {
    
    
    
    
    this.width = width;
    return this;
  }

   /**
   * (Deprecated; use width_from and width_to instead) Show images with the specified width
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(Deprecated; use width_from and width_to instead) Show images with the specified width")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    
    
    
    this.width = width;
  }


  public SearchImage widthFrom(Integer widthFrom) {
    
    
    
    
    this.widthFrom = widthFrom;
    return this;
  }

   /**
   * Show images with the specified width or larger, in pixels
   * @return widthFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified width or larger, in pixels")

  public Integer getWidthFrom() {
    return widthFrom;
  }


  public void setWidthFrom(Integer widthFrom) {
    
    
    
    this.widthFrom = widthFrom;
  }


  public SearchImage widthTo(Integer widthTo) {
    
    
    
    
    this.widthTo = widthTo;
    return this;
  }

   /**
   * Show images with the specified width or smaller, in pixels
   * @return widthTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show images with the specified width or smaller, in pixels")

  public Integer getWidthTo() {
    return widthTo;
  }


  public void setWidthTo(Integer widthTo) {
    
    
    
    this.widthTo = widthTo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SearchImage instance itself
   */
  public SearchImage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchImage searchImage = (SearchImage) o;
    return Objects.equals(this.addedDate, searchImage.addedDate) &&
        Objects.equals(this.addedDateEnd, searchImage.addedDateEnd) &&
        Objects.equals(this.addedDateStart, searchImage.addedDateStart) &&
        Objects.equals(this.aspectRatio, searchImage.aspectRatio) &&
        Objects.equals(this.aspectRatioMax, searchImage.aspectRatioMax) &&
        Objects.equals(this.aspectRatioMin, searchImage.aspectRatioMin) &&
        Objects.equals(this.authentic, searchImage.authentic) &&
        Objects.equals(this.category, searchImage.category) &&
        Objects.equals(this.color, searchImage.color) &&
        Objects.equals(this.contributor, searchImage.contributor) &&
        Objects.equals(this.contributorCountry, searchImage.contributorCountry) &&
        Objects.equals(this.fields, searchImage.fields) &&
        Objects.equals(this.height, searchImage.height) &&
        Objects.equals(this.heightFrom, searchImage.heightFrom) &&
        Objects.equals(this.heightTo, searchImage.heightTo) &&
        Objects.equals(this.imageType, searchImage.imageType) &&
        Objects.equals(this.keywordSafeSearch, searchImage.keywordSafeSearch) &&
        Objects.equals(this.language, searchImage.language) &&
        Objects.equals(this.license, searchImage.license) &&
        Objects.equals(this.model, searchImage.model) &&
        Objects.equals(this.orientation, searchImage.orientation) &&
        Objects.equals(this.page, searchImage.page) &&
        Objects.equals(this.peopleAge, searchImage.peopleAge) &&
        Objects.equals(this.peopleEthnicity, searchImage.peopleEthnicity) &&
        Objects.equals(this.peopleGender, searchImage.peopleGender) &&
        Objects.equals(this.peopleModelReleased, searchImage.peopleModelReleased) &&
        Objects.equals(this.peopleNumber, searchImage.peopleNumber) &&
        Objects.equals(this.perPage, searchImage.perPage) &&
        Objects.equals(this.query, searchImage.query) &&
        Objects.equals(this.region, searchImage.region) &&
        Objects.equals(this.safe, searchImage.safe) &&
        Objects.equals(this.sort, searchImage.sort) &&
        Objects.equals(this.spellcheckQuery, searchImage.spellcheckQuery) &&
        Objects.equals(this.view, searchImage.view) &&
        Objects.equals(this.width, searchImage.width) &&
        Objects.equals(this.widthFrom, searchImage.widthFrom) &&
        Objects.equals(this.widthTo, searchImage.widthTo)&&
        Objects.equals(this.additionalProperties, searchImage.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedDate, addedDateEnd, addedDateStart, aspectRatio, aspectRatioMax, aspectRatioMin, authentic, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, peopleAge, peopleEthnicity, peopleGender, peopleModelReleased, peopleNumber, perPage, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchImage {\n");
    sb.append("    addedDate: ").append(toIndentedString(addedDate)).append("\n");
    sb.append("    addedDateEnd: ").append(toIndentedString(addedDateEnd)).append("\n");
    sb.append("    addedDateStart: ").append(toIndentedString(addedDateStart)).append("\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    aspectRatioMax: ").append(toIndentedString(aspectRatioMax)).append("\n");
    sb.append("    aspectRatioMin: ").append(toIndentedString(aspectRatioMin)).append("\n");
    sb.append("    authentic: ").append(toIndentedString(authentic)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    contributor: ").append(toIndentedString(contributor)).append("\n");
    sb.append("    contributorCountry: ").append(toIndentedString(contributorCountry)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    heightFrom: ").append(toIndentedString(heightFrom)).append("\n");
    sb.append("    heightTo: ").append(toIndentedString(heightTo)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    keywordSafeSearch: ").append(toIndentedString(keywordSafeSearch)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    peopleAge: ").append(toIndentedString(peopleAge)).append("\n");
    sb.append("    peopleEthnicity: ").append(toIndentedString(peopleEthnicity)).append("\n");
    sb.append("    peopleGender: ").append(toIndentedString(peopleGender)).append("\n");
    sb.append("    peopleModelReleased: ").append(toIndentedString(peopleModelReleased)).append("\n");
    sb.append("    peopleNumber: ").append(toIndentedString(peopleNumber)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    safe: ").append(toIndentedString(safe)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    spellcheckQuery: ").append(toIndentedString(spellcheckQuery)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    widthFrom: ").append(toIndentedString(widthFrom)).append("\n");
    sb.append("    widthTo: ").append(toIndentedString(widthTo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_date");
    openapiFields.add("added_date_end");
    openapiFields.add("added_date_start");
    openapiFields.add("aspect_ratio");
    openapiFields.add("aspect_ratio_max");
    openapiFields.add("aspect_ratio_min");
    openapiFields.add("authentic");
    openapiFields.add("category");
    openapiFields.add("color");
    openapiFields.add("contributor");
    openapiFields.add("contributor_country");
    openapiFields.add("fields");
    openapiFields.add("height");
    openapiFields.add("height_from");
    openapiFields.add("height_to");
    openapiFields.add("image_type");
    openapiFields.add("keyword_safe_search");
    openapiFields.add("language");
    openapiFields.add("license");
    openapiFields.add("model");
    openapiFields.add("orientation");
    openapiFields.add("page");
    openapiFields.add("people_age");
    openapiFields.add("people_ethnicity");
    openapiFields.add("people_gender");
    openapiFields.add("people_model_released");
    openapiFields.add("people_number");
    openapiFields.add("per_page");
    openapiFields.add("query");
    openapiFields.add("region");
    openapiFields.add("safe");
    openapiFields.add("sort");
    openapiFields.add("spellcheck_query");
    openapiFields.add("view");
    openapiFields.add("width");
    openapiFields.add("width_from");
    openapiFields.add("width_to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchImage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SearchImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchImage is not found in the empty JSON string", SearchImage.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contributor") != null && !jsonObj.get("contributor").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributor` to be an array in the JSON string but got `%s`", jsonObj.get("contributor").toString()));
      }
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_type") != null && !jsonObj.get("image_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_type` to be an array in the JSON string but got `%s`", jsonObj.get("image_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("license") != null && !jsonObj.get("license").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be an array in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      if ((jsonObj.get("people_age") != null && !jsonObj.get("people_age").isJsonNull()) && !jsonObj.get("people_age").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `people_age` to be a primitive type in the JSON string but got `%s`", jsonObj.get("people_age").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("people_ethnicity") != null && !jsonObj.get("people_ethnicity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `people_ethnicity` to be an array in the JSON string but got `%s`", jsonObj.get("people_ethnicity").toString()));
      }
      if ((jsonObj.get("people_gender") != null && !jsonObj.get("people_gender").isJsonNull()) && !jsonObj.get("people_gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `people_gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("people_gender").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchImage.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchImage>() {
           @Override
           public void write(JsonWriter out, SearchImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchImage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SearchImage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchImage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchImage
  * @throws IOException if the JSON string is invalid with respect to SearchImage
  */
  public static SearchImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchImage.class);
  }

 /**
  * Convert an instance of SearchImage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

