/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ImageSizeDetails;
import com.konfigthis.client.model.Thumbnail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the assets that are part of an image
 */
@ApiModel(description = "Information about the assets that are part of an image")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ImageAssets {
  public static final String SERIALIZED_NAME_HUGE_JPG = "huge_jpg";
  @SerializedName(SERIALIZED_NAME_HUGE_JPG)
  private ImageSizeDetails hugeJpg;

  public static final String SERIALIZED_NAME_HUGE_THUMB = "huge_thumb";
  @SerializedName(SERIALIZED_NAME_HUGE_THUMB)
  private Thumbnail hugeThumb;

  public static final String SERIALIZED_NAME_LARGE_THUMB = "large_thumb";
  @SerializedName(SERIALIZED_NAME_LARGE_THUMB)
  private Thumbnail largeThumb;

  public static final String SERIALIZED_NAME_MEDIUM_JPG = "medium_jpg";
  @SerializedName(SERIALIZED_NAME_MEDIUM_JPG)
  private ImageSizeDetails mediumJpg;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Thumbnail preview;

  public static final String SERIALIZED_NAME_PREVIEW1000 = "preview_1000";
  @SerializedName(SERIALIZED_NAME_PREVIEW1000)
  private Thumbnail preview1000;

  public static final String SERIALIZED_NAME_PREVIEW1500 = "preview_1500";
  @SerializedName(SERIALIZED_NAME_PREVIEW1500)
  private Thumbnail preview1500;

  public static final String SERIALIZED_NAME_SMALL_JPG = "small_jpg";
  @SerializedName(SERIALIZED_NAME_SMALL_JPG)
  private ImageSizeDetails smallJpg;

  public static final String SERIALIZED_NAME_SMALL_THUMB = "small_thumb";
  @SerializedName(SERIALIZED_NAME_SMALL_THUMB)
  private Thumbnail smallThumb;

  public static final String SERIALIZED_NAME_SUPERSIZE_JPG = "supersize_jpg";
  @SerializedName(SERIALIZED_NAME_SUPERSIZE_JPG)
  private ImageSizeDetails supersizeJpg;

  public static final String SERIALIZED_NAME_VECTOR_EPS = "vector_eps";
  @SerializedName(SERIALIZED_NAME_VECTOR_EPS)
  private ImageSizeDetails vectorEps;

  public ImageAssets() {
  }

  public ImageAssets hugeJpg(ImageSizeDetails hugeJpg) {
    
    
    
    
    this.hugeJpg = hugeJpg;
    return this;
  }

   /**
   * Get hugeJpg
   * @return hugeJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getHugeJpg() {
    return hugeJpg;
  }


  public void setHugeJpg(ImageSizeDetails hugeJpg) {
    
    
    
    this.hugeJpg = hugeJpg;
  }


  public ImageAssets hugeThumb(Thumbnail hugeThumb) {
    
    
    
    
    this.hugeThumb = hugeThumb;
    return this;
  }

   /**
   * Get hugeThumb
   * @return hugeThumb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getHugeThumb() {
    return hugeThumb;
  }


  public void setHugeThumb(Thumbnail hugeThumb) {
    
    
    
    this.hugeThumb = hugeThumb;
  }


  public ImageAssets largeThumb(Thumbnail largeThumb) {
    
    
    
    
    this.largeThumb = largeThumb;
    return this;
  }

   /**
   * Get largeThumb
   * @return largeThumb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getLargeThumb() {
    return largeThumb;
  }


  public void setLargeThumb(Thumbnail largeThumb) {
    
    
    
    this.largeThumb = largeThumb;
  }


  public ImageAssets mediumJpg(ImageSizeDetails mediumJpg) {
    
    
    
    
    this.mediumJpg = mediumJpg;
    return this;
  }

   /**
   * Get mediumJpg
   * @return mediumJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getMediumJpg() {
    return mediumJpg;
  }


  public void setMediumJpg(ImageSizeDetails mediumJpg) {
    
    
    
    this.mediumJpg = mediumJpg;
  }


  public ImageAssets preview(Thumbnail preview) {
    
    
    
    
    this.preview = preview;
    return this;
  }

   /**
   * Get preview
   * @return preview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getPreview() {
    return preview;
  }


  public void setPreview(Thumbnail preview) {
    
    
    
    this.preview = preview;
  }


  public ImageAssets preview1000(Thumbnail preview1000) {
    
    
    
    
    this.preview1000 = preview1000;
    return this;
  }

   /**
   * Get preview1000
   * @return preview1000
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getPreview1000() {
    return preview1000;
  }


  public void setPreview1000(Thumbnail preview1000) {
    
    
    
    this.preview1000 = preview1000;
  }


  public ImageAssets preview1500(Thumbnail preview1500) {
    
    
    
    
    this.preview1500 = preview1500;
    return this;
  }

   /**
   * Get preview1500
   * @return preview1500
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getPreview1500() {
    return preview1500;
  }


  public void setPreview1500(Thumbnail preview1500) {
    
    
    
    this.preview1500 = preview1500;
  }


  public ImageAssets smallJpg(ImageSizeDetails smallJpg) {
    
    
    
    
    this.smallJpg = smallJpg;
    return this;
  }

   /**
   * Get smallJpg
   * @return smallJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getSmallJpg() {
    return smallJpg;
  }


  public void setSmallJpg(ImageSizeDetails smallJpg) {
    
    
    
    this.smallJpg = smallJpg;
  }


  public ImageAssets smallThumb(Thumbnail smallThumb) {
    
    
    
    
    this.smallThumb = smallThumb;
    return this;
  }

   /**
   * Get smallThumb
   * @return smallThumb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Thumbnail getSmallThumb() {
    return smallThumb;
  }


  public void setSmallThumb(Thumbnail smallThumb) {
    
    
    
    this.smallThumb = smallThumb;
  }


  public ImageAssets supersizeJpg(ImageSizeDetails supersizeJpg) {
    
    
    
    
    this.supersizeJpg = supersizeJpg;
    return this;
  }

   /**
   * Get supersizeJpg
   * @return supersizeJpg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getSupersizeJpg() {
    return supersizeJpg;
  }


  public void setSupersizeJpg(ImageSizeDetails supersizeJpg) {
    
    
    
    this.supersizeJpg = supersizeJpg;
  }


  public ImageAssets vectorEps(ImageSizeDetails vectorEps) {
    
    
    
    
    this.vectorEps = vectorEps;
    return this;
  }

   /**
   * Get vectorEps
   * @return vectorEps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageSizeDetails getVectorEps() {
    return vectorEps;
  }


  public void setVectorEps(ImageSizeDetails vectorEps) {
    
    
    
    this.vectorEps = vectorEps;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImageAssets instance itself
   */
  public ImageAssets putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAssets imageAssets = (ImageAssets) o;
    return Objects.equals(this.hugeJpg, imageAssets.hugeJpg) &&
        Objects.equals(this.hugeThumb, imageAssets.hugeThumb) &&
        Objects.equals(this.largeThumb, imageAssets.largeThumb) &&
        Objects.equals(this.mediumJpg, imageAssets.mediumJpg) &&
        Objects.equals(this.preview, imageAssets.preview) &&
        Objects.equals(this.preview1000, imageAssets.preview1000) &&
        Objects.equals(this.preview1500, imageAssets.preview1500) &&
        Objects.equals(this.smallJpg, imageAssets.smallJpg) &&
        Objects.equals(this.smallThumb, imageAssets.smallThumb) &&
        Objects.equals(this.supersizeJpg, imageAssets.supersizeJpg) &&
        Objects.equals(this.vectorEps, imageAssets.vectorEps)&&
        Objects.equals(this.additionalProperties, imageAssets.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hugeJpg, hugeThumb, largeThumb, mediumJpg, preview, preview1000, preview1500, smallJpg, smallThumb, supersizeJpg, vectorEps, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAssets {\n");
    sb.append("    hugeJpg: ").append(toIndentedString(hugeJpg)).append("\n");
    sb.append("    hugeThumb: ").append(toIndentedString(hugeThumb)).append("\n");
    sb.append("    largeThumb: ").append(toIndentedString(largeThumb)).append("\n");
    sb.append("    mediumJpg: ").append(toIndentedString(mediumJpg)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    preview1000: ").append(toIndentedString(preview1000)).append("\n");
    sb.append("    preview1500: ").append(toIndentedString(preview1500)).append("\n");
    sb.append("    smallJpg: ").append(toIndentedString(smallJpg)).append("\n");
    sb.append("    smallThumb: ").append(toIndentedString(smallThumb)).append("\n");
    sb.append("    supersizeJpg: ").append(toIndentedString(supersizeJpg)).append("\n");
    sb.append("    vectorEps: ").append(toIndentedString(vectorEps)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("huge_jpg");
    openapiFields.add("huge_thumb");
    openapiFields.add("large_thumb");
    openapiFields.add("medium_jpg");
    openapiFields.add("preview");
    openapiFields.add("preview_1000");
    openapiFields.add("preview_1500");
    openapiFields.add("small_jpg");
    openapiFields.add("small_thumb");
    openapiFields.add("supersize_jpg");
    openapiFields.add("vector_eps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImageAssets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImageAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageAssets is not found in the empty JSON string", ImageAssets.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `huge_jpg`
      if (jsonObj.get("huge_jpg") != null && !jsonObj.get("huge_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("huge_jpg"));
      }
      // validate the optional field `huge_thumb`
      if (jsonObj.get("huge_thumb") != null && !jsonObj.get("huge_thumb").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("huge_thumb"));
      }
      // validate the optional field `large_thumb`
      if (jsonObj.get("large_thumb") != null && !jsonObj.get("large_thumb").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("large_thumb"));
      }
      // validate the optional field `medium_jpg`
      if (jsonObj.get("medium_jpg") != null && !jsonObj.get("medium_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("medium_jpg"));
      }
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("preview"));
      }
      // validate the optional field `preview_1000`
      if (jsonObj.get("preview_1000") != null && !jsonObj.get("preview_1000").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("preview_1000"));
      }
      // validate the optional field `preview_1500`
      if (jsonObj.get("preview_1500") != null && !jsonObj.get("preview_1500").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("preview_1500"));
      }
      // validate the optional field `small_jpg`
      if (jsonObj.get("small_jpg") != null && !jsonObj.get("small_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("small_jpg"));
      }
      // validate the optional field `small_thumb`
      if (jsonObj.get("small_thumb") != null && !jsonObj.get("small_thumb").isJsonNull()) {
        Thumbnail.validateJsonObject(jsonObj.getAsJsonObject("small_thumb"));
      }
      // validate the optional field `supersize_jpg`
      if (jsonObj.get("supersize_jpg") != null && !jsonObj.get("supersize_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("supersize_jpg"));
      }
      // validate the optional field `vector_eps`
      if (jsonObj.get("vector_eps") != null && !jsonObj.get("vector_eps").isJsonNull()) {
        ImageSizeDetails.validateJsonObject(jsonObj.getAsJsonObject("vector_eps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageAssets>() {
           @Override
           public void write(JsonWriter out, ImageAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageAssets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ImageAssets instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImageAssets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImageAssets
  * @throws IOException if the JSON string is invalid with respect to ImageAssets
  */
  public static ImageAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageAssets.class);
  }

 /**
  * Convert an instance of ImageAssets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

