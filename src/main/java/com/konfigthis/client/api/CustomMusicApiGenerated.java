/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AudioRendersListResults;
import com.konfigthis.client.model.CreateAudioRender;
import com.konfigthis.client.model.CreateAudioRendersRequest;
import com.konfigthis.client.model.DescriptorsListResult;
import com.konfigthis.client.model.InstrumentsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomMusicApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomMusicApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomMusicApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRenderedAudioCall(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAudioRendersRequest;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/renders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRenderedAudioValidateBeforeCall(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAudioRendersRequest' is set
        if (createAudioRendersRequest == null) {
            throw new ApiException("Missing the required parameter 'createAudioRendersRequest' when calling createRenderedAudio(Async)");
        }

        return createRenderedAudioCall(createAudioRendersRequest, _callback);

    }


    private ApiResponse<AudioRendersListResults> createRenderedAudioWithHttpInfo(CreateAudioRendersRequest createAudioRendersRequest) throws ApiException {
        okhttp3.Call localVarCall = createRenderedAudioValidateBeforeCall(createAudioRendersRequest, null);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRenderedAudioAsync(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback<AudioRendersListResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRenderedAudioValidateBeforeCall(createAudioRendersRequest, _callback);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRenderedAudioRequestBuilder {
        private final List<CreateAudioRender> audioRenders;

        private CreateRenderedAudioRequestBuilder(List<CreateAudioRender> audioRenders) {
            this.audioRenders = audioRenders;
        }

        /**
         * Build call for createRenderedAudio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateAudioRendersRequest createAudioRendersRequest = buildBodyParams();
            return createRenderedAudioCall(createAudioRendersRequest, _callback);
        }

        private CreateAudioRendersRequest buildBodyParams() {
            CreateAudioRendersRequest createAudioRendersRequest = new CreateAudioRendersRequest();
            createAudioRendersRequest.audioRenders(this.audioRenders);
            return createAudioRendersRequest;
        }

        /**
         * Execute createRenderedAudio request
         * @return AudioRendersListResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public AudioRendersListResults execute() throws ApiException {
            CreateAudioRendersRequest createAudioRendersRequest = buildBodyParams();
            ApiResponse<AudioRendersListResults> localVarResp = createRenderedAudioWithHttpInfo(createAudioRendersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRenderedAudio request with HTTP info returned
         * @return ApiResponse&lt;AudioRendersListResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioRendersListResults> executeWithHttpInfo() throws ApiException {
            CreateAudioRendersRequest createAudioRendersRequest = buildBodyParams();
            return createRenderedAudioWithHttpInfo(createAudioRendersRequest);
        }

        /**
         * Execute createRenderedAudio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioRendersListResults> _callback) throws ApiException {
            CreateAudioRendersRequest createAudioRendersRequest = buildBodyParams();
            return createRenderedAudioAsync(createAudioRendersRequest, _callback);
        }
    }

    /**
     * Create rendered audio
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @param createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file (required)
     * @return CreateRenderedAudioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateRenderedAudioRequestBuilder createRenderedAudio(List<CreateAudioRender> audioRenders) throws IllegalArgumentException {
        if (audioRenders == null) throw new IllegalArgumentException("\"audioRenders\" is required but got null");
        return new CreateRenderedAudioRequestBuilder(audioRenders);
    }
    private okhttp3.Call getAudioRendersDetailsCall(List<String> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/renders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioRendersDetailsValidateBeforeCall(List<String> id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioRendersDetails(Async)");
        }

        return getAudioRendersDetailsCall(id, _callback);

    }


    private ApiResponse<AudioRendersListResults> getAudioRendersDetailsWithHttpInfo(List<String> id) throws ApiException {
        okhttp3.Call localVarCall = getAudioRendersDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAudioRendersDetailsAsync(List<String> id, final ApiCallback<AudioRendersListResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioRendersDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAudioRendersDetailsRequestBuilder {
        private final List<String> id;

        private GetAudioRendersDetailsRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Build call for getAudioRendersDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAudioRendersDetailsCall(id, _callback);
        }


        /**
         * Execute getAudioRendersDetails request
         * @return AudioRendersListResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public AudioRendersListResults execute() throws ApiException {
            ApiResponse<AudioRendersListResults> localVarResp = getAudioRendersDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAudioRendersDetails request with HTTP info returned
         * @return ApiResponse&lt;AudioRendersListResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioRendersListResults> executeWithHttpInfo() throws ApiException {
            return getAudioRendersDetailsWithHttpInfo(id);
        }

        /**
         * Execute getAudioRendersDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioRendersListResults> _callback) throws ApiException {
            return getAudioRendersDetailsAsync(id, _callback);
        }
    }

    /**
     * Get details about audio renders
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @param id One or more render IDs (required)
     * @return GetAudioRendersDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetAudioRendersDetailsRequestBuilder getAudioRendersDetails(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetAudioRendersDetailsRequestBuilder(id);
    }
    private okhttp3.Call listAudioDescriptorsCall(Double renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, Double tempo, Double tempoTo, Double tempoFrom, String name, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (renderSpeedOver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("render_speed_over", renderSpeedOver));
        }

        if (bandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band_id", bandId));
        }

        if (bandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band_name", bandName));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (instrumentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument_name", instrumentName));
        }

        if (instrumentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument_id", instrumentId));
        }

        if (tempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo", tempo));
        }

        if (tempoTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo_to", tempoTo));
        }

        if (tempoFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo_from", tempoFrom));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudioDescriptorsValidateBeforeCall(Double renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, Double tempo, Double tempoTo, Double tempoFrom, String name, String tag, final ApiCallback _callback) throws ApiException {
        return listAudioDescriptorsCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);

    }


    private ApiResponse<DescriptorsListResult> listAudioDescriptorsWithHttpInfo(Double renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, Double tempo, Double tempoTo, Double tempoFrom, String name, String tag) throws ApiException {
        okhttp3.Call localVarCall = listAudioDescriptorsValidateBeforeCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, null);
        Type localVarReturnType = new TypeToken<DescriptorsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAudioDescriptorsAsync(Double renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, Double tempo, Double tempoTo, Double tempoFrom, String name, String tag, final ApiCallback<DescriptorsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAudioDescriptorsValidateBeforeCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);
        Type localVarReturnType = new TypeToken<DescriptorsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAudioDescriptorsRequestBuilder {
        private Double renderSpeedOver;
        private String bandId;
        private String bandName;
        private Integer page;
        private Integer perPage;
        private List<String> id;
        private String instrumentName;
        private String instrumentId;
        private Double tempo;
        private Double tempoTo;
        private Double tempoFrom;
        private String name;
        private String tag;

        private ListAudioDescriptorsRequestBuilder() {
        }

        /**
         * Set renderSpeedOver
         * @param renderSpeedOver Show descriptors with an average render speed that is greater than or equal to the specified value (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder renderSpeedOver(Double renderSpeedOver) {
            this.renderSpeedOver = renderSpeedOver;
            return this;
        }
        
        /**
         * Set bandId
         * @param bandId Show descriptors that contain the specified band (case-sentsitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder bandId(String bandId) {
            this.bandId = bandId;
            return this;
        }
        
        /**
         * Set bandName
         * @param bandName Show descriptors with the specified band name (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder bandName(String bandName) {
            this.bandName = bandName;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set id
         * @param id Show descriptors with the specified IDs (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder id(List<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set instrumentName
         * @param instrumentName Show descriptors with the specified instrument name (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder instrumentName(String instrumentName) {
            this.instrumentName = instrumentName;
            return this;
        }
        
        /**
         * Set instrumentId
         * @param instrumentId Show descriptors with the specified instrument ID (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder instrumentId(String instrumentId) {
            this.instrumentId = instrumentId;
            return this;
        }
        
        /**
         * Set tempo
         * @param tempo Show descriptors whose tempo range includes the specified tempo in beats per minute (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder tempo(Double tempo) {
            this.tempo = tempo;
            return this;
        }
        
        /**
         * Set tempoTo
         * @param tempoTo Show descriptors with a tempo that is less than or equal to the specified number (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder tempoTo(Double tempoTo) {
            this.tempoTo = tempoTo;
            return this;
        }
        
        /**
         * Set tempoFrom
         * @param tempoFrom Show descriptors that have a tempo range that includes the specified tempo in beats per minute (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder tempoFrom(Double tempoFrom) {
            this.tempoFrom = tempoFrom;
            return this;
        }
        
        /**
         * Set name
         * @param name Show descriptors with the specified name (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive) (optional)
         * @return ListAudioDescriptorsRequestBuilder
         */
        public ListAudioDescriptorsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Build call for listAudioDescriptors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAudioDescriptorsCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);
        }


        /**
         * Execute listAudioDescriptors request
         * @return DescriptorsListResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public DescriptorsListResult execute() throws ApiException {
            ApiResponse<DescriptorsListResult> localVarResp = listAudioDescriptorsWithHttpInfo(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAudioDescriptors request with HTTP info returned
         * @return ApiResponse&lt;DescriptorsListResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DescriptorsListResult> executeWithHttpInfo() throws ApiException {
            return listAudioDescriptorsWithHttpInfo(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag);
        }

        /**
         * Execute listAudioDescriptors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DescriptorsListResult> _callback) throws ApiException {
            return listAudioDescriptorsAsync(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);
        }
    }

    /**
     * List computer audio descriptors
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @return ListAudioDescriptorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListAudioDescriptorsRequestBuilder listAudioDescriptors() throws IllegalArgumentException {
        return new ListAudioDescriptorsRequestBuilder();
    }
    private okhttp3.Call listComputerAudioInstrumentsCall(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listComputerAudioInstrumentsValidateBeforeCall(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback _callback) throws ApiException {
        return listComputerAudioInstrumentsCall(id, perPage, page, name, tag, _callback);

    }


    private ApiResponse<InstrumentsListResult> listComputerAudioInstrumentsWithHttpInfo(List<String> id, Integer perPage, Integer page, String name, String tag) throws ApiException {
        okhttp3.Call localVarCall = listComputerAudioInstrumentsValidateBeforeCall(id, perPage, page, name, tag, null);
        Type localVarReturnType = new TypeToken<InstrumentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listComputerAudioInstrumentsAsync(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback<InstrumentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listComputerAudioInstrumentsValidateBeforeCall(id, perPage, page, name, tag, _callback);
        Type localVarReturnType = new TypeToken<InstrumentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListComputerAudioInstrumentsRequestBuilder {
        private List<String> id;
        private Integer perPage;
        private Integer page;
        private String name;
        private String tag;

        private ListComputerAudioInstrumentsRequestBuilder() {
        }

        /**
         * Set id
         * @param id Show instruments with the specified ID (optional)
         * @return ListComputerAudioInstrumentsRequestBuilder
         */
        public ListComputerAudioInstrumentsRequestBuilder id(List<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListComputerAudioInstrumentsRequestBuilder
         */
        public ListComputerAudioInstrumentsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListComputerAudioInstrumentsRequestBuilder
         */
        public ListComputerAudioInstrumentsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set name
         * @param name Show instruments with the specified name (case-sensitive) (optional)
         * @return ListComputerAudioInstrumentsRequestBuilder
         */
        public ListComputerAudioInstrumentsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Show instruments with the specified tag, such as Percussion or Strings (case-sensitive) (optional)
         * @return ListComputerAudioInstrumentsRequestBuilder
         */
        public ListComputerAudioInstrumentsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Build call for listComputerAudioInstruments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listComputerAudioInstrumentsCall(id, perPage, page, name, tag, _callback);
        }


        /**
         * Execute listComputerAudioInstruments request
         * @return InstrumentsListResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public InstrumentsListResult execute() throws ApiException {
            ApiResponse<InstrumentsListResult> localVarResp = listComputerAudioInstrumentsWithHttpInfo(id, perPage, page, name, tag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listComputerAudioInstruments request with HTTP info returned
         * @return ApiResponse&lt;InstrumentsListResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstrumentsListResult> executeWithHttpInfo() throws ApiException {
            return listComputerAudioInstrumentsWithHttpInfo(id, perPage, page, name, tag);
        }

        /**
         * Execute listComputerAudioInstruments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstrumentsListResult> _callback) throws ApiException {
            return listComputerAudioInstrumentsAsync(id, perPage, page, name, tag, _callback);
        }
    }

    /**
     * List computer audio instruments
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @return ListComputerAudioInstrumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListComputerAudioInstrumentsRequestBuilder listComputerAudioInstruments() throws IllegalArgumentException {
        return new ListComputerAudioInstrumentsRequestBuilder();
    }
}
