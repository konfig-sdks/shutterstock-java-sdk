/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.Language;
import com.konfigthis.client.model.LicenseSFX;
import com.konfigthis.client.model.LicenseSFXRequest;
import com.konfigthis.client.model.LicenseSFXResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SFX;
import com.konfigthis.client.model.SFXDataList;
import com.konfigthis.client.model.SFXSearchResults;
import com.konfigthis.client.model.SfxUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SoundEffectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SoundEffectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SoundEffectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailsCall(Integer id, Language language, String view, String library, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(Integer id, Language language, String view, String library, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        return getDetailsCall(id, language, view, library, searchId, _callback);

    }


    private ApiResponse<SFX> getDetailsWithHttpInfo(Integer id, Language language, String view, String library, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, language, view, library, searchId, null);
        Type localVarReturnType = new TypeToken<SFX>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(Integer id, Language language, String view, String library, String searchId, final ApiCallback<SFX> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, language, view, library, searchId, _callback);
        Type localVarReturnType = new TypeToken<SFX>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final Integer id;
        private Language language;
        private String view;
        private String library;
        private String searchId;

        private GetDetailsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set library
         * @param library Which library to fetch from (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder library(String library) {
            this.library = library;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, language, view, library, searchId, _callback);
        }


        /**
         * Execute getDetails request
         * @return SFX
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public SFX execute() throws ApiException {
            ApiResponse<SFX> localVarResp = getDetailsWithHttpInfo(id, language, view, library, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;SFX&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SFX> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id, language, view, library, searchId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SFX> _callback) throws ApiException {
            return getDetailsAsync(id, language, view, library, searchId, _callback);
        }
    }

    /**
     * Get details about sound effects
     * This endpoint shows information about a sound effect.
     * @param id Audio track ID (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDetailsRequestBuilder(id);
    }
    private okhttp3.Call licenseAssetsCall(LicenseSFXRequest licenseSFXRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseSFXRequest;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseAssetsValidateBeforeCall(LicenseSFXRequest licenseSFXRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseSFXRequest' is set
        if (licenseSFXRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseSFXRequest' when calling licenseAssets(Async)");
        }

        return licenseAssetsCall(licenseSFXRequest, _callback);

    }


    private ApiResponse<LicenseSFXResultDataList> licenseAssetsWithHttpInfo(LicenseSFXRequest licenseSFXRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseAssetsValidateBeforeCall(licenseSFXRequest, null);
        Type localVarReturnType = new TypeToken<LicenseSFXResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseAssetsAsync(LicenseSFXRequest licenseSFXRequest, final ApiCallback<LicenseSFXResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseAssetsValidateBeforeCall(licenseSFXRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseSFXResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseAssetsRequestBuilder {
        private final List<LicenseSFX> soundEffects;

        private LicenseAssetsRequestBuilder(List<LicenseSFX> soundEffects) {
            this.soundEffects = soundEffects;
        }

        /**
         * Build call for licenseAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseSFXRequest licenseSFXRequest = buildBodyParams();
            return licenseAssetsCall(licenseSFXRequest, _callback);
        }

        private LicenseSFXRequest buildBodyParams() {
            LicenseSFXRequest licenseSFXRequest = new LicenseSFXRequest();
            licenseSFXRequest.soundEffects(this.soundEffects);
            return licenseSFXRequest;
        }

        /**
         * Execute licenseAssets request
         * @return LicenseSFXResultDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LicenseSFXResultDataList execute() throws ApiException {
            LicenseSFXRequest licenseSFXRequest = buildBodyParams();
            ApiResponse<LicenseSFXResultDataList> localVarResp = licenseAssetsWithHttpInfo(licenseSFXRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseAssets request with HTTP info returned
         * @return ApiResponse&lt;LicenseSFXResultDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseSFXResultDataList> executeWithHttpInfo() throws ApiException {
            LicenseSFXRequest licenseSFXRequest = buildBodyParams();
            return licenseAssetsWithHttpInfo(licenseSFXRequest);
        }

        /**
         * Execute licenseAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseSFXResultDataList> _callback) throws ApiException {
            LicenseSFXRequest licenseSFXRequest = buildBodyParams();
            return licenseAssetsAsync(licenseSFXRequest, _callback);
        }
    }

    /**
     * License sound effects
     * This endpoint licenses sounds effect assets.
     * @param licenseSFXRequest  (required)
     * @return LicenseAssetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseAssetsRequestBuilder licenseAssets(List<LicenseSFX> soundEffects) throws IllegalArgumentException {
        if (soundEffects == null) throw new IllegalArgumentException("\"soundEffects\" is required but got null");
        return new LicenseAssetsRequestBuilder(soundEffects);
    }
    private okhttp3.Call listDetailsCall(List<String> id, String view, Language language, String library, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDetailsValidateBeforeCall(List<String> id, String view, Language language, String library, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listDetails(Async)");
        }

        return listDetailsCall(id, view, language, library, searchId, _callback);

    }


    private ApiResponse<SFXDataList> listDetailsWithHttpInfo(List<String> id, String view, Language language, String library, String searchId) throws ApiException {
        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(id, view, language, library, searchId, null);
        Type localVarReturnType = new TypeToken<SFXDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDetailsAsync(List<String> id, String view, Language language, String library, String searchId, final ApiCallback<SFXDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(id, view, language, library, searchId, _callback);
        Type localVarReturnType = new TypeToken<SFXDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDetailsRequestBuilder {
        private final List<String> id;
        private String view;
        private Language language;
        private String library;
        private String searchId;

        private ListDetailsRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set library
         * @param library Which library to fetch from (optional)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder library(String library) {
            this.library = library;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return ListDetailsRequestBuilder
         */
        public ListDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for listDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDetailsCall(id, view, language, library, searchId, _callback);
        }


        /**
         * Execute listDetails request
         * @return SFXDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public SFXDataList execute() throws ApiException {
            ApiResponse<SFXDataList> localVarResp = listDetailsWithHttpInfo(id, view, language, library, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDetails request with HTTP info returned
         * @return ApiResponse&lt;SFXDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SFXDataList> executeWithHttpInfo() throws ApiException {
            return listDetailsWithHttpInfo(id, view, language, library, searchId);
        }

        /**
         * Execute listDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SFXDataList> _callback) throws ApiException {
            return listDetailsAsync(id, view, language, library, searchId, _callback);
        }
    }

    /**
     * List details about sound effects
     * This endpoint shows information about sound effects.
     * @param id One or more sound effect IDs (required)
     * @return ListDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListDetailsRequestBuilder listDetails(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListDetailsRequestBuilder(id);
    }
    private okhttp3.Call listLicensesCall(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sfxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfx_id", sfxId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (licenseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license_id", licenseId));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicensesValidateBeforeCall(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listLicensesCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listLicensesWithHttpInfo(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLicensesAsync(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLicensesRequestBuilder {
        private String sfxId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String licenseId;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListLicensesRequestBuilder() {
        }

        /**
         * Set sfxId
         * @param sfxId Show licenses for the specified sound effects ID (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder sfxId(String sfxId) {
            this.sfxId = sfxId;
            return this;
        }
        
        /**
         * Set license
         * @param license Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set licenseId
         * @param licenseId Filter by the license ID (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder licenseId(String licenseId) {
            this.licenseId = licenseId;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLicensesCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listLicensesWithHttpInfo(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listLicensesWithHttpInfo(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory);
        }

        /**
         * Execute listLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listLicensesAsync(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List sound effects licenses
     * This endpoint lists existing licenses.
     * @return ListLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListLicensesRequestBuilder listLicenses() throws IllegalArgumentException {
        return new ListLicensesRequestBuilder();
    }
    private okhttp3.Call redownloadLicensesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redownloadLicensesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling redownloadLicenses(Async)");
        }

        return redownloadLicensesCall(id, _callback);

    }


    private ApiResponse<SfxUrl> redownloadLicensesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = redownloadLicensesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SfxUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redownloadLicensesAsync(String id, final ApiCallback<SfxUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = redownloadLicensesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SfxUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedownloadLicensesRequestBuilder {
        private final String id;

        private RedownloadLicensesRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for redownloadLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return redownloadLicensesCall(id, _callback);
        }


        /**
         * Execute redownloadLicenses request
         * @return SfxUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public SfxUrl execute() throws ApiException {
            ApiResponse<SfxUrl> localVarResp = redownloadLicensesWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redownloadLicenses request with HTTP info returned
         * @return ApiResponse&lt;SfxUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SfxUrl> executeWithHttpInfo() throws ApiException {
            return redownloadLicensesWithHttpInfo(id);
        }

        /**
         * Execute redownloadLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SfxUrl> _callback) throws ApiException {
            return redownloadLicensesAsync(id, _callback);
        }
    }

    /**
     * Download sound effects
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @return RedownloadLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RedownloadLicensesRequestBuilder redownloadLicenses(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RedownloadLicensesRequestBuilder(id);
    }
    private okhttp3.Call searchSoundEffectsCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (durationFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_from", durationFrom));
        }

        if (durationTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_to", durationTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSoundEffectsValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback _callback) throws ApiException {
        return searchSoundEffectsCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);

    }


    private ApiResponse<SFXSearchResults> searchSoundEffectsWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language) throws ApiException {
        okhttp3.Call localVarCall = searchSoundEffectsValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, null);
        Type localVarReturnType = new TypeToken<SFXSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchSoundEffectsAsync(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback<SFXSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSoundEffectsValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);
        Type localVarReturnType = new TypeToken<SFXSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchSoundEffectsRequestBuilder {
        private LocalDate addedDate;
        private LocalDate addedDateStart;
        private LocalDate addedDateEnd;
        private Integer duration;
        private Integer durationFrom;
        private Integer durationTo;
        private Integer page;
        private Integer perPage;
        private String query;
        private Boolean safe;
        private String sort;
        private String view;
        private Language language;

        private SearchSoundEffectsRequestBuilder() {
        }

        /**
         * Set addedDate
         * @param addedDate Show sound effects added on the specified date (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder addedDate(LocalDate addedDate) {
            this.addedDate = addedDate;
            return this;
        }
        
        /**
         * Set addedDateStart
         * @param addedDateStart Show sound effects added on or after the specified date (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder addedDateStart(LocalDate addedDateStart) {
            this.addedDateStart = addedDateStart;
            return this;
        }
        
        /**
         * Set addedDateEnd
         * @param addedDateEnd Show sound effects added before the specified date (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder addedDateEnd(LocalDate addedDateEnd) {
            this.addedDateEnd = addedDateEnd;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Show sound effects with the specified duration in seconds (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set durationFrom
         * @param durationFrom Show sound effects with the specified duration or longer in seconds (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder durationFrom(Integer durationFrom) {
            this.durationFrom = durationFrom;
            return this;
        }
        
        /**
         * Set durationTo
         * @param durationTo Show sound effects with the specified duration or shorter in seconds (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder durationTo(Integer durationTo) {
            this.durationTo = durationTo;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to popular)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set language
         * @param language Set query and result language (uses Accept-Language header if not set) (optional)
         * @return SearchSoundEffectsRequestBuilder
         */
        public SearchSoundEffectsRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for searchSoundEffects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchSoundEffectsCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);
        }


        /**
         * Execute searchSoundEffects request
         * @return SFXSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public SFXSearchResults execute() throws ApiException {
            ApiResponse<SFXSearchResults> localVarResp = searchSoundEffectsWithHttpInfo(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchSoundEffects request with HTTP info returned
         * @return ApiResponse&lt;SFXSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SFXSearchResults> executeWithHttpInfo() throws ApiException {
            return searchSoundEffectsWithHttpInfo(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language);
        }

        /**
         * Execute searchSoundEffects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SFXSearchResults> _callback) throws ApiException {
            return searchSoundEffectsAsync(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);
        }
    }

    /**
     * Search for sound effects
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @return SearchSoundEffectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public SearchSoundEffectsRequestBuilder searchSoundEffects() throws IllegalArgumentException {
        return new SearchSoundEffectsRequestBuilder();
    }
}
