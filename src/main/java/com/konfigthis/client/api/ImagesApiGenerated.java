/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkImageSearchResults;
import com.konfigthis.client.model.CategoryDataList;
import com.konfigthis.client.model.Collection;
import com.konfigthis.client.model.CollectionCreateRequest;
import com.konfigthis.client.model.CollectionCreateResponse;
import com.konfigthis.client.model.CollectionDataList;
import com.konfigthis.client.model.CollectionItem;
import com.konfigthis.client.model.CollectionItemDataList;
import com.konfigthis.client.model.CollectionItemRequest;
import com.konfigthis.client.model.CollectionUpdateRequest;
import com.konfigthis.client.model.Cookie;
import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.FeaturedCollection;
import com.konfigthis.client.model.FeaturedCollectionDataList;
import com.konfigthis.client.model.Image;
import com.konfigthis.client.model.ImageDataList;
import com.konfigthis.client.model.ImageSearchResults;
import com.konfigthis.client.model.Language;
import com.konfigthis.client.model.LicenseImageRequest;
import com.konfigthis.client.model.LicenseImageResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RecommendationDataList;
import com.konfigthis.client.model.RedownloadImage;
import com.konfigthis.client.model.SearchEntitiesRequest;
import com.konfigthis.client.model.SearchEntitiesResponse;
import com.konfigthis.client.model.SearchImage;
import com.konfigthis.client.model.Suggestions;
import com.konfigthis.client.model.UpdatedMediaDataList;
import com.konfigthis.client.model.Url;
import com.konfigthis.client.model.VLicenseImage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ImagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToCollectionItemsCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionItemRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionItemsValidateBeforeCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addToCollectionItems(Async)");
        }

        // verify the required parameter 'collectionItemRequest' is set
        if (collectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionItemRequest' when calling addToCollectionItems(Async)");
        }

        return addToCollectionItemsCall(id, collectionItemRequest, _callback);

    }


    private ApiResponse<Void> addToCollectionItemsWithHttpInfo(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(id, collectionItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToCollectionItemsAsync(String id, CollectionItemRequest collectionItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(id, collectionItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToCollectionItemsRequestBuilder {
        private final List<CollectionItem> items;
        private final String id;

        private AddToCollectionItemsRequestBuilder(List<CollectionItem> items, String id) {
            this.items = items;
            this.id = id;
        }

        /**
         * Build call for addToCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsCall(id, collectionItemRequest, _callback);
        }

        private CollectionItemRequest buildBodyParams() {
            CollectionItemRequest collectionItemRequest = new CollectionItemRequest();
            collectionItemRequest.items(this.items);
            return collectionItemRequest;
        }

        /**
         * Execute addToCollectionItems request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            addToCollectionItemsWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addToCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addToCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsAsync(id, collectionItemRequest, _callback);
        }
    }

    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param id Collection ID (required)
     * @param collectionItemRequest Array of image IDs to add to the collection (required)
     * @return AddToCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public AddToCollectionItemsRequestBuilder addToCollectionItems(List<CollectionItem> items, String id) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddToCollectionItemsRequestBuilder(items, id);
    }
    private okhttp3.Call createCollectionCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionCreateRequest' is set
        if (collectionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionCreateRequest' when calling createCollection(Async)");
        }

        return createCollectionCall(collectionCreateRequest, _callback);

    }


    private ApiResponse<CollectionCreateResponse> createCollectionWithHttpInfo(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(collectionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCollectionAsync(CollectionCreateRequest collectionCreateRequest, final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(collectionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCollectionRequestBuilder {
        private final String name;

        private CreateCollectionRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionCall(collectionCreateRequest, _callback);
        }

        private CollectionCreateRequest buildBodyParams() {
            CollectionCreateRequest collectionCreateRequest = new CollectionCreateRequest();
            collectionCreateRequest.name(this.name);
            return collectionCreateRequest;
        }

        /**
         * Execute createCollection request
         * @return CollectionCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionCreateResponse execute() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            ApiResponse<CollectionCreateResponse> localVarResp = createCollectionWithHttpInfo(collectionCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCollection request with HTTP info returned
         * @return ApiResponse&lt;CollectionCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionCreateResponse> executeWithHttpInfo() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionWithHttpInfo(collectionCreateRequest);
        }

        /**
         * Execute createCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionAsync(collectionCreateRequest, _callback);
        }
    }

    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use &#x60;POST /v2/images/collections/{id}/items&#x60;.
     * @param collectionCreateRequest The names of the new collections (required)
     * @return CreateCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateCollectionRequestBuilder createCollection(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateCollectionRequestBuilder(name);
    }
    private okhttp3.Call deleteCollectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(id, _callback);

    }


    private ApiResponse<Void> deleteCollectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCollectionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCollectionRequestBuilder {
        private final String id;

        private DeleteCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCollectionCall(id, _callback);
        }


        /**
         * Execute deleteCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCollectionAsync(id, _callback);
        }
    }

    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param id Collection ID (required)
     * @return DeleteCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCollectionRequestBuilder deleteCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCollectionRequestBuilder(id);
    }
    private okhttp3.Call extractKeywordsFromTextCall(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEntitiesRequest;

        // create path and map variables
        String localVarPath = "/v2/images/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractKeywordsFromTextValidateBeforeCall(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchEntitiesRequest' is set
        if (searchEntitiesRequest == null) {
            throw new ApiException("Missing the required parameter 'searchEntitiesRequest' when calling extractKeywordsFromText(Async)");
        }

        return extractKeywordsFromTextCall(searchEntitiesRequest, _callback);

    }


    private ApiResponse<SearchEntitiesResponse> extractKeywordsFromTextWithHttpInfo(SearchEntitiesRequest searchEntitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = extractKeywordsFromTextValidateBeforeCall(searchEntitiesRequest, null);
        Type localVarReturnType = new TypeToken<SearchEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extractKeywordsFromTextAsync(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback<SearchEntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractKeywordsFromTextValidateBeforeCall(searchEntitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtractKeywordsFromTextRequestBuilder {
        private final String text;

        private ExtractKeywordsFromTextRequestBuilder(String text) {
            this.text = text;
        }

        /**
         * Build call for extractKeywordsFromText
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SearchEntitiesRequest searchEntitiesRequest = buildBodyParams();
            return extractKeywordsFromTextCall(searchEntitiesRequest, _callback);
        }

        private SearchEntitiesRequest buildBodyParams() {
            SearchEntitiesRequest searchEntitiesRequest = new SearchEntitiesRequest();
            searchEntitiesRequest.text(this.text);
            return searchEntitiesRequest;
        }

        /**
         * Execute extractKeywordsFromText request
         * @return SearchEntitiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public SearchEntitiesResponse execute() throws ApiException {
            SearchEntitiesRequest searchEntitiesRequest = buildBodyParams();
            ApiResponse<SearchEntitiesResponse> localVarResp = extractKeywordsFromTextWithHttpInfo(searchEntitiesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extractKeywordsFromText request with HTTP info returned
         * @return ApiResponse&lt;SearchEntitiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SearchEntitiesResponse> executeWithHttpInfo() throws ApiException {
            SearchEntitiesRequest searchEntitiesRequest = buildBodyParams();
            return extractKeywordsFromTextWithHttpInfo(searchEntitiesRequest);
        }

        /**
         * Execute extractKeywordsFromText request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SearchEntitiesResponse> _callback) throws ApiException {
            SearchEntitiesRequest searchEntitiesRequest = buildBodyParams();
            return extractKeywordsFromTextAsync(searchEntitiesRequest, _callback);
        }
    }

    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param searchEntitiesRequest Plain text to extract keywords from (required)
     * @return ExtractKeywordsFromTextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ExtractKeywordsFromTextRequestBuilder extractKeywordsFromText(String text) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            if (text != null && text.length() < 1) {
              throw new IllegalArgumentException("Invalid value for text. Length must be greater than or equal to 1.");
            }

        return new ExtractKeywordsFromTextRequestBuilder(text);
    }
    private okhttp3.Call featuredCollectionDetailsCall(String id, String embed, String assetHint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (assetHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_hint", assetHint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuredCollectionDetailsValidateBeforeCall(String id, String embed, String assetHint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling featuredCollectionDetails(Async)");
        }

        return featuredCollectionDetailsCall(id, embed, assetHint, _callback);

    }


    private ApiResponse<FeaturedCollection> featuredCollectionDetailsWithHttpInfo(String id, String embed, String assetHint) throws ApiException {
        okhttp3.Call localVarCall = featuredCollectionDetailsValidateBeforeCall(id, embed, assetHint, null);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuredCollectionDetailsAsync(String id, String embed, String assetHint, final ApiCallback<FeaturedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuredCollectionDetailsValidateBeforeCall(id, embed, assetHint, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturedCollectionDetailsRequestBuilder {
        private final String id;
        private String embed;
        private String assetHint;

        private FeaturedCollectionDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return FeaturedCollectionDetailsRequestBuilder
         */
        public FeaturedCollectionDetailsRequestBuilder embed(String embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set assetHint
         * @param assetHint Cover image size (optional, default to 1x)
         * @return FeaturedCollectionDetailsRequestBuilder
         */
        public FeaturedCollectionDetailsRequestBuilder assetHint(String assetHint) {
            this.assetHint = assetHint;
            return this;
        }
        
        /**
         * Build call for featuredCollectionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuredCollectionDetailsCall(id, embed, assetHint, _callback);
        }


        /**
         * Execute featuredCollectionDetails request
         * @return FeaturedCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public FeaturedCollection execute() throws ApiException {
            ApiResponse<FeaturedCollection> localVarResp = featuredCollectionDetailsWithHttpInfo(id, embed, assetHint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuredCollectionDetails request with HTTP info returned
         * @return ApiResponse&lt;FeaturedCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeaturedCollection> executeWithHttpInfo() throws ApiException {
            return featuredCollectionDetailsWithHttpInfo(id, embed, assetHint);
        }

        /**
         * Execute featuredCollectionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeaturedCollection> _callback) throws ApiException {
            return featuredCollectionDetailsAsync(id, embed, assetHint, _callback);
        }
    }

    /**
     * Get the details of featured image collections
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use &#x60;GET /v2/images/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @return FeaturedCollectionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedCollectionDetailsRequestBuilder featuredCollectionDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new FeaturedCollectionDetailsRequestBuilder(id);
    }
    private okhttp3.Call getCollectionDetailsCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionDetailsValidateBeforeCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionDetails(Async)");
        }

        return getCollectionDetailsCall(id, embed, shareCode, _callback);

    }


    private ApiResponse<Collection> getCollectionDetailsWithHttpInfo(String id, List<String> embed, String shareCode) throws ApiException {
        okhttp3.Call localVarCall = getCollectionDetailsValidateBeforeCall(id, embed, shareCode, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionDetailsAsync(String id, List<String> embed, String shareCode, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionDetailsValidateBeforeCall(id, embed, shareCode, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionDetailsRequestBuilder {
        private final String id;
        private List<String> embed;
        private String shareCode;

        private GetCollectionDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return GetCollectionDetailsRequestBuilder
         */
        public GetCollectionDetailsRequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve a shared collection (optional)
         * @return GetCollectionDetailsRequestBuilder
         */
        public GetCollectionDetailsRequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Build call for getCollectionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionDetailsCall(id, embed, shareCode, _callback);
        }


        /**
         * Execute getCollectionDetails request
         * @return Collection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public Collection execute() throws ApiException {
            ApiResponse<Collection> localVarResp = getCollectionDetailsWithHttpInfo(id, embed, shareCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionDetails request with HTTP info returned
         * @return ApiResponse&lt;Collection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collection> executeWithHttpInfo() throws ApiException {
            return getCollectionDetailsWithHttpInfo(id, embed, shareCode);
        }

        /**
         * Execute getCollectionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collection> _callback) throws ApiException {
            return getCollectionDetailsAsync(id, embed, shareCode, _callback);
        }
    }

    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use &#x60;GET /v2/images/collections/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @return GetCollectionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionDetailsRequestBuilder getCollectionDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCollectionDetailsRequestBuilder(id);
    }
    private okhttp3.Call getCollectionItemsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionItems(Async)");
        }

        return getCollectionItemsCall(id, page, perPage, _callback);

    }


    private ApiResponse<CollectionItemDataList> getCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionItemsAsync(String id, Integer page, Integer perPage, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionItemsRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;

        private GetCollectionItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionItemsCall(id, page, perPage, _callback);
        }


        /**
         * Execute getCollectionItems request
         * @return CollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public CollectionItemDataList execute() throws ApiException {
            ApiResponse<CollectionItemDataList> localVarResp = getCollectionItemsWithHttpInfo(id, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;CollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return getCollectionItemsWithHttpInfo(id, page, perPage);
        }

        /**
         * Execute getCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionItemDataList> _callback) throws ApiException {
            return getCollectionItemsAsync(id, page, perPage, _callback);
        }
    }

    /**
     * Get the contents of featured image collections
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @return GetCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionItemsRequestBuilder getCollectionItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCollectionItemsRequestBuilder(id);
    }
    private okhttp3.Call getCollectionItems_0Call(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItems_0ValidateBeforeCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionItems_0(Async)");
        }

        return getCollectionItems_0Call(id, page, perPage, shareCode, sort, _callback);

    }


    private ApiResponse<CollectionItemDataList> getCollectionItems_0WithHttpInfo(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItems_0ValidateBeforeCall(id, page, perPage, shareCode, sort, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionItems_0Async(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItems_0ValidateBeforeCall(id, page, perPage, shareCode, sort, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionItems0RequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String shareCode;
        private String sort;

        private GetCollectionItems0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return GetCollectionItems0RequestBuilder
         */
        public GetCollectionItems0RequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return GetCollectionItems0RequestBuilder
         */
        public GetCollectionItems0RequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve the contents of a shared collection (optional)
         * @return GetCollectionItems0RequestBuilder
         */
        public GetCollectionItems0RequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to oldest)
         * @return GetCollectionItems0RequestBuilder
         */
        public GetCollectionItems0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getCollectionItems_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionItems_0Call(id, page, perPage, shareCode, sort, _callback);
        }


        /**
         * Execute getCollectionItems_0 request
         * @return CollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public CollectionItemDataList execute() throws ApiException {
            ApiResponse<CollectionItemDataList> localVarResp = getCollectionItems_0WithHttpInfo(id, page, perPage, shareCode, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionItems_0 request with HTTP info returned
         * @return ApiResponse&lt;CollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return getCollectionItems_0WithHttpInfo(id, page, perPage, shareCode, sort);
        }

        /**
         * Execute getCollectionItems_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionItemDataList> _callback) throws ApiException {
            return getCollectionItems_0Async(id, page, perPage, shareCode, sort, _callback);
        }
    }

    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @return GetCollectionItems0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionItems0RequestBuilder getCollectionItems_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCollectionItems0RequestBuilder(id);
    }
    private okhttp3.Call getDetailsCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        return getDetailsCall(id, language, view, searchId, _callback);

    }


    private ApiResponse<Image> getDetailsWithHttpInfo(String id, Language language, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, language, view, searchId, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String id, Language language, String view, String searchId, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, language, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String id;
        private Language language;
        private String view;
        private String searchId;

        private GetDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to full)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, language, view, searchId, _callback);
        }


        /**
         * Execute getDetails request
         * @return Image
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Image execute() throws ApiException {
            ApiResponse<Image> localVarResp = getDetailsWithHttpInfo(id, language, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Image&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Image> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id, language, view, searchId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Image> _callback) throws ApiException {
            return getDetailsAsync(id, language, view, searchId, _callback);
        }
    }

    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param id Image ID (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDetailsRequestBuilder(id);
    }
    private okhttp3.Call getSearchSuggestionsCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchSuggestionsValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSearchSuggestions(Async)");
        }

        return getSearchSuggestionsCall(query, limit, _callback);

    }


    private ApiResponse<Suggestions> getSearchSuggestionsWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getSearchSuggestionsValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSearchSuggestionsAsync(String query, Integer limit, final ApiCallback<Suggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchSuggestionsValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSearchSuggestionsRequestBuilder {
        private final String query;
        private Integer limit;

        private GetSearchSuggestionsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set limit
         * @param limit Limit the number of suggestions (optional, default to 10)
         * @return GetSearchSuggestionsRequestBuilder
         */
        public GetSearchSuggestionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getSearchSuggestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSearchSuggestionsCall(query, limit, _callback);
        }


        /**
         * Execute getSearchSuggestions request
         * @return Suggestions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Suggestions execute() throws ApiException {
            ApiResponse<Suggestions> localVarResp = getSearchSuggestionsWithHttpInfo(query, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSearchSuggestions request with HTTP info returned
         * @return ApiResponse&lt;Suggestions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Suggestions> executeWithHttpInfo() throws ApiException {
            return getSearchSuggestionsWithHttpInfo(query, limit);
        }

        /**
         * Execute getSearchSuggestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Suggestions> _callback) throws ApiException {
            return getSearchSuggestionsAsync(query, limit, _callback);
        }
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @return GetSearchSuggestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetSearchSuggestionsRequestBuilder getSearchSuggestions(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new GetSearchSuggestionsRequestBuilder(query);
    }
    private okhttp3.Call licenseImagesForMultipleCall(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseImageRequest;

        // create path and map variables
        String localVarPath = "/v2/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_id", subscriptionId));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseImagesForMultipleValidateBeforeCall(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseImageRequest' is set
        if (licenseImageRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseImageRequest' when calling licenseImagesForMultiple(Async)");
        }

        return licenseImagesForMultipleCall(licenseImageRequest, subscriptionId, format, size, searchId, _callback);

    }


    private ApiResponse<LicenseImageResultDataList> licenseImagesForMultipleWithHttpInfo(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId) throws ApiException {
        okhttp3.Call localVarCall = licenseImagesForMultipleValidateBeforeCall(licenseImageRequest, subscriptionId, format, size, searchId, null);
        Type localVarReturnType = new TypeToken<LicenseImageResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseImagesForMultipleAsync(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback<LicenseImageResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseImagesForMultipleValidateBeforeCall(licenseImageRequest, subscriptionId, format, size, searchId, _callback);
        Type localVarReturnType = new TypeToken<LicenseImageResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseImagesForMultipleRequestBuilder {
        private final List<VLicenseImage> images;
        private String subscriptionId;
        private String format;
        private String size;
        private String searchId;

        private LicenseImagesForMultipleRequestBuilder(List<VLicenseImage> images) {
            this.images = images;
        }

        /**
         * Set subscriptionId
         * @param subscriptionId Subscription ID to use to license the image (optional)
         * @return LicenseImagesForMultipleRequestBuilder
         */
        public LicenseImagesForMultipleRequestBuilder subscriptionId(String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        
        /**
         * Set format
         * @param format (Deprecated) Image format (optional)
         * @return LicenseImagesForMultipleRequestBuilder
         */
        public LicenseImagesForMultipleRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set size
         * @param size Image size (optional, default to huge)
         * @return LicenseImagesForMultipleRequestBuilder
         */
        public LicenseImagesForMultipleRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId Search ID that was provided in the results of an image search (optional)
         * @return LicenseImagesForMultipleRequestBuilder
         */
        public LicenseImagesForMultipleRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for licenseImagesForMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseImageRequest licenseImageRequest = buildBodyParams();
            return licenseImagesForMultipleCall(licenseImageRequest, subscriptionId, format, size, searchId, _callback);
        }

        private LicenseImageRequest buildBodyParams() {
            LicenseImageRequest licenseImageRequest = new LicenseImageRequest();
            licenseImageRequest.images(this.images);
            return licenseImageRequest;
        }

        /**
         * Execute licenseImagesForMultiple request
         * @return LicenseImageResultDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LicenseImageResultDataList execute() throws ApiException {
            LicenseImageRequest licenseImageRequest = buildBodyParams();
            ApiResponse<LicenseImageResultDataList> localVarResp = licenseImagesForMultipleWithHttpInfo(licenseImageRequest, subscriptionId, format, size, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseImagesForMultiple request with HTTP info returned
         * @return ApiResponse&lt;LicenseImageResultDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseImageResultDataList> executeWithHttpInfo() throws ApiException {
            LicenseImageRequest licenseImageRequest = buildBodyParams();
            return licenseImagesForMultipleWithHttpInfo(licenseImageRequest, subscriptionId, format, size, searchId);
        }

        /**
         * Execute licenseImagesForMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseImageResultDataList> _callback) throws ApiException {
            LicenseImageRequest licenseImageRequest = buildBodyParams();
            return licenseImagesForMultipleAsync(licenseImageRequest, subscriptionId, format, size, searchId, _callback);
        }
    }

    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @return LicenseImagesForMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseImagesForMultipleRequestBuilder licenseImagesForMultiple(List<VLicenseImage> images) throws IllegalArgumentException {
        if (images == null) throw new IllegalArgumentException("\"images\" is required but got null");
        return new LicenseImagesForMultipleRequestBuilder(images);
    }
    private okhttp3.Call listCategoriesCall(Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(Language language, final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(language, _callback);

    }


    private ApiResponse<CategoryDataList> listCategoriesWithHttpInfo(Language language) throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(Language language, final ApiCallback<CategoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {
        private Language language;

        private ListCategoriesRequestBuilder() {
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListCategoriesRequestBuilder
         */
        public ListCategoriesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(language, _callback);
        }


        /**
         * Execute listCategories request
         * @return CategoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CategoryDataList execute() throws ApiException {
            ApiResponse<CategoryDataList> localVarResp = listCategoriesWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;CategoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoryDataList> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo(language);
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoryDataList> _callback) throws ApiException {
            return listCategoriesAsync(language, _callback);
        }
    }

    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesRequestBuilder listCategories() throws IllegalArgumentException {
        return new ListCategoriesRequestBuilder();
    }
    private okhttp3.Call listCollectionsCall(List<String> embed, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionsValidateBeforeCall(List<String> embed, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listCollectionsCall(embed, page, perPage, _callback);

    }


    private ApiResponse<CollectionDataList> listCollectionsWithHttpInfo(List<String> embed, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(embed, page, perPage, null);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollectionsAsync(List<String> embed, Integer page, Integer perPage, final ApiCallback<CollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(embed, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCollectionsRequestBuilder {
        private List<String> embed;
        private Integer page;
        private Integer perPage;

        private ListCollectionsRequestBuilder() {
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollectionsCall(embed, page, perPage, _callback);
        }


        /**
         * Execute listCollections request
         * @return CollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionDataList execute() throws ApiException {
            ApiResponse<CollectionDataList> localVarResp = listCollectionsWithHttpInfo(embed, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCollections request with HTTP info returned
         * @return ApiResponse&lt;CollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionDataList> executeWithHttpInfo() throws ApiException {
            return listCollectionsWithHttpInfo(embed, page, perPage);
        }

        /**
         * Execute listCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionDataList> _callback) throws ApiException {
            return listCollectionsAsync(embed, page, perPage, _callback);
        }
    }

    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @return ListCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCollectionsRequestBuilder listCollections() throws IllegalArgumentException {
        return new ListCollectionsRequestBuilder();
    }
    private okhttp3.Call listFeaturedCollectionsCall(String embed, List<String> type, String assetHint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (assetHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_hint", assetHint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeaturedCollectionsValidateBeforeCall(String embed, List<String> type, String assetHint, final ApiCallback _callback) throws ApiException {
        return listFeaturedCollectionsCall(embed, type, assetHint, _callback);

    }


    private ApiResponse<FeaturedCollectionDataList> listFeaturedCollectionsWithHttpInfo(String embed, List<String> type, String assetHint) throws ApiException {
        okhttp3.Call localVarCall = listFeaturedCollectionsValidateBeforeCall(embed, type, assetHint, null);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeaturedCollectionsAsync(String embed, List<String> type, String assetHint, final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeaturedCollectionsValidateBeforeCall(embed, type, assetHint, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFeaturedCollectionsRequestBuilder {
        private String embed;
        private List<String> type;
        private String assetHint;

        private ListFeaturedCollectionsRequestBuilder() {
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return ListFeaturedCollectionsRequestBuilder
         */
        public ListFeaturedCollectionsRequestBuilder embed(String embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set type
         * @param type The types of collections to return (optional)
         * @return ListFeaturedCollectionsRequestBuilder
         */
        public ListFeaturedCollectionsRequestBuilder type(List<String> type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set assetHint
         * @param assetHint Cover image size (optional, default to 1x)
         * @return ListFeaturedCollectionsRequestBuilder
         */
        public ListFeaturedCollectionsRequestBuilder assetHint(String assetHint) {
            this.assetHint = assetHint;
            return this;
        }
        
        /**
         * Build call for listFeaturedCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeaturedCollectionsCall(embed, type, assetHint, _callback);
        }


        /**
         * Execute listFeaturedCollections request
         * @return FeaturedCollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public FeaturedCollectionDataList execute() throws ApiException {
            ApiResponse<FeaturedCollectionDataList> localVarResp = listFeaturedCollectionsWithHttpInfo(embed, type, assetHint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFeaturedCollections request with HTTP info returned
         * @return ApiResponse&lt;FeaturedCollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeaturedCollectionDataList> executeWithHttpInfo() throws ApiException {
            return listFeaturedCollectionsWithHttpInfo(embed, type, assetHint);
        }

        /**
         * Execute listFeaturedCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {
            return listFeaturedCollectionsAsync(embed, type, assetHint, _callback);
        }
    }

    /**
     * List featured image collections
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @return ListFeaturedCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListFeaturedCollectionsRequestBuilder listFeaturedCollections() throws IllegalArgumentException {
        return new ListFeaturedCollectionsRequestBuilder();
    }
    private okhttp3.Call listInfoCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInfoValidateBeforeCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listInfo(Async)");
        }

        return listInfoCall(id, view, searchId, _callback);

    }


    private ApiResponse<ImageDataList> listInfoWithHttpInfo(List<String> id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = listInfoValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<ImageDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInfoAsync(List<String> id, String view, String searchId, final ApiCallback<ImageDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInfoValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<ImageDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInfoRequestBuilder {
        private final List<String> id;
        private String view;
        private String searchId;

        private ListInfoRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListInfoRequestBuilder
         */
        public ListInfoRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return ListInfoRequestBuilder
         */
        public ListInfoRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for listInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInfoCall(id, view, searchId, _callback);
        }


        /**
         * Execute listInfo request
         * @return ImageDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ImageDataList execute() throws ApiException {
            ApiResponse<ImageDataList> localVarResp = listInfoWithHttpInfo(id, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInfo request with HTTP info returned
         * @return ApiResponse&lt;ImageDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageDataList> executeWithHttpInfo() throws ApiException {
            return listInfoWithHttpInfo(id, view, searchId);
        }

        /**
         * Execute listInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageDataList> _callback) throws ApiException {
            return listInfoAsync(id, view, searchId, _callback);
        }
    }

    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param id One or more image IDs (required)
     * @return ListInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListInfoRequestBuilder listInfo(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListInfoRequestBuilder(id);
    }
    private okhttp3.Call listLicensesCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicensesValidateBeforeCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listLicensesCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listLicensesWithHttpInfo(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLicensesAsync(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLicensesRequestBuilder {
        private String imageId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListLicensesRequestBuilder() {
        }

        /**
         * Set imageId
         * @param imageId Show licenses for the specified image ID (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder imageId(String imageId) {
            this.imageId = imageId;
            return this;
        }
        
        /**
         * Set license
         * @param license Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLicensesCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listLicensesWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listLicensesWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        }

        /**
         * Execute listLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listLicensesAsync(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @return ListLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListLicensesRequestBuilder listLicenses() throws IllegalArgumentException {
        return new ListLicensesRequestBuilder();
    }
    private okhttp3.Call listRecommendedImagesCall(List<String> id, Integer maxItems, Boolean safe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_items", maxItems));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecommendedImagesValidateBeforeCall(List<String> id, Integer maxItems, Boolean safe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listRecommendedImages(Async)");
        }

        return listRecommendedImagesCall(id, maxItems, safe, _callback);

    }


    private ApiResponse<RecommendationDataList> listRecommendedImagesWithHttpInfo(List<String> id, Integer maxItems, Boolean safe) throws ApiException {
        okhttp3.Call localVarCall = listRecommendedImagesValidateBeforeCall(id, maxItems, safe, null);
        Type localVarReturnType = new TypeToken<RecommendationDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecommendedImagesAsync(List<String> id, Integer maxItems, Boolean safe, final ApiCallback<RecommendationDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecommendedImagesValidateBeforeCall(id, maxItems, safe, _callback);
        Type localVarReturnType = new TypeToken<RecommendationDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecommendedImagesRequestBuilder {
        private final List<String> id;
        private Integer maxItems;
        private Boolean safe;

        private ListRecommendedImagesRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set maxItems
         * @param maxItems Maximum number of results returned in the response (optional, default to 20)
         * @return ListRecommendedImagesRequestBuilder
         */
        public ListRecommendedImagesRequestBuilder maxItems(Integer maxItems) {
            this.maxItems = maxItems;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Restrict results to safe images (optional, default to true)
         * @return ListRecommendedImagesRequestBuilder
         */
        public ListRecommendedImagesRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Build call for listRecommendedImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecommendedImagesCall(id, maxItems, safe, _callback);
        }


        /**
         * Execute listRecommendedImages request
         * @return RecommendationDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public RecommendationDataList execute() throws ApiException {
            ApiResponse<RecommendationDataList> localVarResp = listRecommendedImagesWithHttpInfo(id, maxItems, safe);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecommendedImages request with HTTP info returned
         * @return ApiResponse&lt;RecommendationDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecommendationDataList> executeWithHttpInfo() throws ApiException {
            return listRecommendedImagesWithHttpInfo(id, maxItems, safe);
        }

        /**
         * Execute listRecommendedImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecommendationDataList> _callback) throws ApiException {
            return listRecommendedImagesAsync(id, maxItems, safe, _callback);
        }
    }

    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param id Image IDs (required)
     * @return ListRecommendedImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRecommendedImagesRequestBuilder listRecommendedImages(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListRecommendedImagesRequestBuilder(id);
    }
    private okhttp3.Call listSimilarImagesCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/{id}/similar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimilarImagesValidateBeforeCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listSimilarImages(Async)");
        }

        return listSimilarImagesCall(id, language, page, perPage, view, _callback);

    }


    private ApiResponse<ImageSearchResults> listSimilarImagesWithHttpInfo(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(id, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSimilarImagesAsync(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(id, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSimilarImagesRequestBuilder {
        private final String id;
        private Language language;
        private Integer page;
        private Integer perPage;
        private String view;

        private ListSimilarImagesRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Build call for listSimilarImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSimilarImagesCall(id, language, page, perPage, view, _callback);
        }


        /**
         * Execute listSimilarImages request
         * @return ImageSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ImageSearchResults execute() throws ApiException {
            ApiResponse<ImageSearchResults> localVarResp = listSimilarImagesWithHttpInfo(id, language, page, perPage, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSimilarImages request with HTTP info returned
         * @return ApiResponse&lt;ImageSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageSearchResults> executeWithHttpInfo() throws ApiException {
            return listSimilarImagesWithHttpInfo(id, language, page, perPage, view);
        }

        /**
         * Execute listSimilarImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageSearchResults> _callback) throws ApiException {
            return listSimilarImagesAsync(id, language, page, perPage, view, _callback);
        }
    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param id Image ID (required)
     * @return ListSimilarImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListSimilarImagesRequestBuilder listSimilarImages(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListSimilarImagesRequestBuilder(id);
    }
    private okhttp3.Call listUpdatedContentCall(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpdatedContentValidateBeforeCall(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        return listUpdatedContentCall(type, startDate, endDate, interval, page, perPage, sort, _callback);

    }


    private ApiResponse<UpdatedMediaDataList> listUpdatedContentWithHttpInfo(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listUpdatedContentValidateBeforeCall(type, startDate, endDate, interval, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpdatedContentAsync(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpdatedContentValidateBeforeCall(type, startDate, endDate, interval, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpdatedContentRequestBuilder {
        private List<String> type;
        private LocalDate startDate;
        private LocalDate endDate;
        private String interval;
        private Integer page;
        private Integer perPage;
        private String sort;

        private ListUpdatedContentRequestBuilder() {
        }

        /**
         * Set type
         * @param type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder type(List<String> type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show images updated on or after the specified date (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show images updated before the specified date (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (optional, default to 1 HOUR)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listUpdatedContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpdatedContentCall(type, startDate, endDate, interval, page, perPage, sort, _callback);
        }


        /**
         * Execute listUpdatedContent request
         * @return UpdatedMediaDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UpdatedMediaDataList execute() throws ApiException {
            ApiResponse<UpdatedMediaDataList> localVarResp = listUpdatedContentWithHttpInfo(type, startDate, endDate, interval, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpdatedContent request with HTTP info returned
         * @return ApiResponse&lt;UpdatedMediaDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatedMediaDataList> executeWithHttpInfo() throws ApiException {
            return listUpdatedContentWithHttpInfo(type, startDate, endDate, interval, page, perPage, sort);
        }

        /**
         * Execute listUpdatedContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {
            return listUpdatedContentAsync(type, startDate, endDate, interval, page, perPage, sort, _callback);
        }
    }

    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show images that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @return ListUpdatedContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUpdatedContentRequestBuilder listUpdatedContent() throws IllegalArgumentException {
        return new ListUpdatedContentRequestBuilder();
    }
    private okhttp3.Call redownloadLicenseCall(String id, RedownloadImage redownloadImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redownloadImage;

        // create path and map variables
        String localVarPath = "/v2/images/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redownloadLicenseValidateBeforeCall(String id, RedownloadImage redownloadImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling redownloadLicense(Async)");
        }

        // verify the required parameter 'redownloadImage' is set
        if (redownloadImage == null) {
            throw new ApiException("Missing the required parameter 'redownloadImage' when calling redownloadLicense(Async)");
        }

        return redownloadLicenseCall(id, redownloadImage, _callback);

    }


    private ApiResponse<Url> redownloadLicenseWithHttpInfo(String id, RedownloadImage redownloadImage) throws ApiException {
        okhttp3.Call localVarCall = redownloadLicenseValidateBeforeCall(id, redownloadImage, null);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redownloadLicenseAsync(String id, RedownloadImage redownloadImage, final ApiCallback<Url> _callback) throws ApiException {

        okhttp3.Call localVarCall = redownloadLicenseValidateBeforeCall(id, redownloadImage, _callback);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedownloadLicenseRequestBuilder {
        private final String id;
        private Cookie authCookie;
        private Boolean showModal;
        private String size;
        private String verificationCode;

        private RedownloadLicenseRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set authCookie
         * @param authCookie  (optional)
         * @return RedownloadLicenseRequestBuilder
         */
        public RedownloadLicenseRequestBuilder authCookie(Cookie authCookie) {
            this.authCookie = authCookie;
            return this;
        }
        
        /**
         * Set showModal
         * @param showModal (Deprecated) (optional)
         * @return RedownloadLicenseRequestBuilder
         */
        public RedownloadLicenseRequestBuilder showModal(Boolean showModal) {
            this.showModal = showModal;
            return this;
        }
        
        /**
         * Set size
         * @param size Size of the image (optional)
         * @return RedownloadLicenseRequestBuilder
         */
        public RedownloadLicenseRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set verificationCode
         * @param verificationCode (Deprecated) (optional)
         * @return RedownloadLicenseRequestBuilder
         */
        public RedownloadLicenseRequestBuilder verificationCode(String verificationCode) {
            this.verificationCode = verificationCode;
            return this;
        }
        
        /**
         * Build call for redownloadLicense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RedownloadImage redownloadImage = buildBodyParams();
            return redownloadLicenseCall(id, redownloadImage, _callback);
        }

        private RedownloadImage buildBodyParams() {
            RedownloadImage redownloadImage = new RedownloadImage();
            redownloadImage.authCookie(this.authCookie);
            redownloadImage.showModal(this.showModal);
            if (this.size != null)
            redownloadImage.size(RedownloadImage.SizeEnum.fromValue(this.size));
            redownloadImage.verificationCode(this.verificationCode);
            return redownloadImage;
        }

        /**
         * Execute redownloadLicense request
         * @return Url
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Url execute() throws ApiException {
            RedownloadImage redownloadImage = buildBodyParams();
            ApiResponse<Url> localVarResp = redownloadLicenseWithHttpInfo(id, redownloadImage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redownloadLicense request with HTTP info returned
         * @return ApiResponse&lt;Url&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Url> executeWithHttpInfo() throws ApiException {
            RedownloadImage redownloadImage = buildBodyParams();
            return redownloadLicenseWithHttpInfo(id, redownloadImage);
        }

        /**
         * Execute redownloadLicense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Url> _callback) throws ApiException {
            RedownloadImage redownloadImage = buildBodyParams();
            return redownloadLicenseAsync(id, redownloadImage, _callback);
        }
    }

    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @param redownloadImage Information about the images to redownload (required)
     * @return RedownloadLicenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RedownloadLicenseRequestBuilder redownloadLicense(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RedownloadLicenseRequestBuilder(id);
    }
    private okhttp3.Call removeFromCollectionCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_id", itemId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromCollectionValidateBeforeCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFromCollection(Async)");
        }

        return removeFromCollectionCall(id, itemId, _callback);

    }


    private ApiResponse<Void> removeFromCollectionWithHttpInfo(String id, List<String> itemId) throws ApiException {
        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(id, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromCollectionAsync(String id, List<String> itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(id, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromCollectionRequestBuilder {
        private final String id;
        private List<String> itemId;

        private RemoveFromCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set itemId
         * @param itemId One or more image IDs to remove from the collection (optional)
         * @return RemoveFromCollectionRequestBuilder
         */
        public RemoveFromCollectionRequestBuilder itemId(List<String> itemId) {
            this.itemId = itemId;
            return this;
        }
        
        /**
         * Build call for removeFromCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromCollectionCall(id, itemId, _callback);
        }


        /**
         * Execute removeFromCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeFromCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeFromCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromCollectionAsync(id, itemId, _callback);
        }
    }

    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param id Collection ID (required)
     * @return RemoveFromCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromCollectionRequestBuilder removeFromCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveFromCollectionRequestBuilder(id);
    }
    private okhttp3.Call renameCollectionCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameCollectionValidateBeforeCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renameCollection(Async)");
        }

        // verify the required parameter 'collectionUpdateRequest' is set
        if (collectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionUpdateRequest' when calling renameCollection(Async)");
        }

        return renameCollectionCall(id, collectionUpdateRequest, _callback);

    }


    private ApiResponse<Void> renameCollectionWithHttpInfo(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = renameCollectionValidateBeforeCall(id, collectionUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call renameCollectionAsync(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameCollectionValidateBeforeCall(id, collectionUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RenameCollectionRequestBuilder {
        private final String name;
        private final String id;

        private RenameCollectionRequestBuilder(String name, String id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Build call for renameCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return renameCollectionCall(id, collectionUpdateRequest, _callback);
        }

        private CollectionUpdateRequest buildBodyParams() {
            CollectionUpdateRequest collectionUpdateRequest = new CollectionUpdateRequest();
            collectionUpdateRequest.name(this.name);
            return collectionUpdateRequest;
        }

        /**
         * Execute renameCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            renameCollectionWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute renameCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return renameCollectionWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute renameCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return renameCollectionAsync(id, collectionUpdateRequest, _callback);
        }
    }

    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param id Collection ID (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @return RenameCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public RenameCollectionRequestBuilder renameCollection(String name, String id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RenameCollectionRequestBuilder(name, id);
    }
    private okhttp3.Call runMultipleSearchesCall(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchImage;

        // create path and map variables
        String localVarPath = "/v2/bulk_search/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (aspectRatioMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_min", aspectRatioMin));
        }

        if (aspectRatioMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_max", aspectRatioMax));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_country", contributorCountry));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (heightFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_from", heightFrom));
        }

        if (heightTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_to", heightTo));
        }

        if (imageType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_type", imageType));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (orientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orientation", orientation));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (spellcheckQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcheck_query", spellcheckQuery));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (widthFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_from", widthFrom));
        }

        if (widthTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_to", widthTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runMultipleSearchesValidateBeforeCall(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchImage' is set
        if (searchImage == null) {
            throw new ApiException("Missing the required parameter 'searchImage' when calling runMultipleSearches(Async)");
        }

        return runMultipleSearchesCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);

    }


    private ApiResponse<BulkImageSearchResults> runMultipleSearchesWithHttpInfo(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        okhttp3.Call localVarCall = runMultipleSearchesValidateBeforeCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, null);
        Type localVarReturnType = new TypeToken<BulkImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runMultipleSearchesAsync(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback<BulkImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = runMultipleSearchesValidateBeforeCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        Type localVarReturnType = new TypeToken<BulkImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RunMultipleSearchesRequestBuilder {
        private LocalDate addedDate;
        private LocalDate addedDateStart;
        private Double aspectRatioMin;
        private Double aspectRatioMax;
        private Double aspectRatio;
        private LocalDate addedDateEnd;
        private String category;
        private String color;
        private List<String> contributor;
        private Object contributorCountry;
        private String fields;
        private Integer height;
        private Integer heightFrom;
        private Integer heightTo;
        private List<String> imageType;
        private Boolean keywordSafeSearch;
        private Language language;
        private List<String> license;
        private List<String> model;
        private String orientation;
        private Integer page;
        private Integer perPage;
        private Boolean peopleModelReleased;
        private String peopleAge;
        private List<String> peopleEthnicity;
        private String peopleGender;
        private Integer peopleNumber;
        private String region;
        private Boolean safe;
        private String sort;
        private Boolean spellcheckQuery;
        private String view;
        private Integer width;
        private Integer widthFrom;
        private Integer widthTo;
        private List<SearchImage> searchImage;

        private RunMultipleSearchesRequestBuilder() {
        }

        /**
         * Set searchImage
         * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder searchImage(List<SearchImage> searchImage) {
            this.searchImage = searchImage;
            return this;
        }

        /**
         * Set addedDate
         * @param addedDate Show images added on the specified date (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder addedDate(LocalDate addedDate) {
            this.addedDate = addedDate;
            return this;
        }
        
        /**
         * Set addedDateStart
         * @param addedDateStart Show images added on or after the specified date (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder addedDateStart(LocalDate addedDateStart) {
            this.addedDateStart = addedDateStart;
            return this;
        }
        
        /**
         * Set aspectRatioMin
         * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder aspectRatioMin(Double aspectRatioMin) {
            this.aspectRatioMin = aspectRatioMin;
            return this;
        }
        
        /**
         * Set aspectRatioMax
         * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder aspectRatioMax(Double aspectRatioMax) {
            this.aspectRatioMax = aspectRatioMax;
            return this;
        }
        
        /**
         * Set aspectRatio
         * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder aspectRatio(Double aspectRatio) {
            this.aspectRatio = aspectRatio;
            return this;
        }
        
        /**
         * Set addedDateEnd
         * @param addedDateEnd Show images added before the specified date (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder addedDateEnd(LocalDate addedDateEnd) {
            this.addedDateEnd = addedDateEnd;
            return this;
        }
        
        /**
         * Set category
         * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set color
         * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set contributor
         * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder contributor(List<String> contributor) {
            this.contributor = contributor;
            return this;
        }
        
        /**
         * Set contributorCountry
         * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder contributorCountry(Object contributorCountry) {
            this.contributorCountry = contributorCountry;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set height
         * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set heightFrom
         * @param heightFrom Show images with the specified height or larger, in pixels (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder heightFrom(Integer heightFrom) {
            this.heightFrom = heightFrom;
            return this;
        }
        
        /**
         * Set heightTo
         * @param heightTo Show images with the specified height or smaller, in pixels (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder heightTo(Integer heightTo) {
            this.heightTo = heightTo;
            return this;
        }
        
        /**
         * Set imageType
         * @param imageType Show images of the specified type (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder imageType(List<String> imageType) {
            this.imageType = imageType;
            return this;
        }
        
        /**
         * Set keywordSafeSearch
         * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder keywordSafeSearch(Boolean keywordSafeSearch) {
            this.keywordSafeSearch = keywordSafeSearch;
            return this;
        }
        
        /**
         * Set language
         * @param language Set query and result language (uses Accept-Language header if not set) (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set license
         * @param license Show only images with the specified license (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder license(List<String> license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set model
         * @param model Show image results with the specified model IDs (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder model(List<String> model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set orientation
         * @param orientation Show image results with horizontal or vertical orientation (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder orientation(String orientation) {
            this.orientation = orientation;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set peopleModelReleased
         * @param peopleModelReleased Show images of people with a signed model release (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder peopleModelReleased(Boolean peopleModelReleased) {
            this.peopleModelReleased = peopleModelReleased;
            return this;
        }
        
        /**
         * Set peopleAge
         * @param peopleAge Show images that feature people of the specified age category (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder peopleAge(String peopleAge) {
            this.peopleAge = peopleAge;
            return this;
        }
        
        /**
         * Set peopleEthnicity
         * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder peopleEthnicity(List<String> peopleEthnicity) {
            this.peopleEthnicity = peopleEthnicity;
            return this;
        }
        
        /**
         * Set peopleGender
         * @param peopleGender Show images with people of the specified gender (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder peopleGender(String peopleGender) {
            this.peopleGender = peopleGender;
            return this;
        }
        
        /**
         * Set peopleNumber
         * @param peopleNumber Show images with the specified number of people (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder peopleNumber(Integer peopleNumber) {
            this.peopleNumber = peopleNumber;
            return this;
        }
        
        /**
         * Set region
         * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder region(String region) {
            this.region = region;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to popular)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set spellcheckQuery
         * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder spellcheckQuery(Boolean spellcheckQuery) {
            this.spellcheckQuery = spellcheckQuery;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set width
         * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set widthFrom
         * @param widthFrom Show images with the specified width or larger, in pixels (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder widthFrom(Integer widthFrom) {
            this.widthFrom = widthFrom;
            return this;
        }
        
        /**
         * Set widthTo
         * @param widthTo Show images with the specified width or smaller, in pixels (optional)
         * @return RunMultipleSearchesRequestBuilder
         */
        public RunMultipleSearchesRequestBuilder widthTo(Integer widthTo) {
            this.widthTo = widthTo;
            return this;
        }
        
        /**
         * Build call for runMultipleSearches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<SearchImage> searchImage = buildBodyParams();
            return runMultipleSearchesCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        }

        private List<SearchImage> buildBodyParams() {
            return this.searchImage;
        }

        /**
         * Execute runMultipleSearches request
         * @return BulkImageSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BulkImageSearchResults execute() throws ApiException {
            List<SearchImage> searchImage = buildBodyParams();
            ApiResponse<BulkImageSearchResults> localVarResp = runMultipleSearchesWithHttpInfo(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute runMultipleSearches request with HTTP info returned
         * @return ApiResponse&lt;BulkImageSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkImageSearchResults> executeWithHttpInfo() throws ApiException {
            List<SearchImage> searchImage = buildBodyParams();
            return runMultipleSearchesWithHttpInfo(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        }

        /**
         * Execute runMultipleSearches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkImageSearchResults> _callback) throws ApiException {
            List<SearchImage> searchImage = buildBodyParams();
            return runMultipleSearchesAsync(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        }
    }

    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the &#x60;GET /v2/images/search&#x60; endpoint.
     * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (required)
     * @return RunMultipleSearchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RunMultipleSearchesRequestBuilder runMultipleSearches() throws IllegalArgumentException {
        return new RunMultipleSearchesRequestBuilder();
    }
    private okhttp3.Call searchImagesCall(LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (aspectRatioMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_min", aspectRatioMin));
        }

        if (aspectRatioMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_max", aspectRatioMax));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (aiSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_search", aiSearch));
        }

        if (aiLabelsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_labels_limit", aiLabelsLimit));
        }

        if (aiIndustry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_industry", aiIndustry));
        }

        if (aiObjective != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_objective", aiObjective));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_country", contributorCountry));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (heightFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_from", heightFrom));
        }

        if (heightTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_to", heightTo));
        }

        if (imageType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_type", imageType));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (orientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orientation", orientation));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (spellcheckQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcheck_query", spellcheckQuery));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (widthFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_from", widthFrom));
        }

        if (widthTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_to", widthTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchImagesValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        return searchImagesCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);

    }


    private ApiResponse<ImageSearchResults> searchImagesWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        okhttp3.Call localVarCall = searchImagesValidateBeforeCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchImagesAsync(LocalDate addedDate, LocalDate addedDateStart, Double aspectRatioMin, Double aspectRatioMax, Double aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, Object contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, String region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchImagesValidateBeforeCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchImagesRequestBuilder {
        private LocalDate addedDate;
        private LocalDate addedDateStart;
        private Double aspectRatioMin;
        private Double aspectRatioMax;
        private Double aspectRatio;
        private Boolean aiSearch;
        private Integer aiLabelsLimit;
        private String aiIndustry;
        private String aiObjective;
        private LocalDate addedDateEnd;
        private String category;
        private String color;
        private List<String> contributor;
        private Object contributorCountry;
        private String fields;
        private Integer height;
        private Integer heightFrom;
        private Integer heightTo;
        private List<String> imageType;
        private Boolean keywordSafeSearch;
        private Language language;
        private List<String> license;
        private List<String> model;
        private String orientation;
        private Integer page;
        private Integer perPage;
        private Boolean peopleModelReleased;
        private String peopleAge;
        private List<String> peopleEthnicity;
        private String peopleGender;
        private Integer peopleNumber;
        private String query;
        private String region;
        private Boolean safe;
        private String sort;
        private Boolean spellcheckQuery;
        private String view;
        private Integer width;
        private Integer widthFrom;
        private Integer widthTo;

        private SearchImagesRequestBuilder() {
        }

        /**
         * Set addedDate
         * @param addedDate Show images added on the specified date (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder addedDate(LocalDate addedDate) {
            this.addedDate = addedDate;
            return this;
        }
        
        /**
         * Set addedDateStart
         * @param addedDateStart Show images added on or after the specified date (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder addedDateStart(LocalDate addedDateStart) {
            this.addedDateStart = addedDateStart;
            return this;
        }
        
        /**
         * Set aspectRatioMin
         * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aspectRatioMin(Double aspectRatioMin) {
            this.aspectRatioMin = aspectRatioMin;
            return this;
        }
        
        /**
         * Set aspectRatioMax
         * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aspectRatioMax(Double aspectRatioMax) {
            this.aspectRatioMax = aspectRatioMax;
            return this;
        }
        
        /**
         * Set aspectRatio
         * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aspectRatio(Double aspectRatio) {
            this.aspectRatio = aspectRatio;
            return this;
        }
        
        /**
         * Set aiSearch
         * @param aiSearch Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry  (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aiSearch(Boolean aiSearch) {
            this.aiSearch = aiSearch;
            return this;
        }
        
        /**
         * Set aiLabelsLimit
         * @param aiLabelsLimit For AI-powered search, specify the maximum number of labels to return (optional, default to 20)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aiLabelsLimit(Integer aiLabelsLimit) {
            this.aiLabelsLimit = aiLabelsLimit;
            return this;
        }
        
        /**
         * Set aiIndustry
         * @param aiIndustry For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aiIndustry(String aiIndustry) {
            this.aiIndustry = aiIndustry;
            return this;
        }
        
        /**
         * Set aiObjective
         * @param aiObjective For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder aiObjective(String aiObjective) {
            this.aiObjective = aiObjective;
            return this;
        }
        
        /**
         * Set addedDateEnd
         * @param addedDateEnd Show images added before the specified date (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder addedDateEnd(LocalDate addedDateEnd) {
            this.addedDateEnd = addedDateEnd;
            return this;
        }
        
        /**
         * Set category
         * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set color
         * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set contributor
         * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder contributor(List<String> contributor) {
            this.contributor = contributor;
            return this;
        }
        
        /**
         * Set contributorCountry
         * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder contributorCountry(Object contributorCountry) {
            this.contributorCountry = contributorCountry;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set height
         * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder height(Integer height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set heightFrom
         * @param heightFrom Show images with the specified height or larger, in pixels (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder heightFrom(Integer heightFrom) {
            this.heightFrom = heightFrom;
            return this;
        }
        
        /**
         * Set heightTo
         * @param heightTo Show images with the specified height or smaller, in pixels (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder heightTo(Integer heightTo) {
            this.heightTo = heightTo;
            return this;
        }
        
        /**
         * Set imageType
         * @param imageType Show images of the specified type (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder imageType(List<String> imageType) {
            this.imageType = imageType;
            return this;
        }
        
        /**
         * Set keywordSafeSearch
         * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder keywordSafeSearch(Boolean keywordSafeSearch) {
            this.keywordSafeSearch = keywordSafeSearch;
            return this;
        }
        
        /**
         * Set language
         * @param language Set query and result language (uses Accept-Language header if not set) (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set license
         * @param license Show only images with the specified license (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder license(List<String> license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set model
         * @param model Show image results with the specified model IDs (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder model(List<String> model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set orientation
         * @param orientation Show image results with horizontal or vertical orientation (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder orientation(String orientation) {
            this.orientation = orientation;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set peopleModelReleased
         * @param peopleModelReleased Show images of people with a signed model release (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder peopleModelReleased(Boolean peopleModelReleased) {
            this.peopleModelReleased = peopleModelReleased;
            return this;
        }
        
        /**
         * Set peopleAge
         * @param peopleAge Show images that feature people of the specified age category (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder peopleAge(String peopleAge) {
            this.peopleAge = peopleAge;
            return this;
        }
        
        /**
         * Set peopleEthnicity
         * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder peopleEthnicity(List<String> peopleEthnicity) {
            this.peopleEthnicity = peopleEthnicity;
            return this;
        }
        
        /**
         * Set peopleGender
         * @param peopleGender Show images with people of the specified gender (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder peopleGender(String peopleGender) {
            this.peopleGender = peopleGender;
            return this;
        }
        
        /**
         * Set peopleNumber
         * @param peopleNumber Show images with the specified number of people (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder peopleNumber(Integer peopleNumber) {
            this.peopleNumber = peopleNumber;
            return this;
        }
        
        /**
         * Set query
         * @param query One or more search terms separated by spaces; you can use NOT to filter out images that match a term (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set region
         * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder region(String region) {
            this.region = region;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to popular)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set spellcheckQuery
         * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder spellcheckQuery(Boolean spellcheckQuery) {
            this.spellcheckQuery = spellcheckQuery;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set width
         * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder width(Integer width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set widthFrom
         * @param widthFrom Show images with the specified width or larger, in pixels (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder widthFrom(Integer widthFrom) {
            this.widthFrom = widthFrom;
            return this;
        }
        
        /**
         * Set widthTo
         * @param widthTo Show images with the specified width or smaller, in pixels (optional)
         * @return SearchImagesRequestBuilder
         */
        public SearchImagesRequestBuilder widthTo(Integer widthTo) {
            this.widthTo = widthTo;
            return this;
        }
        
        /**
         * Build call for searchImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchImagesCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        }


        /**
         * Execute searchImages request
         * @return ImageSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ImageSearchResults execute() throws ApiException {
            ApiResponse<ImageSearchResults> localVarResp = searchImagesWithHttpInfo(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchImages request with HTTP info returned
         * @return ApiResponse&lt;ImageSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageSearchResults> executeWithHttpInfo() throws ApiException {
            return searchImagesWithHttpInfo(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        }

        /**
         * Execute searchImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageSearchResults> _callback) throws ApiException {
            return searchImagesAsync(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        }
    }

    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @return SearchImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchImagesRequestBuilder searchImages() throws IllegalArgumentException {
        return new SearchImagesRequestBuilder();
    }
}
