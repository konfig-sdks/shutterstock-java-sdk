/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.EditorialVideoCategoryResults;
import com.konfigthis.client.model.EditorialVideoContent;
import com.konfigthis.client.model.EditorialVideoSearchResults;
import com.konfigthis.client.model.LicenseEditorialContentResults;
import com.konfigthis.client.model.LicenseEditorialVideoContent;
import com.konfigthis.client.model.LicenseEditorialVideoContentRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EditorialVideoApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EditorialVideoApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EditorialVideoApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getContentDetailsCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/videos/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDetailsValidateBeforeCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentDetails(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getContentDetails(Async)");
        }

        return getContentDetailsCall(id, country, searchId, _callback);

    }


    private ApiResponse<EditorialVideoContent> getContentDetailsWithHttpInfo(String id, String country, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getContentDetailsValidateBeforeCall(id, country, searchId, null);
        Type localVarReturnType = new TypeToken<EditorialVideoContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentDetailsAsync(String id, String country, String searchId, final ApiCallback<EditorialVideoContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentDetailsValidateBeforeCall(id, country, searchId, _callback);
        Type localVarReturnType = new TypeToken<EditorialVideoContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentDetailsRequestBuilder {
        private final String id;
        private final String country;
        private String searchId;

        private GetContentDetailsRequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return GetContentDetailsRequestBuilder
         */
        public GetContentDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for getContentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentDetailsCall(id, country, searchId, _callback);
        }


        /**
         * Execute getContentDetails request
         * @return EditorialVideoContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public EditorialVideoContent execute() throws ApiException {
            ApiResponse<EditorialVideoContent> localVarResp = getContentDetailsWithHttpInfo(id, country, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentDetails request with HTTP info returned
         * @return ApiResponse&lt;EditorialVideoContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialVideoContent> executeWithHttpInfo() throws ApiException {
            return getContentDetailsWithHttpInfo(id, country, searchId);
        }

        /**
         * Execute getContentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialVideoContent> _callback) throws ApiException {
            return getContentDetailsAsync(id, country, searchId, _callback);
        }
    }

    /**
     * Get editorial video content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @return GetContentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public GetContentDetailsRequestBuilder getContentDetails(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetContentDetailsRequestBuilder(id, country);
    }
    private okhttp3.Call licenseVideosCall(LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEditorialVideoContentRequest;

        // create path and map variables
        String localVarPath = "/v2/editorial/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseVideosValidateBeforeCall(LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseEditorialVideoContentRequest' is set
        if (licenseEditorialVideoContentRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseEditorialVideoContentRequest' when calling licenseVideos(Async)");
        }

        return licenseVideosCall(licenseEditorialVideoContentRequest, _callback);

    }


    private ApiResponse<LicenseEditorialContentResults> licenseVideosWithHttpInfo(LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseEditorialVideoContentRequest, null);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseVideosAsync(LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest, final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseEditorialVideoContentRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseVideosRequestBuilder {
        private final Object country;
        private final List<LicenseEditorialVideoContent> editorial;

        private LicenseVideosRequestBuilder(Object country, List<LicenseEditorialVideoContent> editorial) {
            this.country = country;
            this.editorial = editorial;
        }

        /**
         * Build call for licenseVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = buildBodyParams();
            return licenseVideosCall(licenseEditorialVideoContentRequest, _callback);
        }

        private LicenseEditorialVideoContentRequest buildBodyParams() {
            LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = new LicenseEditorialVideoContentRequest();
            licenseEditorialVideoContentRequest.country(this.country);
            licenseEditorialVideoContentRequest.editorial(this.editorial);
            return licenseEditorialVideoContentRequest;
        }

        /**
         * Execute licenseVideos request
         * @return LicenseEditorialContentResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LicenseEditorialContentResults execute() throws ApiException {
            LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = buildBodyParams();
            ApiResponse<LicenseEditorialContentResults> localVarResp = licenseVideosWithHttpInfo(licenseEditorialVideoContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseVideos request with HTTP info returned
         * @return ApiResponse&lt;LicenseEditorialContentResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseEditorialContentResults> executeWithHttpInfo() throws ApiException {
            LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = buildBodyParams();
            return licenseVideosWithHttpInfo(licenseEditorialVideoContentRequest);
        }

        /**
         * Execute licenseVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {
            LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = buildBodyParams();
            return licenseVideosAsync(licenseEditorialVideoContentRequest, _callback);
        }
    }

    /**
     * License editorial video content
     * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialVideoContentRequest License editorial video content (required)
     * @return LicenseVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseVideosRequestBuilder licenseVideos(Object country, List<LicenseEditorialVideoContent> editorial) throws IllegalArgumentException {
        
        if (editorial == null) throw new IllegalArgumentException("\"editorial\" is required but got null");
        return new LicenseVideosRequestBuilder(country, editorial);
    }
    private okhttp3.Call listVideoCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/videos/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVideoCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listVideoCategoriesCall(_callback);

    }


    private ApiResponse<EditorialVideoCategoryResults> listVideoCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listVideoCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EditorialVideoCategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVideoCategoriesAsync(final ApiCallback<EditorialVideoCategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVideoCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EditorialVideoCategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVideoCategoriesRequestBuilder {

        private ListVideoCategoriesRequestBuilder() {
        }

        /**
         * Build call for listVideoCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVideoCategoriesCall(_callback);
        }


        /**
         * Execute listVideoCategories request
         * @return EditorialVideoCategoryResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EditorialVideoCategoryResults execute() throws ApiException {
            ApiResponse<EditorialVideoCategoryResults> localVarResp = listVideoCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVideoCategories request with HTTP info returned
         * @return ApiResponse&lt;EditorialVideoCategoryResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialVideoCategoryResults> executeWithHttpInfo() throws ApiException {
            return listVideoCategoriesWithHttpInfo();
        }

        /**
         * Execute listVideoCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialVideoCategoryResults> _callback) throws ApiException {
            return listVideoCategoriesAsync(_callback);
        }
    }

    /**
     * List editorial video categories
     * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
     * @return ListVideoCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListVideoCategoriesRequestBuilder listVideoCategories() throws IllegalArgumentException {
        return new ListVideoCategoriesRequestBuilder();
    }
    private okhttp3.Call listVideoLicensesCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("video_id", videoId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVideoLicensesValidateBeforeCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listVideoLicensesCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listVideoLicensesWithHttpInfo(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listVideoLicensesValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVideoLicensesAsync(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVideoLicensesValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVideoLicensesRequestBuilder {
        private String videoId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListVideoLicensesRequestBuilder() {
        }

        /**
         * Set videoId
         * @param videoId Show licenses for the specified editorial video ID (optional)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder videoId(String videoId) {
            this.videoId = videoId;
            return this;
        }
        
        /**
         * Set license
         * @param license Show editorial videos that are available with the specified license name (optional)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListVideoLicensesRequestBuilder
         */
        public ListVideoLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listVideoLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVideoLicensesCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listVideoLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listVideoLicensesWithHttpInfo(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVideoLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listVideoLicensesWithHttpInfo(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        }

        /**
         * Execute listVideoLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listVideoLicensesAsync(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List editorial video licenses
     * This endpoint lists existing editorial video licenses.
     * @return ListVideoLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListVideoLicensesRequestBuilder listVideoLicenses() throws IllegalArgumentException {
        return new ListVideoLicensesRequestBuilder();
    }
    private okhttp3.Call searchVideoContentCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, String resolution, Double fps, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/videos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        if (fps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps", fps));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVideoContentValidateBeforeCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, String resolution, Double fps, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling searchVideoContent(Async)");
        }

        return searchVideoContentCall(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor, _callback);

    }


    private ApiResponse<EditorialVideoSearchResults> searchVideoContentWithHttpInfo(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, String resolution, Double fps, Integer perPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = searchVideoContentValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor, null);
        Type localVarReturnType = new TypeToken<EditorialVideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchVideoContentAsync(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, String resolution, Double fps, Integer perPage, String cursor, final ApiCallback<EditorialVideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVideoContentValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<EditorialVideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchVideoContentRequestBuilder {
        private final String country;
        private String query;
        private String sort;
        private String category;
        private List<String> supplierCode;
        private LocalDate dateStart;
        private LocalDate dateEnd;
        private String resolution;
        private Double fps;
        private Integer perPage;
        private String cursor;

        private SearchVideoContentRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to relevant)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set category
         * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set supplierCode
         * @param supplierCode Show only editorial video content from certain suppliers (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder supplierCode(List<String> supplierCode) {
            this.supplierCode = supplierCode;
            return this;
        }
        
        /**
         * Set dateStart
         * @param dateStart Show only editorial video content generated on or after a specific date (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder dateStart(LocalDate dateStart) {
            this.dateStart = dateStart;
            return this;
        }
        
        /**
         * Set dateEnd
         * @param dateEnd Show only editorial video content generated on or before a specific date (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder dateEnd(LocalDate dateEnd) {
            this.dateEnd = dateEnd;
            return this;
        }
        
        /**
         * Set resolution
         * @param resolution Show only editorial video content with specific resolution (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder resolution(String resolution) {
            this.resolution = resolution;
            return this;
        }
        
        /**
         * Set fps
         * @param fps Show only editorial video content generated with specific frames per second (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder fps(Double fps) {
            this.fps = fps;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
         * @return SearchVideoContentRequestBuilder
         */
        public SearchVideoContentRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for searchVideoContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchVideoContentCall(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor, _callback);
        }


        /**
         * Execute searchVideoContent request
         * @return EditorialVideoSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public EditorialVideoSearchResults execute() throws ApiException {
            ApiResponse<EditorialVideoSearchResults> localVarResp = searchVideoContentWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchVideoContent request with HTTP info returned
         * @return ApiResponse&lt;EditorialVideoSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialVideoSearchResults> executeWithHttpInfo() throws ApiException {
            return searchVideoContentWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor);
        }

        /**
         * Execute searchVideoContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialVideoSearchResults> _callback) throws ApiException {
            return searchVideoContentAsync(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor, _callback);
        }
    }

    /**
     * Search editorial video content
     * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param country Show only editorial video content that is available for distribution in a certain country (required)
     * @return SearchVideoContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public SearchVideoContentRequestBuilder searchVideoContent(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new SearchVideoContentRequestBuilder(country);
    }
}
