/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OauthAccessTokenResponse;
import com.konfigthis.client.model.OauthGetUserAccessTokenRequest;
import com.konfigthis.client.model.OauthGetUserAccessTokenRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OauthApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authorizeApplicationsCall(String clientId, String redirectUri, String responseType, String state, String realm, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/oauth/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (realm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("realm", realm));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeApplicationsValidateBeforeCall(String clientId, String redirectUri, String responseType, String state, String realm, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorizeApplications(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling authorizeApplications(Async)");
        }

        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling authorizeApplications(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling authorizeApplications(Async)");
        }

        return authorizeApplicationsCall(clientId, redirectUri, responseType, state, realm, scope, _callback);

    }


    private ApiResponse<Void> authorizeApplicationsWithHttpInfo(String clientId, String redirectUri, String responseType, String state, String realm, String scope) throws ApiException {
        okhttp3.Call localVarCall = authorizeApplicationsValidateBeforeCall(clientId, redirectUri, responseType, state, realm, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call authorizeApplicationsAsync(String clientId, String redirectUri, String responseType, String state, String realm, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeApplicationsValidateBeforeCall(clientId, redirectUri, responseType, state, realm, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AuthorizeApplicationsRequestBuilder {
        private final String clientId;
        private final String redirectUri;
        private final String responseType;
        private final String state;
        private String realm;
        private String scope;

        private AuthorizeApplicationsRequestBuilder(String clientId, String redirectUri, String responseType, String state) {
            this.clientId = clientId;
            this.redirectUri = redirectUri;
            this.responseType = responseType;
            this.state = state;
        }

        /**
         * Set realm
         * @param realm User type to be authorized (usually &#39;customer&#39;) (optional, default to customer)
         * @return AuthorizeApplicationsRequestBuilder
         */
        public AuthorizeApplicationsRequestBuilder realm(String realm) {
            this.realm = realm;
            return this;
        }
        
        /**
         * Set scope
         * @param scope Space-separated list of scopes to be authorized (optional, default to user.view)
         * @return AuthorizeApplicationsRequestBuilder
         */
        public AuthorizeApplicationsRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for authorizeApplications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return authorizeApplicationsCall(clientId, redirectUri, responseType, state, realm, scope, _callback);
        }


        /**
         * Execute authorizeApplications request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            authorizeApplicationsWithHttpInfo(clientId, redirectUri, responseType, state, realm, scope);
        }

        /**
         * Execute authorizeApplications request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return authorizeApplicationsWithHttpInfo(clientId, redirectUri, responseType, state, realm, scope);
        }

        /**
         * Execute authorizeApplications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return authorizeApplicationsAsync(clientId, redirectUri, responseType, state, realm, scope, _callback);
        }
    }

    /**
     * Authorize applications
     * This endpoint returns a redirect URI (in the &#39;Location&#39; header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
     * @param clientId Client ID (Consumer Key) of your application (required)
     * @param redirectUri The callback URI to send the request to after authorization; must use a host name that is registered with your application (required)
     * @param responseType Type of temporary authorization code that will be used to generate an access code; the only valid value is &#39;code&#39; (required)
     * @param state Unique value used by the calling app to verify the request (required)
     * @return AuthorizeApplicationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeApplicationsRequestBuilder authorizeApplications(String clientId, String redirectUri, String responseType, String state) throws IllegalArgumentException {
        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (redirectUri == null) throw new IllegalArgumentException("\"redirectUri\" is required but got null");
            

        if (responseType == null) throw new IllegalArgumentException("\"responseType\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        return new AuthorizeApplicationsRequestBuilder(clientId, redirectUri, responseType, state);
    }
    private okhttp3.Call getUserAccessTokenCall(OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthGetUserAccessTokenRequest;

        // create path and map variables
        String localVarPath = "/v2/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAccessTokenValidateBeforeCall(OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        return getUserAccessTokenCall(oauthGetUserAccessTokenRequest, _callback);

    }


    private ApiResponse<OauthAccessTokenResponse> getUserAccessTokenWithHttpInfo(OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = getUserAccessTokenValidateBeforeCall(oauthGetUserAccessTokenRequest, null);
        Type localVarReturnType = new TypeToken<OauthAccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAccessTokenAsync(OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest, final ApiCallback<OauthAccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAccessTokenValidateBeforeCall(oauthGetUserAccessTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<OauthAccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserAccessTokenRequestBuilder {
        private final String clientId;
        private final String grantType;
        private String clientSecret;
        private String code;
        private Boolean expires;
        private String realm;
        private String refreshToken;

        private GetUserAccessTokenRequestBuilder(String clientId, String grantType) {
            this.clientId = clientId;
            this.grantType = grantType;
        }

        /**
         * Set clientSecret
         * @param clientSecret Client Secret (Consumer Secret) of your application (optional)
         * @return GetUserAccessTokenRequestBuilder
         */
        public GetUserAccessTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set code
         * @param code Response code from the /oauth/authorize flow; required if grant_type&#x3D;authorization_code (optional)
         * @return GetUserAccessTokenRequestBuilder
         */
        public GetUserAccessTokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set expires
         * @param expires Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token (optional, default to false)
         * @return GetUserAccessTokenRequestBuilder
         */
        public GetUserAccessTokenRequestBuilder expires(Boolean expires) {
            this.expires = expires;
            return this;
        }
        
        /**
         * Set realm
         * @param realm User type to be authorized (usually &#39;customer&#39;) (optional, default to customer)
         * @return GetUserAccessTokenRequestBuilder
         */
        public GetUserAccessTokenRequestBuilder realm(String realm) {
            this.realm = realm;
            return this;
        }
        
        /**
         * Set refreshToken
         * @param refreshToken Pass this along with grant_type&#x3D;refresh_token to get a fresh access token (optional)
         * @return GetUserAccessTokenRequestBuilder
         */
        public GetUserAccessTokenRequestBuilder refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        
        /**
         * Build call for getUserAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest = buildBodyParams();
            return getUserAccessTokenCall(oauthGetUserAccessTokenRequest, _callback);
        }

        private OauthGetUserAccessTokenRequest buildBodyParams() {
            OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest = new OauthGetUserAccessTokenRequest();
            oauthGetUserAccessTokenRequest.clientId(this.clientId);
            oauthGetUserAccessTokenRequest.clientSecret(this.clientSecret);
            oauthGetUserAccessTokenRequest.code(this.code);
            oauthGetUserAccessTokenRequest.expires(this.expires);
            if (this.grantType != null)
            oauthGetUserAccessTokenRequest.grantType(OauthGetUserAccessTokenRequest.GrantTypeEnum.fromValue(this.grantType));
            if (this.realm != null)
            oauthGetUserAccessTokenRequest.realm(OauthGetUserAccessTokenRequest.RealmEnum.fromValue(this.realm));
            oauthGetUserAccessTokenRequest.refreshToken(this.refreshToken);
            return oauthGetUserAccessTokenRequest;
        }

        /**
         * Execute getUserAccessToken request
         * @return OauthAccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public OauthAccessTokenResponse execute() throws ApiException {
            OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest = buildBodyParams();
            ApiResponse<OauthAccessTokenResponse> localVarResp = getUserAccessTokenWithHttpInfo(oauthGetUserAccessTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserAccessToken request with HTTP info returned
         * @return ApiResponse&lt;OauthAccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OauthAccessTokenResponse> executeWithHttpInfo() throws ApiException {
            OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest = buildBodyParams();
            return getUserAccessTokenWithHttpInfo(oauthGetUserAccessTokenRequest);
        }

        /**
         * Execute getUserAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OauthAccessTokenResponse> _callback) throws ApiException {
            OauthGetUserAccessTokenRequest oauthGetUserAccessTokenRequest = buildBodyParams();
            return getUserAccessTokenAsync(oauthGetUserAccessTokenRequest, _callback);
        }
    }

    /**
     * Get access tokens
     * This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
     * @return GetUserAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAccessTokenRequestBuilder getUserAccessToken(String clientId, String grantType) throws IllegalArgumentException {
        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        return new GetUserAccessTokenRequestBuilder(clientId, grantType);
    }
}
