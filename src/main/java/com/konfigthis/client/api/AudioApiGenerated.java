/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Audio;
import com.konfigthis.client.model.AudioDataList;
import com.konfigthis.client.model.AudioSearchResults;
import com.konfigthis.client.model.AudioUrl;
import com.konfigthis.client.model.Collection;
import com.konfigthis.client.model.CollectionCreateRequest;
import com.konfigthis.client.model.CollectionCreateResponse;
import com.konfigthis.client.model.CollectionDataList;
import com.konfigthis.client.model.CollectionItem;
import com.konfigthis.client.model.CollectionItemDataList;
import com.konfigthis.client.model.CollectionItemRequest;
import com.konfigthis.client.model.CollectionUpdateRequest;
import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.GenreList;
import com.konfigthis.client.model.InstrumentList;
import com.konfigthis.client.model.LicenseAudio;
import com.konfigthis.client.model.LicenseAudioRequest;
import com.konfigthis.client.model.LicenseAudioResultDataList;
import com.konfigthis.client.model.MoodList;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AudioApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AudioApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AudioApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTracksToCollectionCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionItemRequest;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTracksToCollectionValidateBeforeCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTracksToCollection(Async)");
        }

        // verify the required parameter 'collectionItemRequest' is set
        if (collectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionItemRequest' when calling addTracksToCollection(Async)");
        }

        return addTracksToCollectionCall(id, collectionItemRequest, _callback);

    }


    private ApiResponse<Void> addTracksToCollectionWithHttpInfo(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addTracksToCollectionValidateBeforeCall(id, collectionItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTracksToCollectionAsync(String id, CollectionItemRequest collectionItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTracksToCollectionValidateBeforeCall(id, collectionItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTracksToCollectionRequestBuilder {
        private final List<CollectionItem> items;
        private final String id;

        private AddTracksToCollectionRequestBuilder(List<CollectionItem> items, String id) {
            this.items = items;
            this.id = id;
        }

        /**
         * Build call for addTracksToCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addTracksToCollectionCall(id, collectionItemRequest, _callback);
        }

        private CollectionItemRequest buildBodyParams() {
            CollectionItemRequest collectionItemRequest = new CollectionItemRequest();
            collectionItemRequest.items(this.items);
            return collectionItemRequest;
        }

        /**
         * Execute addTracksToCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            addTracksToCollectionWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addTracksToCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addTracksToCollectionWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addTracksToCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addTracksToCollectionAsync(id, collectionItemRequest, _callback);
        }
    }

    /**
     * Add audio tracks to collections
     * This endpoint adds one or more tracks to a collection by track IDs.
     * @param id Collection ID (required)
     * @param collectionItemRequest List of items to add to collection (required)
     * @return AddTracksToCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public AddTracksToCollectionRequestBuilder addTracksToCollection(List<CollectionItem> items, String id) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddTracksToCollectionRequestBuilder(items, id);
    }
    private okhttp3.Call createCollectionsCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/audio/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionsValidateBeforeCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionCreateRequest' is set
        if (collectionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionCreateRequest' when calling createCollections(Async)");
        }

        return createCollectionsCall(collectionCreateRequest, _callback);

    }


    private ApiResponse<CollectionCreateResponse> createCollectionsWithHttpInfo(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createCollectionsValidateBeforeCall(collectionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCollectionsAsync(CollectionCreateRequest collectionCreateRequest, final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionsValidateBeforeCall(collectionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCollectionsRequestBuilder {
        private final String name;

        private CreateCollectionsRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created audio collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionsCall(collectionCreateRequest, _callback);
        }

        private CollectionCreateRequest buildBodyParams() {
            CollectionCreateRequest collectionCreateRequest = new CollectionCreateRequest();
            collectionCreateRequest.name(this.name);
            return collectionCreateRequest;
        }

        /**
         * Execute createCollections request
         * @return CollectionCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created audio collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionCreateResponse execute() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            ApiResponse<CollectionCreateResponse> localVarResp = createCollectionsWithHttpInfo(collectionCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCollections request with HTTP info returned
         * @return ApiResponse&lt;CollectionCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created audio collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionCreateResponse> executeWithHttpInfo() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionsWithHttpInfo(collectionCreateRequest);
        }

        /**
         * Execute createCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created audio collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createCollectionsAsync(collectionCreateRequest, _callback);
        }
    }

    /**
     * Create audio collections
     * This endpoint creates one or more collections (soundboxes). To add tracks, use &#x60;POST /v2/audio/collections/{id}/items&#x60;.
     * @param collectionCreateRequest Collection metadata (required)
     * @return CreateCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created audio collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateCollectionsRequestBuilder createCollections(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateCollectionsRequestBuilder(name);
    }
    private okhttp3.Call deleteCollectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(id, _callback);

    }


    private ApiResponse<Void> deleteCollectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCollectionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCollectionRequestBuilder {
        private final String id;

        private DeleteCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCollectionCall(id, _callback);
        }


        /**
         * Execute deleteCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCollectionAsync(id, _callback);
        }
    }

    /**
     * Delete audio collections
     * This endpoint deletes a collection.
     * @param id Collection ID (required)
     * @return DeleteCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCollectionRequestBuilder deleteCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCollectionRequestBuilder(id);
    }
    private okhttp3.Call getCollectionDetailsCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionDetailsValidateBeforeCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionDetails(Async)");
        }

        return getCollectionDetailsCall(id, embed, shareCode, _callback);

    }


    private ApiResponse<Collection> getCollectionDetailsWithHttpInfo(String id, List<String> embed, String shareCode) throws ApiException {
        okhttp3.Call localVarCall = getCollectionDetailsValidateBeforeCall(id, embed, shareCode, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionDetailsAsync(String id, List<String> embed, String shareCode, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionDetailsValidateBeforeCall(id, embed, shareCode, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionDetailsRequestBuilder {
        private final String id;
        private List<String> embed;
        private String shareCode;

        private GetCollectionDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return GetCollectionDetailsRequestBuilder
         */
        public GetCollectionDetailsRequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve a shared collection (optional)
         * @return GetCollectionDetailsRequestBuilder
         */
        public GetCollectionDetailsRequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Build call for getCollectionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionDetailsCall(id, embed, shareCode, _callback);
        }


        /**
         * Execute getCollectionDetails request
         * @return Collection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public Collection execute() throws ApiException {
            ApiResponse<Collection> localVarResp = getCollectionDetailsWithHttpInfo(id, embed, shareCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionDetails request with HTTP info returned
         * @return ApiResponse&lt;Collection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collection> executeWithHttpInfo() throws ApiException {
            return getCollectionDetailsWithHttpInfo(id, embed, shareCode);
        }

        /**
         * Execute getCollectionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collection> _callback) throws ApiException {
            return getCollectionDetailsAsync(id, embed, shareCode, _callback);
        }
    }

    /**
     * Get the details of audio collections
     * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use &#x60;GET /v2/audio/collections/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @return GetCollectionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionDetailsRequestBuilder getCollectionDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCollectionDetailsRequestBuilder(id);
    }
    private okhttp3.Call getTrackDetailsCall(Integer id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackDetailsValidateBeforeCall(Integer id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrackDetails(Async)");
        }

        return getTrackDetailsCall(id, view, searchId, _callback);

    }


    private ApiResponse<Audio> getTrackDetailsWithHttpInfo(Integer id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getTrackDetailsValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<Audio>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrackDetailsAsync(Integer id, String view, String searchId, final ApiCallback<Audio> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackDetailsValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<Audio>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrackDetailsRequestBuilder {
        private final Integer id;
        private String view;
        private String searchId;

        private GetTrackDetailsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to full)
         * @return GetTrackDetailsRequestBuilder
         */
        public GetTrackDetailsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return GetTrackDetailsRequestBuilder
         */
        public GetTrackDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for getTrackDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrackDetailsCall(id, view, searchId, _callback);
        }


        /**
         * Execute getTrackDetails request
         * @return Audio
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Audio execute() throws ApiException {
            ApiResponse<Audio> localVarResp = getTrackDetailsWithHttpInfo(id, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrackDetails request with HTTP info returned
         * @return ApiResponse&lt;Audio&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Audio> executeWithHttpInfo() throws ApiException {
            return getTrackDetailsWithHttpInfo(id, view, searchId);
        }

        /**
         * Execute getTrackDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Audio> _callback) throws ApiException {
            return getTrackDetailsAsync(id, view, searchId, _callback);
        }
    }

    /**
     * Get details about audio tracks
     * This endpoint shows information about a track, including its genres, instruments, and other attributes.
     * @param id Audio track ID (required)
     * @return GetTrackDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackDetailsRequestBuilder getTrackDetails(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetTrackDetailsRequestBuilder(id);
    }
    private okhttp3.Call licenseTracksCall(LicenseAudioRequest licenseAudioRequest, String license, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseAudioRequest;

        // create path and map variables
        String localVarPath = "/v2/audio/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseTracksValidateBeforeCall(LicenseAudioRequest licenseAudioRequest, String license, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseAudioRequest' is set
        if (licenseAudioRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseAudioRequest' when calling licenseTracks(Async)");
        }

        return licenseTracksCall(licenseAudioRequest, license, searchId, _callback);

    }


    private ApiResponse<LicenseAudioResultDataList> licenseTracksWithHttpInfo(LicenseAudioRequest licenseAudioRequest, String license, String searchId) throws ApiException {
        okhttp3.Call localVarCall = licenseTracksValidateBeforeCall(licenseAudioRequest, license, searchId, null);
        Type localVarReturnType = new TypeToken<LicenseAudioResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseTracksAsync(LicenseAudioRequest licenseAudioRequest, String license, String searchId, final ApiCallback<LicenseAudioResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseTracksValidateBeforeCall(licenseAudioRequest, license, searchId, _callback);
        Type localVarReturnType = new TypeToken<LicenseAudioResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseTracksRequestBuilder {
        private final List<LicenseAudio> audio;
        private String license;
        private String searchId;

        private LicenseTracksRequestBuilder(List<LicenseAudio> audio) {
            this.audio = audio;
        }

        /**
         * Set license
         * @param license License type (optional)
         * @return LicenseTracksRequestBuilder
         */
        public LicenseTracksRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that led to licensing this track (optional)
         * @return LicenseTracksRequestBuilder
         */
        public LicenseTracksRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for licenseTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseAudioRequest licenseAudioRequest = buildBodyParams();
            return licenseTracksCall(licenseAudioRequest, license, searchId, _callback);
        }

        private LicenseAudioRequest buildBodyParams() {
            LicenseAudioRequest licenseAudioRequest = new LicenseAudioRequest();
            licenseAudioRequest.audio(this.audio);
            return licenseAudioRequest;
        }

        /**
         * Execute licenseTracks request
         * @return LicenseAudioResultDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LicenseAudioResultDataList execute() throws ApiException {
            LicenseAudioRequest licenseAudioRequest = buildBodyParams();
            ApiResponse<LicenseAudioResultDataList> localVarResp = licenseTracksWithHttpInfo(licenseAudioRequest, license, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseTracks request with HTTP info returned
         * @return ApiResponse&lt;LicenseAudioResultDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseAudioResultDataList> executeWithHttpInfo() throws ApiException {
            LicenseAudioRequest licenseAudioRequest = buildBodyParams();
            return licenseTracksWithHttpInfo(licenseAudioRequest, license, searchId);
        }

        /**
         * Execute licenseTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseAudioResultDataList> _callback) throws ApiException {
            LicenseAudioRequest licenseAudioRequest = buildBodyParams();
            return licenseTracksAsync(licenseAudioRequest, license, searchId, _callback);
        }
    }

    /**
     * License audio tracks
     * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
     * @param licenseAudioRequest Tracks to license (required)
     * @return LicenseTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseTracksRequestBuilder licenseTracks(List<LicenseAudio> audio) throws IllegalArgumentException {
        if (audio == null) throw new IllegalArgumentException("\"audio\" is required but got null");
        return new LicenseTracksRequestBuilder(audio);
    }
    private okhttp3.Call listAudioLicensesCall(String audioId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("audio_id", audioId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudioLicensesValidateBeforeCall(String audioId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listAudioLicensesCall(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listAudioLicensesWithHttpInfo(String audioId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listAudioLicensesValidateBeforeCall(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAudioLicensesAsync(String audioId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAudioLicensesValidateBeforeCall(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAudioLicensesRequestBuilder {
        private String audioId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListAudioLicensesRequestBuilder() {
        }

        /**
         * Set audioId
         * @param audioId Show licenses for the specified track ID (optional)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder audioId(String audioId) {
            this.audioId = audioId;
            return this;
        }
        
        /**
         * Set license
         * @param license Restrict results by license. Prepending a &#x60;-&#x60; sign will exclude results by license (optional)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListAudioLicensesRequestBuilder
         */
        public ListAudioLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listAudioLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAudioLicensesCall(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listAudioLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listAudioLicensesWithHttpInfo(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAudioLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listAudioLicensesWithHttpInfo(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        }

        /**
         * Execute listAudioLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listAudioLicensesAsync(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List audio licenses
     * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
     * @return ListAudioLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListAudioLicensesRequestBuilder listAudioLicenses() throws IllegalArgumentException {
        return new ListAudioLicensesRequestBuilder();
    }
    private okhttp3.Call listCollectionItemsCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listCollectionItems(Async)");
        }

        return listCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);

    }


    private ApiResponse<CollectionItemDataList> listCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        okhttp3.Call localVarCall = listCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollectionItemsAsync(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCollectionItemsRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String shareCode;
        private String sort;

        private ListCollectionItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListCollectionItemsRequestBuilder
         */
        public ListCollectionItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListCollectionItemsRequestBuilder
         */
        public ListCollectionItemsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve the contents of a shared collection (optional)
         * @return ListCollectionItemsRequestBuilder
         */
        public ListCollectionItemsRequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to oldest)
         * @return ListCollectionItemsRequestBuilder
         */
        public ListCollectionItemsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);
        }


        /**
         * Execute listCollectionItems request
         * @return CollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public CollectionItemDataList execute() throws ApiException {
            ApiResponse<CollectionItemDataList> localVarResp = listCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;CollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return listCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
        }

        /**
         * Execute listCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionItemDataList> _callback) throws ApiException {
            return listCollectionItemsAsync(id, page, perPage, shareCode, sort, _callback);
        }
    }

    /**
     * Get the contents of audio collections
     * This endpoint lists the IDs of tracks in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @return ListCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ListCollectionItemsRequestBuilder listCollectionItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListCollectionItemsRequestBuilder(id);
    }
    private okhttp3.Call listCollectionsCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionsValidateBeforeCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        return listCollectionsCall(page, perPage, embed, _callback);

    }


    private ApiResponse<CollectionDataList> listCollectionsWithHttpInfo(Integer page, Integer perPage, List<String> embed) throws ApiException {
        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, embed, null);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollectionsAsync(Integer page, Integer perPage, List<String> embed, final ApiCallback<CollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, embed, _callback);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCollectionsRequestBuilder {
        private Integer page;
        private Integer perPage;
        private List<String> embed;

        private ListCollectionsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Build call for listCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollectionsCall(page, perPage, embed, _callback);
        }


        /**
         * Execute listCollections request
         * @return CollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionDataList execute() throws ApiException {
            ApiResponse<CollectionDataList> localVarResp = listCollectionsWithHttpInfo(page, perPage, embed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCollections request with HTTP info returned
         * @return ApiResponse&lt;CollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionDataList> executeWithHttpInfo() throws ApiException {
            return listCollectionsWithHttpInfo(page, perPage, embed);
        }

        /**
         * Execute listCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionDataList> _callback) throws ApiException {
            return listCollectionsAsync(page, perPage, embed, _callback);
        }
    }

    /**
     * List audio collections
     * This endpoint lists your collections of audio tracks and their basic attributes.
     * @return ListCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCollectionsRequestBuilder listCollections() throws IllegalArgumentException {
        return new ListCollectionsRequestBuilder();
    }
    private okhttp3.Call listGenresCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/genres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGenresValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return listGenresCall(language, _callback);

    }


    private ApiResponse<GenreList> listGenresWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = listGenresValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<GenreList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGenresAsync(String language, final ApiCallback<GenreList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGenresValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<GenreList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGenresRequestBuilder {
        private String language;

        private ListGenresRequestBuilder() {
        }

        /**
         * Set language
         * @param language Which language the genres will be returned (optional)
         * @return ListGenresRequestBuilder
         */
        public ListGenresRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for listGenres
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGenresCall(language, _callback);
        }


        /**
         * Execute listGenres request
         * @return GenreList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GenreList execute() throws ApiException {
            ApiResponse<GenreList> localVarResp = listGenresWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGenres request with HTTP info returned
         * @return ApiResponse&lt;GenreList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenreList> executeWithHttpInfo() throws ApiException {
            return listGenresWithHttpInfo(language);
        }

        /**
         * Execute listGenres request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenreList> _callback) throws ApiException {
            return listGenresAsync(language, _callback);
        }
    }

    /**
     * List audio genres
     * This endpoint returns a list of all audio genres.
     * @return ListGenresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListGenresRequestBuilder listGenres() throws IllegalArgumentException {
        return new ListGenresRequestBuilder();
    }
    private okhttp3.Call listInstrumentsCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstrumentsValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return listInstrumentsCall(language, _callback);

    }


    private ApiResponse<InstrumentList> listInstrumentsWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = listInstrumentsValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<InstrumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInstrumentsAsync(String language, final ApiCallback<InstrumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstrumentsValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<InstrumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInstrumentsRequestBuilder {
        private String language;

        private ListInstrumentsRequestBuilder() {
        }

        /**
         * Set language
         * @param language Which language the instruments will be returned in (optional)
         * @return ListInstrumentsRequestBuilder
         */
        public ListInstrumentsRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for listInstruments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInstrumentsCall(language, _callback);
        }


        /**
         * Execute listInstruments request
         * @return InstrumentList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstrumentList execute() throws ApiException {
            ApiResponse<InstrumentList> localVarResp = listInstrumentsWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInstruments request with HTTP info returned
         * @return ApiResponse&lt;InstrumentList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstrumentList> executeWithHttpInfo() throws ApiException {
            return listInstrumentsWithHttpInfo(language);
        }

        /**
         * Execute listInstruments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstrumentList> _callback) throws ApiException {
            return listInstrumentsAsync(language, _callback);
        }
    }

    /**
     * List audio instruments
     * This endpoint returns a list of all audio instruments.
     * @return ListInstrumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListInstrumentsRequestBuilder listInstruments() throws IllegalArgumentException {
        return new ListInstrumentsRequestBuilder();
    }
    private okhttp3.Call listMoodsCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/moods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMoodsValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return listMoodsCall(language, _callback);

    }


    private ApiResponse<MoodList> listMoodsWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = listMoodsValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<MoodList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMoodsAsync(String language, final ApiCallback<MoodList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMoodsValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<MoodList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMoodsRequestBuilder {
        private String language;

        private ListMoodsRequestBuilder() {
        }

        /**
         * Set language
         * @param language Which language the moods will be returned in (optional)
         * @return ListMoodsRequestBuilder
         */
        public ListMoodsRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for listMoods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMoodsCall(language, _callback);
        }


        /**
         * Execute listMoods request
         * @return MoodList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public MoodList execute() throws ApiException {
            ApiResponse<MoodList> localVarResp = listMoodsWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMoods request with HTTP info returned
         * @return ApiResponse&lt;MoodList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MoodList> executeWithHttpInfo() throws ApiException {
            return listMoodsWithHttpInfo(language);
        }

        /**
         * Execute listMoods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MoodList> _callback) throws ApiException {
            return listMoodsAsync(language, _callback);
        }
    }

    /**
     * List audio moods
     * This endpoint returns a list of all audio moods.
     * @return ListMoodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMoodsRequestBuilder listMoods() throws IllegalArgumentException {
        return new ListMoodsRequestBuilder();
    }
    private okhttp3.Call listTracksCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTracksValidateBeforeCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTracks(Async)");
        }

        return listTracksCall(id, view, searchId, _callback);

    }


    private ApiResponse<AudioDataList> listTracksWithHttpInfo(List<String> id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = listTracksValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<AudioDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTracksAsync(List<String> id, String view, String searchId, final ApiCallback<AudioDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTracksValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<AudioDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTracksRequestBuilder {
        private final List<String> id;
        private String view;
        private String searchId;

        private ListTracksRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListTracksRequestBuilder
         */
        public ListTracksRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return ListTracksRequestBuilder
         */
        public ListTracksRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for listTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTracksCall(id, view, searchId, _callback);
        }


        /**
         * Execute listTracks request
         * @return AudioDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public AudioDataList execute() throws ApiException {
            ApiResponse<AudioDataList> localVarResp = listTracksWithHttpInfo(id, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTracks request with HTTP info returned
         * @return ApiResponse&lt;AudioDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioDataList> executeWithHttpInfo() throws ApiException {
            return listTracksWithHttpInfo(id, view, searchId);
        }

        /**
         * Execute listTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioDataList> _callback) throws ApiException {
            return listTracksAsync(id, view, searchId, _callback);
        }
    }

    /**
     * List audio tracks
     * This endpoint lists information about one or more audio tracks, including the description and publication date.
     * @param id One or more audio IDs (required)
     * @return ListTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListTracksRequestBuilder listTracks(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListTracksRequestBuilder(id);
    }
    private okhttp3.Call redownloadTracksCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redownloadTracksValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling redownloadTracks(Async)");
        }

        return redownloadTracksCall(id, _callback);

    }


    private ApiResponse<AudioUrl> redownloadTracksWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = redownloadTracksValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redownloadTracksAsync(String id, final ApiCallback<AudioUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = redownloadTracksValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedownloadTracksRequestBuilder {
        private final String id;

        private RedownloadTracksRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for redownloadTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return redownloadTracksCall(id, _callback);
        }


        /**
         * Execute redownloadTracks request
         * @return AudioUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public AudioUrl execute() throws ApiException {
            ApiResponse<AudioUrl> localVarResp = redownloadTracksWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redownloadTracks request with HTTP info returned
         * @return ApiResponse&lt;AudioUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioUrl> executeWithHttpInfo() throws ApiException {
            return redownloadTracksWithHttpInfo(id);
        }

        /**
         * Execute redownloadTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioUrl> _callback) throws ApiException {
            return redownloadTracksAsync(id, _callback);
        }
    }

    /**
     * Download audio tracks
     * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @return RedownloadTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RedownloadTracksRequestBuilder redownloadTracks(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RedownloadTracksRequestBuilder(id);
    }
    private okhttp3.Call removeTracksFromCollectionCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_id", itemId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTracksFromCollectionValidateBeforeCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTracksFromCollection(Async)");
        }

        return removeTracksFromCollectionCall(id, itemId, _callback);

    }


    private ApiResponse<Void> removeTracksFromCollectionWithHttpInfo(String id, List<String> itemId) throws ApiException {
        okhttp3.Call localVarCall = removeTracksFromCollectionValidateBeforeCall(id, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTracksFromCollectionAsync(String id, List<String> itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTracksFromCollectionValidateBeforeCall(id, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTracksFromCollectionRequestBuilder {
        private final String id;
        private List<String> itemId;

        private RemoveTracksFromCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set itemId
         * @param itemId One or more item IDs to remove from the collection (optional)
         * @return RemoveTracksFromCollectionRequestBuilder
         */
        public RemoveTracksFromCollectionRequestBuilder itemId(List<String> itemId) {
            this.itemId = itemId;
            return this;
        }
        
        /**
         * Build call for removeTracksFromCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTracksFromCollectionCall(id, itemId, _callback);
        }


        /**
         * Execute removeTracksFromCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTracksFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeTracksFromCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTracksFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeTracksFromCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTracksFromCollectionAsync(id, itemId, _callback);
        }
    }

    /**
     * Remove audio tracks from collections
     * This endpoint removes one or more tracks from a collection.
     * @param id Collection ID (required)
     * @return RemoveTracksFromCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTracksFromCollectionRequestBuilder removeTracksFromCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveTracksFromCollectionRequestBuilder(id);
    }
    private okhttp3.Call searchTracksCall(List<String> artists, Integer bpm, Integer bpmFrom, Integer bpmTo, Integer duration, Integer durationFrom, Integer durationTo, List<String> genre, Boolean isInstrumental, List<String> instruments, List<String> moods, Integer page, Integer perPage, String query, String sort, String sortOrder, String vocalDescription, String view, String fields, String library, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/audio/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artists != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "artists", artists));
        }

        if (bpm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bpm", bpm));
        }

        if (bpmFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bpm_from", bpmFrom));
        }

        if (bpmTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bpm_to", bpmTo));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (durationFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_from", durationFrom));
        }

        if (durationTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_to", durationTo));
        }

        if (genre != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "genre", genre));
        }

        if (isInstrumental != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_instrumental", isInstrumental));
        }

        if (instruments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "instruments", instruments));
        }

        if (moods != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "moods", moods));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (vocalDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vocal_description", vocalDescription));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTracksValidateBeforeCall(List<String> artists, Integer bpm, Integer bpmFrom, Integer bpmTo, Integer duration, Integer durationFrom, Integer durationTo, List<String> genre, Boolean isInstrumental, List<String> instruments, List<String> moods, Integer page, Integer perPage, String query, String sort, String sortOrder, String vocalDescription, String view, String fields, String library, String language, final ApiCallback _callback) throws ApiException {
        return searchTracksCall(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language, _callback);

    }


    private ApiResponse<AudioSearchResults> searchTracksWithHttpInfo(List<String> artists, Integer bpm, Integer bpmFrom, Integer bpmTo, Integer duration, Integer durationFrom, Integer durationTo, List<String> genre, Boolean isInstrumental, List<String> instruments, List<String> moods, Integer page, Integer perPage, String query, String sort, String sortOrder, String vocalDescription, String view, String fields, String library, String language) throws ApiException {
        okhttp3.Call localVarCall = searchTracksValidateBeforeCall(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language, null);
        Type localVarReturnType = new TypeToken<AudioSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchTracksAsync(List<String> artists, Integer bpm, Integer bpmFrom, Integer bpmTo, Integer duration, Integer durationFrom, Integer durationTo, List<String> genre, Boolean isInstrumental, List<String> instruments, List<String> moods, Integer page, Integer perPage, String query, String sort, String sortOrder, String vocalDescription, String view, String fields, String library, String language, final ApiCallback<AudioSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTracksValidateBeforeCall(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language, _callback);
        Type localVarReturnType = new TypeToken<AudioSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchTracksRequestBuilder {
        private List<String> artists;
        private Integer bpm;
        private Integer bpmFrom;
        private Integer bpmTo;
        private Integer duration;
        private Integer durationFrom;
        private Integer durationTo;
        private List<String> genre;
        private Boolean isInstrumental;
        private List<String> instruments;
        private List<String> moods;
        private Integer page;
        private Integer perPage;
        private String query;
        private String sort;
        private String sortOrder;
        private String vocalDescription;
        private String view;
        private String fields;
        private String library;
        private String language;

        private SearchTracksRequestBuilder() {
        }

        /**
         * Set artists
         * @param artists Show tracks with one of the specified artist names or IDs (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder artists(List<String> artists) {
            this.artists = artists;
            return this;
        }
        
        /**
         * Set bpm
         * @param bpm (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder bpm(Integer bpm) {
            this.bpm = bpm;
            return this;
        }
        
        /**
         * Set bpmFrom
         * @param bpmFrom Show tracks with the specified beats per minute or faster (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder bpmFrom(Integer bpmFrom) {
            this.bpmFrom = bpmFrom;
            return this;
        }
        
        /**
         * Set bpmTo
         * @param bpmTo Show tracks with the specified beats per minute or slower (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder bpmTo(Integer bpmTo) {
            this.bpmTo = bpmTo;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Show tracks with the specified duration in seconds (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set durationFrom
         * @param durationFrom Show tracks with the specified duration or longer in seconds (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder durationFrom(Integer durationFrom) {
            this.durationFrom = durationFrom;
            return this;
        }
        
        /**
         * Set durationTo
         * @param durationTo Show tracks with the specified duration or shorter in seconds (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder durationTo(Integer durationTo) {
            this.durationTo = durationTo;
            return this;
        }
        
        /**
         * Set genre
         * @param genre Show tracks with each of the specified genres; to get the list of genres, use &#x60;GET /v2/audio/genres&#x60; (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder genre(List<String> genre) {
            this.genre = genre;
            return this;
        }
        
        /**
         * Set isInstrumental
         * @param isInstrumental Show instrumental music only (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder isInstrumental(Boolean isInstrumental) {
            this.isInstrumental = isInstrumental;
            return this;
        }
        
        /**
         * Set instruments
         * @param instruments Show tracks with each of the specified instruments; to get the list of instruments, use &#x60;GET /v2/audio/instruments&#x60; (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder instruments(List<String> instruments) {
            this.instruments = instruments;
            return this;
        }
        
        /**
         * Set moods
         * @param moods Show tracks with each of the specified moods; to get the list of moods, use &#x60;GET /v2/audio/moods&#x60; (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder moods(List<String> moods) {
            this.moods = moods;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Sort order (optional, default to desc)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set vocalDescription
         * @param vocalDescription Show tracks with the specified vocal description (male, female) (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder vocalDescription(String vocalDescription) {
            this.vocalDescription = vocalDescription;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set library
         * @param library Which library to search (optional, default to premier)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder library(String library) {
            this.library = library;
            return this;
        }
        
        /**
         * Set language
         * @param language Which language to search in (optional)
         * @return SearchTracksRequestBuilder
         */
        public SearchTracksRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for searchTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchTracksCall(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language, _callback);
        }


        /**
         * Execute searchTracks request
         * @return AudioSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public AudioSearchResults execute() throws ApiException {
            ApiResponse<AudioSearchResults> localVarResp = searchTracksWithHttpInfo(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchTracks request with HTTP info returned
         * @return ApiResponse&lt;AudioSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioSearchResults> executeWithHttpInfo() throws ApiException {
            return searchTracksWithHttpInfo(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language);
        }

        /**
         * Execute searchTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioSearchResults> _callback) throws ApiException {
            return searchTracksAsync(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language, _callback);
        }
    }

    /**
     * Search for tracks
     * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
     * @return SearchTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchTracksRequestBuilder searchTracks() throws IllegalArgumentException {
        return new SearchTracksRequestBuilder();
    }
    private okhttp3.Call setCollectionNameCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/audio/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCollectionNameValidateBeforeCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setCollectionName(Async)");
        }

        // verify the required parameter 'collectionUpdateRequest' is set
        if (collectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionUpdateRequest' when calling setCollectionName(Async)");
        }

        return setCollectionNameCall(id, collectionUpdateRequest, _callback);

    }


    private ApiResponse<Void> setCollectionNameWithHttpInfo(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = setCollectionNameValidateBeforeCall(id, collectionUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setCollectionNameAsync(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCollectionNameValidateBeforeCall(id, collectionUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetCollectionNameRequestBuilder {
        private final String name;
        private final String id;

        private SetCollectionNameRequestBuilder(String name, String id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Build call for setCollectionName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setCollectionNameCall(id, collectionUpdateRequest, _callback);
        }

        private CollectionUpdateRequest buildBodyParams() {
            CollectionUpdateRequest collectionUpdateRequest = new CollectionUpdateRequest();
            collectionUpdateRequest.name(this.name);
            return collectionUpdateRequest;
        }

        /**
         * Execute setCollectionName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            setCollectionNameWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute setCollectionName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setCollectionNameWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute setCollectionName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setCollectionNameAsync(id, collectionUpdateRequest, _callback);
        }
    }

    /**
     * Rename audio collections
     * This endpoint sets a new name for a collection.
     * @param id Collection ID (required)
     * @param collectionUpdateRequest Collection changes (required)
     * @return SetCollectionNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public SetCollectionNameRequestBuilder setCollectionName(String name, String id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SetCollectionNameRequestBuilder(name, id);
    }
}
