/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ComputerVisionImageCreateResponse;
import com.konfigthis.client.model.ImageCreateRequest;
import com.konfigthis.client.model.ImageCreateResponse;
import com.konfigthis.client.model.ImageSearchResults;
import com.konfigthis.client.model.KeywordDataList;
import com.konfigthis.client.model.Language;
import com.konfigthis.client.model.VideoSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ComputerVisionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComputerVisionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ComputerVisionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listSimilarImagesCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/similar/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimilarImagesValidateBeforeCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling listSimilarImages(Async)");
        }

        return listSimilarImagesCall(assetId, license, safe, language, page, perPage, view, _callback);

    }


    private ApiResponse<ImageSearchResults> listSimilarImagesWithHttpInfo(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(assetId, license, safe, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSimilarImagesAsync(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(assetId, license, safe, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSimilarImagesRequestBuilder {
        private final String assetId;
        private List<String> license;
        private Boolean safe;
        private Language language;
        private Integer page;
        private Integer perPage;
        private String view;

        private ListSimilarImagesRequestBuilder(String assetId) {
            this.assetId = assetId;
        }

        /**
         * Set license
         * @param license Show only images with the specified license (optional)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder license(List<String> license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListSimilarImagesRequestBuilder
         */
        public ListSimilarImagesRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Build call for listSimilarImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSimilarImagesCall(assetId, license, safe, language, page, perPage, view, _callback);
        }


        /**
         * Execute listSimilarImages request
         * @return ImageSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ImageSearchResults execute() throws ApiException {
            ApiResponse<ImageSearchResults> localVarResp = listSimilarImagesWithHttpInfo(assetId, license, safe, language, page, perPage, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSimilarImages request with HTTP info returned
         * @return ApiResponse&lt;ImageSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImageSearchResults> executeWithHttpInfo() throws ApiException {
            return listSimilarImagesWithHttpInfo(assetId, license, safe, language, page, perPage, view);
        }

        /**
         * Execute listSimilarImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImageSearchResults> _callback) throws ApiException {
            return listSimilarImagesAsync(assetId, license, safe, language, page, perPage, view, _callback);
        }
    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar images for (required)
     * @return ListSimilarImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListSimilarImagesRequestBuilder listSimilarImages(String assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
            

        return new ListSimilarImagesRequestBuilder(assetId);
    }
    private okhttp3.Call listSimilarVideosCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/similar/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimilarVideosValidateBeforeCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling listSimilarVideos(Async)");
        }

        return listSimilarVideosCall(assetId, license, safe, language, page, perPage, view, _callback);

    }


    private ApiResponse<VideoSearchResults> listSimilarVideosWithHttpInfo(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = listSimilarVideosValidateBeforeCall(assetId, license, safe, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSimilarVideosAsync(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimilarVideosValidateBeforeCall(assetId, license, safe, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSimilarVideosRequestBuilder {
        private final String assetId;
        private List<String> license;
        private Boolean safe;
        private Language language;
        private Integer page;
        private Integer perPage;
        private String view;

        private ListSimilarVideosRequestBuilder(String assetId) {
            this.assetId = assetId;
        }

        /**
         * Set license
         * @param license Show only videos with the specified license (optional)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder license(List<String> license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListSimilarVideosRequestBuilder
         */
        public ListSimilarVideosRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Build call for listSimilarVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSimilarVideosCall(assetId, license, safe, language, page, perPage, view, _callback);
        }


        /**
         * Execute listSimilarVideos request
         * @return VideoSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public VideoSearchResults execute() throws ApiException {
            ApiResponse<VideoSearchResults> localVarResp = listSimilarVideosWithHttpInfo(assetId, license, safe, language, page, perPage, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSimilarVideos request with HTTP info returned
         * @return ApiResponse&lt;VideoSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoSearchResults> executeWithHttpInfo() throws ApiException {
            return listSimilarVideosWithHttpInfo(assetId, license, safe, language, page, perPage, view);
        }

        /**
         * Execute listSimilarVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoSearchResults> _callback) throws ApiException {
            return listSimilarVideosAsync(assetId, license, safe, language, page, perPage, view, _callback);
        }
    }

    /**
     * List similar videos
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar videos for (required)
     * @return ListSimilarVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListSimilarVideosRequestBuilder listSimilarVideos(String assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
            

        return new ListSimilarVideosRequestBuilder(assetId);
    }
    private okhttp3.Call listSuggestedKeywordsCall(Object assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/keywords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSuggestedKeywordsValidateBeforeCall(Object assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling listSuggestedKeywords(Async)");
        }

        return listSuggestedKeywordsCall(assetId, _callback);

    }


    private ApiResponse<KeywordDataList> listSuggestedKeywordsWithHttpInfo(Object assetId) throws ApiException {
        okhttp3.Call localVarCall = listSuggestedKeywordsValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<KeywordDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSuggestedKeywordsAsync(Object assetId, final ApiCallback<KeywordDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSuggestedKeywordsValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<KeywordDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSuggestedKeywordsRequestBuilder {
        private final Object assetId;

        private ListSuggestedKeywordsRequestBuilder(Object assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for listSuggestedKeywords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSuggestedKeywordsCall(assetId, _callback);
        }


        /**
         * Execute listSuggestedKeywords request
         * @return KeywordDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public KeywordDataList execute() throws ApiException {
            ApiResponse<KeywordDataList> localVarResp = listSuggestedKeywordsWithHttpInfo(assetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSuggestedKeywords request with HTTP info returned
         * @return ApiResponse&lt;KeywordDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeywordDataList> executeWithHttpInfo() throws ApiException {
            return listSuggestedKeywordsWithHttpInfo(assetId);
        }

        /**
         * Execute listSuggestedKeywords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeywordDataList> _callback) throws ApiException {
            return listSuggestedKeywordsAsync(assetId, _callback);
        }
    }

    /**
     * List suggested keywords
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @param assetId The asset ID or upload ID to suggest keywords for (required)
     * @return ListSuggestedKeywordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public ListSuggestedKeywordsRequestBuilder listSuggestedKeywords(Object assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
        return new ListSuggestedKeywordsRequestBuilder(assetId);
    }
    private okhttp3.Call uploadImageCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/cv/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageCreateRequest' is set
        if (imageCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'imageCreateRequest' when calling uploadImage(Async)");
        }

        return uploadImageCall(imageCreateRequest, _callback);

    }


    private ApiResponse<ComputerVisionImageCreateResponse> uploadImageWithHttpInfo(ImageCreateRequest imageCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(imageCreateRequest, null);
        Type localVarReturnType = new TypeToken<ComputerVisionImageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadImageAsync(ImageCreateRequest imageCreateRequest, final ApiCallback<ComputerVisionImageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(imageCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ComputerVisionImageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadImageRequestBuilder {
        private final String base64Image;

        private UploadImageRequestBuilder(String base64Image) {
            this.base64Image = base64Image;
        }

        /**
         * Build call for uploadImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageCall(imageCreateRequest, _callback);
        }

        private ImageCreateRequest buildBodyParams() {
            ImageCreateRequest imageCreateRequest = new ImageCreateRequest();
            imageCreateRequest.base64Image(this.base64Image);
            return imageCreateRequest;
        }

        /**
         * Execute uploadImage request
         * @return ComputerVisionImageCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public ComputerVisionImageCreateResponse execute() throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            ApiResponse<ComputerVisionImageCreateResponse> localVarResp = uploadImageWithHttpInfo(imageCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadImage request with HTTP info returned
         * @return ApiResponse&lt;ComputerVisionImageCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComputerVisionImageCreateResponse> executeWithHttpInfo() throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageWithHttpInfo(imageCreateRequest);
        }

        /**
         * Execute uploadImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
            <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComputerVisionImageCreateResponse> _callback) throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageAsync(imageCreateRequest, _callback);
        }
    }

    /**
     * Upload images
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @param imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
     * @return UploadImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public UploadImageRequestBuilder uploadImage(String base64Image) throws IllegalArgumentException {
        if (base64Image == null) throw new IllegalArgumentException("\"base64Image\" is required but got null");
            

        return new UploadImageRequestBuilder(base64Image);
    }
    private okhttp3.Call uploadImageEphemeralCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageEphemeralValidateBeforeCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageCreateRequest' is set
        if (imageCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'imageCreateRequest' when calling uploadImageEphemeral(Async)");
        }

        return uploadImageEphemeralCall(imageCreateRequest, _callback);

    }


    private ApiResponse<ImageCreateResponse> uploadImageEphemeralWithHttpInfo(ImageCreateRequest imageCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadImageEphemeralValidateBeforeCall(imageCreateRequest, null);
        Type localVarReturnType = new TypeToken<ImageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadImageEphemeralAsync(ImageCreateRequest imageCreateRequest, final ApiCallback<ImageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageEphemeralValidateBeforeCall(imageCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadImageEphemeralRequestBuilder {
        private final String base64Image;

        private UploadImageEphemeralRequestBuilder(String base64Image) {
            this.base64Image = base64Image;
        }

        /**
         * Build call for uploadImageEphemeral
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageEphemeralCall(imageCreateRequest, _callback);
        }

        private ImageCreateRequest buildBodyParams() {
            ImageCreateRequest imageCreateRequest = new ImageCreateRequest();
            imageCreateRequest.base64Image(this.base64Image);
            return imageCreateRequest;
        }

        /**
         * Execute uploadImageEphemeral request
         * @return ImageCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ImageCreateResponse execute() throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            ApiResponse<ImageCreateResponse> localVarResp = uploadImageEphemeralWithHttpInfo(imageCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadImageEphemeral request with HTTP info returned
         * @return ApiResponse&lt;ImageCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ImageCreateResponse> executeWithHttpInfo() throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageEphemeralWithHttpInfo(imageCreateRequest);
        }

        /**
         * Execute uploadImageEphemeral request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ImageCreateResponse> _callback) throws ApiException {
            ImageCreateRequest imageCreateRequest = buildBodyParams();
            return uploadImageEphemeralAsync(imageCreateRequest, _callback);
        }
    }

    /**
     * Upload ephemeral images
     * Deprecated; use &#x60;POST /v2/cv/images&#x60; instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the &#x60;GET /v2/images/{id}/similar&#x60; endpoint.
     * @param imageCreateRequest The image data in JPEG or PNG format (required)
     * @return UploadImageEphemeralRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UploadImageEphemeralRequestBuilder uploadImageEphemeral(String base64Image) throws IllegalArgumentException {
        if (base64Image == null) throw new IllegalArgumentException("\"base64Image\" is required but got null");
            

        return new UploadImageEphemeralRequestBuilder(base64Image);
    }
}
