/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CategoryDataList;
import com.konfigthis.client.model.Collection;
import com.konfigthis.client.model.CollectionCreateRequest;
import com.konfigthis.client.model.CollectionCreateResponse;
import com.konfigthis.client.model.CollectionDataList;
import com.konfigthis.client.model.CollectionItem;
import com.konfigthis.client.model.CollectionItemDataList;
import com.konfigthis.client.model.CollectionItemRequest;
import com.konfigthis.client.model.CollectionUpdateRequest;
import com.konfigthis.client.model.Cookie;
import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.FeaturedCollection;
import com.konfigthis.client.model.FeaturedCollectionDataList;
import com.konfigthis.client.model.Language;
import com.konfigthis.client.model.LicenseVideo;
import com.konfigthis.client.model.LicenseVideoRequest;
import com.konfigthis.client.model.LicenseVideoResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RedownloadVideo;
import com.konfigthis.client.model.Suggestions;
import com.konfigthis.client.model.UpdatedMediaDataList;
import com.konfigthis.client.model.Url;
import com.konfigthis.client.model.Video;
import com.konfigthis.client.model.VideoCollectionItemDataList;
import com.konfigthis.client.model.VideoDataList;
import com.konfigthis.client.model.VideoSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToCollectionItemsCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionItemRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionItemsValidateBeforeCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addToCollectionItems(Async)");
        }

        // verify the required parameter 'collectionItemRequest' is set
        if (collectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionItemRequest' when calling addToCollectionItems(Async)");
        }

        return addToCollectionItemsCall(id, collectionItemRequest, _callback);

    }


    private ApiResponse<Void> addToCollectionItemsWithHttpInfo(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(id, collectionItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToCollectionItemsAsync(String id, CollectionItemRequest collectionItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(id, collectionItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToCollectionItemsRequestBuilder {
        private final List<CollectionItem> items;
        private final String id;

        private AddToCollectionItemsRequestBuilder(List<CollectionItem> items, String id) {
            this.items = items;
            this.id = id;
        }

        /**
         * Build call for addToCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsCall(id, collectionItemRequest, _callback);
        }

        private CollectionItemRequest buildBodyParams() {
            CollectionItemRequest collectionItemRequest = new CollectionItemRequest();
            collectionItemRequest.items(this.items);
            return collectionItemRequest;
        }

        /**
         * Execute addToCollectionItems request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            addToCollectionItemsWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addToCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsWithHttpInfo(id, collectionItemRequest);
        }

        /**
         * Execute addToCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionItemRequest collectionItemRequest = buildBodyParams();
            return addToCollectionItemsAsync(id, collectionItemRequest, _callback);
        }
    }

    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param id The ID of the collection to which items should be added (required)
     * @param collectionItemRequest Array of video IDs to add to the collection (required)
     * @return AddToCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public AddToCollectionItemsRequestBuilder addToCollectionItems(List<CollectionItem> items, String id) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddToCollectionItemsRequestBuilder(items, id);
    }
    private okhttp3.Call collectionDetailsGetCall(String id, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionDetailsGetValidateBeforeCall(String id, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collectionDetailsGet(Async)");
        }

        return collectionDetailsGetCall(id, embed, _callback);

    }


    private ApiResponse<FeaturedCollection> collectionDetailsGetWithHttpInfo(String id, String embed) throws ApiException {
        okhttp3.Call localVarCall = collectionDetailsGetValidateBeforeCall(id, embed, null);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call collectionDetailsGetAsync(String id, String embed, final ApiCallback<FeaturedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionDetailsGetValidateBeforeCall(id, embed, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CollectionDetailsGetRequestBuilder {
        private final String id;
        private String embed;

        private CollectionDetailsGetRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set embed
         * @param embed What information to include in the response, such as a URL to the collection (optional)
         * @return CollectionDetailsGetRequestBuilder
         */
        public CollectionDetailsGetRequestBuilder embed(String embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Build call for collectionDetailsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return collectionDetailsGetCall(id, embed, _callback);
        }


        /**
         * Execute collectionDetailsGet request
         * @return FeaturedCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public FeaturedCollection execute() throws ApiException {
            ApiResponse<FeaturedCollection> localVarResp = collectionDetailsGetWithHttpInfo(id, embed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute collectionDetailsGet request with HTTP info returned
         * @return ApiResponse&lt;FeaturedCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeaturedCollection> executeWithHttpInfo() throws ApiException {
            return collectionDetailsGetWithHttpInfo(id, embed);
        }

        /**
         * Execute collectionDetailsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeaturedCollection> _callback) throws ApiException {
            return collectionDetailsGetAsync(id, embed, _callback);
        }
    }

    /**
     * Get the details of featured video collections
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use &#x60;GET /v2/videos/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @return CollectionDetailsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionDetailsGetRequestBuilder collectionDetailsGet(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CollectionDetailsGetRequestBuilder(id);
    }
    private okhttp3.Call collectionDetailsGet_0Call(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionDetailsGet_0ValidateBeforeCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collectionDetailsGet_0(Async)");
        }

        return collectionDetailsGet_0Call(id, embed, shareCode, _callback);

    }


    private ApiResponse<Collection> collectionDetailsGet_0WithHttpInfo(String id, List<String> embed, String shareCode) throws ApiException {
        okhttp3.Call localVarCall = collectionDetailsGet_0ValidateBeforeCall(id, embed, shareCode, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call collectionDetailsGet_0Async(String id, List<String> embed, String shareCode, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionDetailsGet_0ValidateBeforeCall(id, embed, shareCode, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CollectionDetailsGet0RequestBuilder {
        private final String id;
        private List<String> embed;
        private String shareCode;

        private CollectionDetailsGet0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return CollectionDetailsGet0RequestBuilder
         */
        public CollectionDetailsGet0RequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve a shared collection (optional)
         * @return CollectionDetailsGet0RequestBuilder
         */
        public CollectionDetailsGet0RequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Build call for collectionDetailsGet_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return collectionDetailsGet_0Call(id, embed, shareCode, _callback);
        }


        /**
         * Execute collectionDetailsGet_0 request
         * @return Collection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public Collection execute() throws ApiException {
            ApiResponse<Collection> localVarResp = collectionDetailsGet_0WithHttpInfo(id, embed, shareCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute collectionDetailsGet_0 request with HTTP info returned
         * @return ApiResponse&lt;Collection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collection> executeWithHttpInfo() throws ApiException {
            return collectionDetailsGet_0WithHttpInfo(id, embed, shareCode);
        }

        /**
         * Execute collectionDetailsGet_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collection> _callback) throws ApiException {
            return collectionDetailsGet_0Async(id, embed, shareCode, _callback);
        }
    }

    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param id The ID of the collection to return (required)
     * @return CollectionDetailsGet0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionDetailsGet0RequestBuilder collectionDetailsGet_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CollectionDetailsGet0RequestBuilder(id);
    }
    private okhttp3.Call createVideoCollectionsCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoCollectionsValidateBeforeCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionCreateRequest' is set
        if (collectionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionCreateRequest' when calling createVideoCollections(Async)");
        }

        return createVideoCollectionsCall(collectionCreateRequest, _callback);

    }


    private ApiResponse<CollectionCreateResponse> createVideoCollectionsWithHttpInfo(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createVideoCollectionsValidateBeforeCall(collectionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVideoCollectionsAsync(CollectionCreateRequest collectionCreateRequest, final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoCollectionsValidateBeforeCall(collectionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVideoCollectionsRequestBuilder {
        private final String name;

        private CreateVideoCollectionsRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createVideoCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createVideoCollectionsCall(collectionCreateRequest, _callback);
        }

        private CollectionCreateRequest buildBodyParams() {
            CollectionCreateRequest collectionCreateRequest = new CollectionCreateRequest();
            collectionCreateRequest.name(this.name);
            return collectionCreateRequest;
        }

        /**
         * Execute createVideoCollections request
         * @return CollectionCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionCreateResponse execute() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            ApiResponse<CollectionCreateResponse> localVarResp = createVideoCollectionsWithHttpInfo(collectionCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVideoCollections request with HTTP info returned
         * @return ApiResponse&lt;CollectionCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionCreateResponse> executeWithHttpInfo() throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createVideoCollectionsWithHttpInfo(collectionCreateRequest);
        }

        /**
         * Execute createVideoCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {
            CollectionCreateRequest collectionCreateRequest = buildBodyParams();
            return createVideoCollectionsAsync(collectionCreateRequest, _callback);
        }
    }

    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use &#x60;POST /v2/videos/collections/{id}/items&#x60;.
     * @param collectionCreateRequest Collection metadata (required)
     * @return CreateVideoCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateVideoCollectionsRequestBuilder createVideoCollections(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateVideoCollectionsRequestBuilder(name);
    }
    private okhttp3.Call deleteCollectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(id, _callback);

    }


    private ApiResponse<Void> deleteCollectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCollectionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCollectionRequestBuilder {
        private final String id;

        private DeleteCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCollectionCall(id, _callback);
        }


        /**
         * Execute deleteCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCollectionWithHttpInfo(id);
        }

        /**
         * Execute deleteCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCollectionAsync(id, _callback);
        }
    }

    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param id The ID of the collection to delete (required)
     * @return DeleteCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCollectionRequestBuilder deleteCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCollectionRequestBuilder(id);
    }
    private okhttp3.Call findSimilarCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{id}/similar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSimilarValidateBeforeCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findSimilar(Async)");
        }

        return findSimilarCall(id, language, page, perPage, view, _callback);

    }


    private ApiResponse<VideoSearchResults> findSimilarWithHttpInfo(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = findSimilarValidateBeforeCall(id, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findSimilarAsync(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSimilarValidateBeforeCall(id, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindSimilarRequestBuilder {
        private final String id;
        private Language language;
        private Integer page;
        private Integer perPage;
        private String view;

        private FindSimilarRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return FindSimilarRequestBuilder
         */
        public FindSimilarRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return FindSimilarRequestBuilder
         */
        public FindSimilarRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return FindSimilarRequestBuilder
         */
        public FindSimilarRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return FindSimilarRequestBuilder
         */
        public FindSimilarRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Build call for findSimilar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findSimilarCall(id, language, page, perPage, view, _callback);
        }


        /**
         * Execute findSimilar request
         * @return VideoSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public VideoSearchResults execute() throws ApiException {
            ApiResponse<VideoSearchResults> localVarResp = findSimilarWithHttpInfo(id, language, page, perPage, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findSimilar request with HTTP info returned
         * @return ApiResponse&lt;VideoSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoSearchResults> executeWithHttpInfo() throws ApiException {
            return findSimilarWithHttpInfo(id, language, page, perPage, view);
        }

        /**
         * Execute findSimilar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoSearchResults> _callback) throws ApiException {
            return findSimilarAsync(id, language, page, perPage, view, _callback);
        }
    }

    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param id The ID of a video for which similar videos should be returned (required)
     * @return FindSimilarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FindSimilarRequestBuilder findSimilar(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new FindSimilarRequestBuilder(id);
    }
    private okhttp3.Call getCollectionItemsCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCollectionItems(Async)");
        }

        return getCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);

    }


    private ApiResponse<CollectionItemDataList> getCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionItemsAsync(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionItemsRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String shareCode;
        private String sort;

        private GetCollectionItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set shareCode
         * @param shareCode Code to retrieve the contents of a shared collection (optional)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder shareCode(String shareCode) {
            this.shareCode = shareCode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to oldest)
         * @return GetCollectionItemsRequestBuilder
         */
        public GetCollectionItemsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);
        }


        /**
         * Execute getCollectionItems request
         * @return CollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public CollectionItemDataList execute() throws ApiException {
            ApiResponse<CollectionItemDataList> localVarResp = getCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;CollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return getCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
        }

        /**
         * Execute getCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionItemDataList> _callback) throws ApiException {
            return getCollectionItemsAsync(id, page, perPage, shareCode, sort, _callback);
        }
    }

    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @return GetCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionItemsRequestBuilder getCollectionItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCollectionItemsRequestBuilder(id);
    }
    private okhttp3.Call getFeaturedCollectionItemsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeaturedCollectionItems(Async)");
        }

        return getFeaturedCollectionItemsCall(id, page, perPage, _callback);

    }


    private ApiResponse<VideoCollectionItemDataList> getFeaturedCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedCollectionItemsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<VideoCollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeaturedCollectionItemsAsync(String id, Integer page, Integer perPage, final ApiCallback<VideoCollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedCollectionItemsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<VideoCollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeaturedCollectionItemsRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;

        private GetFeaturedCollectionItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return GetFeaturedCollectionItemsRequestBuilder
         */
        public GetFeaturedCollectionItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return GetFeaturedCollectionItemsRequestBuilder
         */
        public GetFeaturedCollectionItemsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getFeaturedCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeaturedCollectionItemsCall(id, page, perPage, _callback);
        }


        /**
         * Execute getFeaturedCollectionItems request
         * @return VideoCollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public VideoCollectionItemDataList execute() throws ApiException {
            ApiResponse<VideoCollectionItemDataList> localVarResp = getFeaturedCollectionItemsWithHttpInfo(id, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeaturedCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;VideoCollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoCollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return getFeaturedCollectionItemsWithHttpInfo(id, page, perPage);
        }

        /**
         * Execute getFeaturedCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoCollectionItemDataList> _callback) throws ApiException {
            return getFeaturedCollectionItemsAsync(id, page, perPage, _callback);
        }
    }

    /**
     * Get the contents of featured video collections
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @return GetFeaturedCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public GetFeaturedCollectionItemsRequestBuilder getFeaturedCollectionItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFeaturedCollectionItemsRequestBuilder(id);
    }
    private okhttp3.Call licenseVideosCall(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseVideoRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_id", subscriptionId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseVideosValidateBeforeCall(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseVideoRequest' is set
        if (licenseVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseVideoRequest' when calling licenseVideos(Async)");
        }

        return licenseVideosCall(licenseVideoRequest, subscriptionId, size, searchId, _callback);

    }


    private ApiResponse<LicenseVideoResultDataList> licenseVideosWithHttpInfo(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId) throws ApiException {
        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseVideoRequest, subscriptionId, size, searchId, null);
        Type localVarReturnType = new TypeToken<LicenseVideoResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseVideosAsync(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback<LicenseVideoResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseVideoRequest, subscriptionId, size, searchId, _callback);
        Type localVarReturnType = new TypeToken<LicenseVideoResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseVideosRequestBuilder {
        private final List<LicenseVideo> videos;
        private String subscriptionId;
        private String size;
        private String searchId;

        private LicenseVideosRequestBuilder(List<LicenseVideo> videos) {
            this.videos = videos;
        }

        /**
         * Set subscriptionId
         * @param subscriptionId The subscription ID to use for licensing (optional)
         * @return LicenseVideosRequestBuilder
         */
        public LicenseVideosRequestBuilder subscriptionId(String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        
        /**
         * Set size
         * @param size The size of the video to license (optional, default to web)
         * @return LicenseVideosRequestBuilder
         */
        public LicenseVideosRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The Search ID that led to this licensing event (optional)
         * @return LicenseVideosRequestBuilder
         */
        public LicenseVideosRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for licenseVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseVideoRequest licenseVideoRequest = buildBodyParams();
            return licenseVideosCall(licenseVideoRequest, subscriptionId, size, searchId, _callback);
        }

        private LicenseVideoRequest buildBodyParams() {
            LicenseVideoRequest licenseVideoRequest = new LicenseVideoRequest();
            licenseVideoRequest.videos(this.videos);
            return licenseVideoRequest;
        }

        /**
         * Execute licenseVideos request
         * @return LicenseVideoResultDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LicenseVideoResultDataList execute() throws ApiException {
            LicenseVideoRequest licenseVideoRequest = buildBodyParams();
            ApiResponse<LicenseVideoResultDataList> localVarResp = licenseVideosWithHttpInfo(licenseVideoRequest, subscriptionId, size, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseVideos request with HTTP info returned
         * @return ApiResponse&lt;LicenseVideoResultDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseVideoResultDataList> executeWithHttpInfo() throws ApiException {
            LicenseVideoRequest licenseVideoRequest = buildBodyParams();
            return licenseVideosWithHttpInfo(licenseVideoRequest, subscriptionId, size, searchId);
        }

        /**
         * Execute licenseVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseVideoResultDataList> _callback) throws ApiException {
            LicenseVideoRequest licenseVideoRequest = buildBodyParams();
            return licenseVideosAsync(licenseVideoRequest, subscriptionId, size, searchId, _callback);
        }
    }

    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @return LicenseVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseVideosRequestBuilder licenseVideos(List<LicenseVideo> videos) throws IllegalArgumentException {
        if (videos == null) throw new IllegalArgumentException("\"videos\" is required but got null");
        return new LicenseVideosRequestBuilder(videos);
    }
    private okhttp3.Call listCategoriesCall(Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(Language language, final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(language, _callback);

    }


    private ApiResponse<CategoryDataList> listCategoriesWithHttpInfo(Language language) throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(Language language, final ApiCallback<CategoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {
        private Language language;

        private ListCategoriesRequestBuilder() {
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return ListCategoriesRequestBuilder
         */
        public ListCategoriesRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(language, _callback);
        }


        /**
         * Execute listCategories request
         * @return CategoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CategoryDataList execute() throws ApiException {
            ApiResponse<CategoryDataList> localVarResp = listCategoriesWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;CategoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoryDataList> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo(language);
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoryDataList> _callback) throws ApiException {
            return listCategoriesAsync(language, _callback);
        }
    }

    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesRequestBuilder listCategories() throws IllegalArgumentException {
        return new ListCategoriesRequestBuilder();
    }
    private okhttp3.Call listCollectionsCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionsValidateBeforeCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        return listCollectionsCall(page, perPage, embed, _callback);

    }


    private ApiResponse<CollectionDataList> listCollectionsWithHttpInfo(Integer page, Integer perPage, List<String> embed) throws ApiException {
        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, embed, null);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollectionsAsync(Integer page, Integer perPage, List<String> embed, final ApiCallback<CollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, embed, _callback);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCollectionsRequestBuilder {
        private Integer page;
        private Integer perPage;
        private List<String> embed;

        private ListCollectionsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set embed
         * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder embed(List<String> embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Build call for listCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollectionsCall(page, perPage, embed, _callback);
        }


        /**
         * Execute listCollections request
         * @return CollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CollectionDataList execute() throws ApiException {
            ApiResponse<CollectionDataList> localVarResp = listCollectionsWithHttpInfo(page, perPage, embed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCollections request with HTTP info returned
         * @return ApiResponse&lt;CollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionDataList> executeWithHttpInfo() throws ApiException {
            return listCollectionsWithHttpInfo(page, perPage, embed);
        }

        /**
         * Execute listCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionDataList> _callback) throws ApiException {
            return listCollectionsAsync(page, perPage, embed, _callback);
        }
    }

    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @return ListCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCollectionsRequestBuilder listCollections() throws IllegalArgumentException {
        return new ListCollectionsRequestBuilder();
    }
    private okhttp3.Call listFeaturedVideoCollectionsCall(String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeaturedVideoCollectionsValidateBeforeCall(String embed, final ApiCallback _callback) throws ApiException {
        return listFeaturedVideoCollectionsCall(embed, _callback);

    }


    private ApiResponse<FeaturedCollectionDataList> listFeaturedVideoCollectionsWithHttpInfo(String embed) throws ApiException {
        okhttp3.Call localVarCall = listFeaturedVideoCollectionsValidateBeforeCall(embed, null);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeaturedVideoCollectionsAsync(String embed, final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeaturedVideoCollectionsValidateBeforeCall(embed, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFeaturedVideoCollectionsRequestBuilder {
        private String embed;

        private ListFeaturedVideoCollectionsRequestBuilder() {
        }

        /**
         * Set embed
         * @param embed What information to include in the response, such as a URL to the collection (optional)
         * @return ListFeaturedVideoCollectionsRequestBuilder
         */
        public ListFeaturedVideoCollectionsRequestBuilder embed(String embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Build call for listFeaturedVideoCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeaturedVideoCollectionsCall(embed, _callback);
        }


        /**
         * Execute listFeaturedVideoCollections request
         * @return FeaturedCollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public FeaturedCollectionDataList execute() throws ApiException {
            ApiResponse<FeaturedCollectionDataList> localVarResp = listFeaturedVideoCollectionsWithHttpInfo(embed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFeaturedVideoCollections request with HTTP info returned
         * @return ApiResponse&lt;FeaturedCollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeaturedCollectionDataList> executeWithHttpInfo() throws ApiException {
            return listFeaturedVideoCollectionsWithHttpInfo(embed);
        }

        /**
         * Execute listFeaturedVideoCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {
            return listFeaturedVideoCollectionsAsync(embed, _callback);
        }
    }

    /**
     * List featured video collections
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @return ListFeaturedVideoCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListFeaturedVideoCollectionsRequestBuilder listFeaturedVideoCollections() throws IllegalArgumentException {
        return new ListFeaturedVideoCollectionsRequestBuilder();
    }
    private okhttp3.Call listLicensesCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("video_id", videoId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicensesValidateBeforeCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listLicensesCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listLicensesWithHttpInfo(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLicensesAsync(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLicensesRequestBuilder {
        private String videoId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListLicensesRequestBuilder() {
        }

        /**
         * Set videoId
         * @param videoId Show licenses for the specified video ID (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder videoId(String videoId) {
            this.videoId = videoId;
            return this;
        }
        
        /**
         * Set license
         * @param license Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by oldest or newest videos first (optional, default to newest)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLicensesCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listLicensesWithHttpInfo(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listLicensesWithHttpInfo(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        }

        /**
         * Execute listLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listLicensesAsync(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @return ListLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListLicensesRequestBuilder listLicenses() throws IllegalArgumentException {
        return new ListLicensesRequestBuilder();
    }
    private okhttp3.Call listUpdatedVideosCall(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpdatedVideosValidateBeforeCall(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        return listUpdatedVideosCall(startDate, endDate, interval, page, perPage, sort, _callback);

    }


    private ApiResponse<UpdatedMediaDataList> listUpdatedVideosWithHttpInfo(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listUpdatedVideosValidateBeforeCall(startDate, endDate, interval, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpdatedVideosAsync(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpdatedVideosValidateBeforeCall(startDate, endDate, interval, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpdatedVideosRequestBuilder {
        private LocalDate startDate;
        private LocalDate endDate;
        private String interval;
        private Integer page;
        private Integer perPage;
        private String sort;

        private ListUpdatedVideosRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate Show videos updated on or after the specified date (optional)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show videos updated before the specified date (optional)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (optional, default to 1 HOUR)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 100)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by oldest or newest videos first (optional, default to newest)
         * @return ListUpdatedVideosRequestBuilder
         */
        public ListUpdatedVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listUpdatedVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpdatedVideosCall(startDate, endDate, interval, page, perPage, sort, _callback);
        }


        /**
         * Execute listUpdatedVideos request
         * @return UpdatedMediaDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UpdatedMediaDataList execute() throws ApiException {
            ApiResponse<UpdatedMediaDataList> localVarResp = listUpdatedVideosWithHttpInfo(startDate, endDate, interval, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpdatedVideos request with HTTP info returned
         * @return ApiResponse&lt;UpdatedMediaDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatedMediaDataList> executeWithHttpInfo() throws ApiException {
            return listUpdatedVideosWithHttpInfo(startDate, endDate, interval, page, perPage, sort);
        }

        /**
         * Execute listUpdatedVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {
            return listUpdatedVideosAsync(startDate, endDate, interval, page, perPage, sort, _callback);
        }
    }

    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show videos that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @return ListUpdatedVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUpdatedVideosRequestBuilder listUpdatedVideos() throws IllegalArgumentException {
        return new ListUpdatedVideosRequestBuilder();
    }
    private okhttp3.Call listVideoCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVideoValidateBeforeCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listVideo(Async)");
        }

        return listVideoCall(id, view, searchId, _callback);

    }


    private ApiResponse<VideoDataList> listVideoWithHttpInfo(List<String> id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = listVideoValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<VideoDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVideoAsync(List<String> id, String view, String searchId, final ApiCallback<VideoDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVideoValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<VideoDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVideoRequestBuilder {
        private final List<String> id;
        private String view;
        private String searchId;

        private ListVideoRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return ListVideoRequestBuilder
         */
        public ListVideoRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return ListVideoRequestBuilder
         */
        public ListVideoRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for listVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVideoCall(id, view, searchId, _callback);
        }


        /**
         * Execute listVideo request
         * @return VideoDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public VideoDataList execute() throws ApiException {
            ApiResponse<VideoDataList> localVarResp = listVideoWithHttpInfo(id, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVideo request with HTTP info returned
         * @return ApiResponse&lt;VideoDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoDataList> executeWithHttpInfo() throws ApiException {
            return listVideoWithHttpInfo(id, view, searchId);
        }

        /**
         * Execute listVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoDataList> _callback) throws ApiException {
            return listVideoAsync(id, view, searchId, _callback);
        }
    }

    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param id One or more video IDs (required)
     * @return ListVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListVideoRequestBuilder listVideo(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListVideoRequestBuilder(id);
    }
    private okhttp3.Call redownloadDownloadsCall(String id, RedownloadVideo redownloadVideo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redownloadVideo;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redownloadDownloadsValidateBeforeCall(String id, RedownloadVideo redownloadVideo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling redownloadDownloads(Async)");
        }

        // verify the required parameter 'redownloadVideo' is set
        if (redownloadVideo == null) {
            throw new ApiException("Missing the required parameter 'redownloadVideo' when calling redownloadDownloads(Async)");
        }

        return redownloadDownloadsCall(id, redownloadVideo, _callback);

    }


    private ApiResponse<Url> redownloadDownloadsWithHttpInfo(String id, RedownloadVideo redownloadVideo) throws ApiException {
        okhttp3.Call localVarCall = redownloadDownloadsValidateBeforeCall(id, redownloadVideo, null);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redownloadDownloadsAsync(String id, RedownloadVideo redownloadVideo, final ApiCallback<Url> _callback) throws ApiException {

        okhttp3.Call localVarCall = redownloadDownloadsValidateBeforeCall(id, redownloadVideo, _callback);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedownloadDownloadsRequestBuilder {
        private final String id;
        private Cookie authCookie;
        private Boolean showModal;
        private String size;
        private String verificationCode;

        private RedownloadDownloadsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set authCookie
         * @param authCookie  (optional)
         * @return RedownloadDownloadsRequestBuilder
         */
        public RedownloadDownloadsRequestBuilder authCookie(Cookie authCookie) {
            this.authCookie = authCookie;
            return this;
        }
        
        /**
         * Set showModal
         * @param showModal (Deprecated) (optional)
         * @return RedownloadDownloadsRequestBuilder
         */
        public RedownloadDownloadsRequestBuilder showModal(Boolean showModal) {
            this.showModal = showModal;
            return this;
        }
        
        /**
         * Set size
         * @param size Size of the video (optional)
         * @return RedownloadDownloadsRequestBuilder
         */
        public RedownloadDownloadsRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set verificationCode
         * @param verificationCode (Deprecated) (optional)
         * @return RedownloadDownloadsRequestBuilder
         */
        public RedownloadDownloadsRequestBuilder verificationCode(String verificationCode) {
            this.verificationCode = verificationCode;
            return this;
        }
        
        /**
         * Build call for redownloadDownloads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RedownloadVideo redownloadVideo = buildBodyParams();
            return redownloadDownloadsCall(id, redownloadVideo, _callback);
        }

        private RedownloadVideo buildBodyParams() {
            RedownloadVideo redownloadVideo = new RedownloadVideo();
            redownloadVideo.authCookie(this.authCookie);
            redownloadVideo.showModal(this.showModal);
            if (this.size != null)
            redownloadVideo.size(RedownloadVideo.SizeEnum.fromValue(this.size));
            redownloadVideo.verificationCode(this.verificationCode);
            return redownloadVideo;
        }

        /**
         * Execute redownloadDownloads request
         * @return Url
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Url execute() throws ApiException {
            RedownloadVideo redownloadVideo = buildBodyParams();
            ApiResponse<Url> localVarResp = redownloadDownloadsWithHttpInfo(id, redownloadVideo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redownloadDownloads request with HTTP info returned
         * @return ApiResponse&lt;Url&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Url> executeWithHttpInfo() throws ApiException {
            RedownloadVideo redownloadVideo = buildBodyParams();
            return redownloadDownloadsWithHttpInfo(id, redownloadVideo);
        }

        /**
         * Execute redownloadDownloads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Url> _callback) throws ApiException {
            RedownloadVideo redownloadVideo = buildBodyParams();
            return redownloadDownloadsAsync(id, redownloadVideo, _callback);
        }
    }

    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param id The license ID of the item to (re)download. The download links in the response are valid for 8 hours. (required)
     * @param redownloadVideo Information about the videos to redownload (required)
     * @return RedownloadDownloadsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RedownloadDownloadsRequestBuilder redownloadDownloads(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RedownloadDownloadsRequestBuilder(id);
    }
    private okhttp3.Call removeFromCollectionCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_id", itemId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromCollectionValidateBeforeCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFromCollection(Async)");
        }

        return removeFromCollectionCall(id, itemId, _callback);

    }


    private ApiResponse<Void> removeFromCollectionWithHttpInfo(String id, List<String> itemId) throws ApiException {
        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(id, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromCollectionAsync(String id, List<String> itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(id, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromCollectionRequestBuilder {
        private final String id;
        private List<String> itemId;

        private RemoveFromCollectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set itemId
         * @param itemId One or more video IDs to remove from the collection (optional)
         * @return RemoveFromCollectionRequestBuilder
         */
        public RemoveFromCollectionRequestBuilder itemId(List<String> itemId) {
            this.itemId = itemId;
            return this;
        }
        
        /**
         * Build call for removeFromCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromCollectionCall(id, itemId, _callback);
        }


        /**
         * Execute removeFromCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeFromCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromCollectionWithHttpInfo(id, itemId);
        }

        /**
         * Execute removeFromCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromCollectionAsync(id, itemId, _callback);
        }
    }

    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param id The ID of the Collection from which items will be deleted (required)
     * @return RemoveFromCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromCollectionRequestBuilder removeFromCollection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveFromCollectionRequestBuilder(id);
    }
    private okhttp3.Call searchSuggestionsCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSuggestionsValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchSuggestions(Async)");
        }

        return searchSuggestionsCall(query, limit, _callback);

    }


    private ApiResponse<Suggestions> searchSuggestionsWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchSuggestionsValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchSuggestionsAsync(String query, Integer limit, final ApiCallback<Suggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSuggestionsValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchSuggestionsRequestBuilder {
        private final String query;
        private Integer limit;

        private SearchSuggestionsRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set limit
         * @param limit Limit the number of the suggestions (optional, default to 10)
         * @return SearchSuggestionsRequestBuilder
         */
        public SearchSuggestionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for searchSuggestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchSuggestionsCall(query, limit, _callback);
        }


        /**
         * Execute searchSuggestions request
         * @return Suggestions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Suggestions execute() throws ApiException {
            ApiResponse<Suggestions> localVarResp = searchSuggestionsWithHttpInfo(query, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchSuggestions request with HTTP info returned
         * @return ApiResponse&lt;Suggestions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Suggestions> executeWithHttpInfo() throws ApiException {
            return searchSuggestionsWithHttpInfo(query, limit);
        }

        /**
         * Execute searchSuggestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Suggestions> _callback) throws ApiException {
            return searchSuggestionsAsync(query, limit, _callback);
        }
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @return SearchSuggestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchSuggestionsRequestBuilder searchSuggestions(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new SearchSuggestionsRequestBuilder(query);
    }
    private okhttp3.Call searchVideoCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, Double fps, Double fpsFrom, Double fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_country", contributorCountry));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (durationFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_from", durationFrom));
        }

        if (durationTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_to", durationTo));
        }

        if (fps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps", fps));
        }

        if (fpsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps_from", fpsFrom));
        }

        if (fpsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps_to", fpsTo));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVideoValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, Double fps, Double fpsFrom, Double fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback _callback) throws ApiException {
        return searchVideoCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);

    }


    private ApiResponse<VideoSearchResults> searchVideoWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, Double fps, Double fpsFrom, Double fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVideoValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchVideoAsync(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, Double fps, Double fpsFrom, Double fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVideoValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchVideoRequestBuilder {
        private LocalDate addedDate;
        private LocalDate addedDateStart;
        private LocalDate addedDateEnd;
        private String aspectRatio;
        private String category;
        private List<String> contributor;
        private List<String> contributorCountry;
        private Integer duration;
        private Integer durationFrom;
        private Integer durationTo;
        private Double fps;
        private Double fpsFrom;
        private Double fpsTo;
        private Boolean keywordSafeSearch;
        private Language language;
        private List<String> license;
        private List<String> model;
        private Integer page;
        private Integer perPage;
        private String peopleAge;
        private List<String> peopleEthnicity;
        private String peopleGender;
        private Integer peopleNumber;
        private Boolean peopleModelReleased;
        private String query;
        private String resolution;
        private Boolean safe;
        private String sort;
        private String view;

        private SearchVideoRequestBuilder() {
        }

        /**
         * Set addedDate
         * @param addedDate Show videos added on the specified date (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder addedDate(LocalDate addedDate) {
            this.addedDate = addedDate;
            return this;
        }
        
        /**
         * Set addedDateStart
         * @param addedDateStart Show videos added on or after the specified date (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder addedDateStart(LocalDate addedDateStart) {
            this.addedDateStart = addedDateStart;
            return this;
        }
        
        /**
         * Set addedDateEnd
         * @param addedDateEnd Show videos added before the specified date (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder addedDateEnd(LocalDate addedDateEnd) {
            this.addedDateEnd = addedDateEnd;
            return this;
        }
        
        /**
         * Set aspectRatio
         * @param aspectRatio Show videos with the specified aspect ratio (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder aspectRatio(String aspectRatio) {
            this.aspectRatio = aspectRatio;
            return this;
        }
        
        /**
         * Set category
         * @param category Show videos with the specified Shutterstock-defined category; specify a category name or ID (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set contributor
         * @param contributor Show videos with the specified artist names or IDs (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder contributor(List<String> contributor) {
            this.contributor = contributor;
            return this;
        }
        
        /**
         * Set contributorCountry
         * @param contributorCountry Show videos from contributors in one or more specified countries (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder contributorCountry(List<String> contributorCountry) {
            this.contributorCountry = contributorCountry;
            return this;
        }
        
        /**
         * Set duration
         * @param duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set durationFrom
         * @param durationFrom Show videos with the specified duration or longer in seconds (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder durationFrom(Integer durationFrom) {
            this.durationFrom = durationFrom;
            return this;
        }
        
        /**
         * Set durationTo
         * @param durationTo Show videos with the specified duration or shorter in seconds (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder durationTo(Integer durationTo) {
            this.durationTo = durationTo;
            return this;
        }
        
        /**
         * Set fps
         * @param fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder fps(Double fps) {
            this.fps = fps;
            return this;
        }
        
        /**
         * Set fpsFrom
         * @param fpsFrom Show videos with the specified frames per second or more (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder fpsFrom(Double fpsFrom) {
            this.fpsFrom = fpsFrom;
            return this;
        }
        
        /**
         * Set fpsTo
         * @param fpsTo Show videos with the specified frames per second or fewer (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder fpsTo(Double fpsTo) {
            this.fpsTo = fpsTo;
            return this;
        }
        
        /**
         * Set keywordSafeSearch
         * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder keywordSafeSearch(Boolean keywordSafeSearch) {
            this.keywordSafeSearch = keywordSafeSearch;
            return this;
        }
        
        /**
         * Set language
         * @param language Set query and result language (uses Accept-Language header if not set) (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set license
         * @param license Show only videos with the specified license or licenses (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder license(List<String> license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set model
         * @param model Show videos with each of the specified models (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder model(List<String> model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set peopleAge
         * @param peopleAge Show videos that feature people of the specified age range (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder peopleAge(String peopleAge) {
            this.peopleAge = peopleAge;
            return this;
        }
        
        /**
         * Set peopleEthnicity
         * @param peopleEthnicity Show videos with people of the specified ethnicities (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder peopleEthnicity(List<String> peopleEthnicity) {
            this.peopleEthnicity = peopleEthnicity;
            return this;
        }
        
        /**
         * Set peopleGender
         * @param peopleGender Show videos with people with the specified gender (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder peopleGender(String peopleGender) {
            this.peopleGender = peopleGender;
            return this;
        }
        
        /**
         * Set peopleNumber
         * @param peopleNumber Show videos with the specified number of people (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder peopleNumber(Integer peopleNumber) {
            this.peopleNumber = peopleNumber;
            return this;
        }
        
        /**
         * Set peopleModelReleased
         * @param peopleModelReleased Show only videos of people with a signed model release (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder peopleModelReleased(Boolean peopleModelReleased) {
            this.peopleModelReleased = peopleModelReleased;
            return this;
        }
        
        /**
         * Set query
         * @param query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set resolution
         * @param resolution Show videos with the specified resolution (optional)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder resolution(String resolution) {
            this.resolution = resolution;
            return this;
        }
        
        /**
         * Set safe
         * @param safe Enable or disable safe search (optional, default to true)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder safe(Boolean safe) {
            this.safe = safe;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by one of these categories (optional, default to popular)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to minimal)
         * @return SearchVideoRequestBuilder
         */
        public SearchVideoRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Build call for searchVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchVideoCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);
        }


        /**
         * Execute searchVideo request
         * @return VideoSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public VideoSearchResults execute() throws ApiException {
            ApiResponse<VideoSearchResults> localVarResp = searchVideoWithHttpInfo(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchVideo request with HTTP info returned
         * @return ApiResponse&lt;VideoSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoSearchResults> executeWithHttpInfo() throws ApiException {
            return searchVideoWithHttpInfo(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view);
        }

        /**
         * Execute searchVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoSearchResults> _callback) throws ApiException {
            return searchVideoAsync(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);
        }
    }

    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @return SearchVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SearchVideoRequestBuilder searchVideo() throws IllegalArgumentException {
        return new SearchVideoRequestBuilder();
    }
    private okhttp3.Call setNewNameCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNewNameValidateBeforeCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setNewName(Async)");
        }

        // verify the required parameter 'collectionUpdateRequest' is set
        if (collectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionUpdateRequest' when calling setNewName(Async)");
        }

        return setNewNameCall(id, collectionUpdateRequest, _callback);

    }


    private ApiResponse<Void> setNewNameWithHttpInfo(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = setNewNameValidateBeforeCall(id, collectionUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setNewNameAsync(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNewNameValidateBeforeCall(id, collectionUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetNewNameRequestBuilder {
        private final String name;
        private final String id;

        private SetNewNameRequestBuilder(String name, String id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Build call for setNewName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setNewNameCall(id, collectionUpdateRequest, _callback);
        }

        private CollectionUpdateRequest buildBodyParams() {
            CollectionUpdateRequest collectionUpdateRequest = new CollectionUpdateRequest();
            collectionUpdateRequest.name(this.name);
            return collectionUpdateRequest;
        }

        /**
         * Execute setNewName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            setNewNameWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute setNewName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setNewNameWithHttpInfo(id, collectionUpdateRequest);
        }

        /**
         * Execute setNewName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CollectionUpdateRequest collectionUpdateRequest = buildBodyParams();
            return setNewNameAsync(id, collectionUpdateRequest, _callback);
        }
    }

    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param id The ID of the collection to rename (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @return SetNewNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public SetNewNameRequestBuilder setNewName(String name, String id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SetNewNameRequestBuilder(name, id);
    }
    private okhttp3.Call videoDetailsCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videoDetailsValidateBeforeCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling videoDetails(Async)");
        }

        return videoDetailsCall(id, language, view, searchId, _callback);

    }


    private ApiResponse<Video> videoDetailsWithHttpInfo(String id, Language language, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = videoDetailsValidateBeforeCall(id, language, view, searchId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call videoDetailsAsync(String id, Language language, String view, String searchId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = videoDetailsValidateBeforeCall(id, language, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VideoDetailsRequestBuilder {
        private final String id;
        private Language language;
        private String view;
        private String searchId;

        private VideoDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set language
         * @param language Language for the keywords and categories in the response (optional)
         * @return VideoDetailsRequestBuilder
         */
        public VideoDetailsRequestBuilder language(Language language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set view
         * @param view Amount of detail to render in the response (optional, default to full)
         * @return VideoDetailsRequestBuilder
         */
        public VideoDetailsRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return VideoDetailsRequestBuilder
         */
        public VideoDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for videoDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videoDetailsCall(id, language, view, searchId, _callback);
        }


        /**
         * Execute videoDetails request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = videoDetailsWithHttpInfo(id, language, view, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute videoDetails request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return videoDetailsWithHttpInfo(id, language, view, searchId);
        }

        /**
         * Execute videoDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return videoDetailsAsync(id, language, view, searchId, _callback);
        }
    }

    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param id Video ID (required)
     * @return VideoDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VideoDetailsRequestBuilder videoDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new VideoDetailsRequestBuilder(id);
    }
}
