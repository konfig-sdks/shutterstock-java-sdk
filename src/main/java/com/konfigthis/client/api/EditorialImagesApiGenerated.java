/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.EditorialCategoryResults;
import com.konfigthis.client.model.EditorialContent;
import com.konfigthis.client.model.EditorialContentDataList;
import com.konfigthis.client.model.EditorialImageCategoryResults;
import com.konfigthis.client.model.EditorialImageContentDataList;
import com.konfigthis.client.model.EditorialImageLivefeed;
import com.konfigthis.client.model.EditorialImageLivefeedList;
import com.konfigthis.client.model.EditorialLivefeed;
import com.konfigthis.client.model.EditorialLivefeedList;
import com.konfigthis.client.model.EditorialSearchResults;
import com.konfigthis.client.model.EditorialUpdatedResults;
import com.konfigthis.client.model.LicenseEditorialContent;
import com.konfigthis.client.model.LicenseEditorialContentRequest;
import com.konfigthis.client.model.LicenseEditorialContentResults;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EditorialImagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EditorialImagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EditorialImagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailsCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getDetails(Async)");
        }

        return getDetailsCall(id, country, searchId, _callback);

    }


    private ApiResponse<EditorialContent> getDetailsWithHttpInfo(String id, String country, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, country, searchId, null);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String id, String country, String searchId, final ApiCallback<EditorialContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, country, searchId, _callback);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String id;
        private final String country;
        private String searchId;

        private GetDetailsRequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Set searchId
         * @param searchId The ID of the search that is related to this request (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder searchId(String searchId) {
            this.searchId = searchId;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, country, searchId, _callback);
        }


        /**
         * Execute getDetails request
         * @return EditorialContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialContent execute() throws ApiException {
            ApiResponse<EditorialContent> localVarResp = getDetailsWithHttpInfo(id, country, searchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;EditorialContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialContent> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id, country, searchId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialContent> _callback) throws ApiException {
            return getDetailsAsync(id, country, searchId, _callback);
        }
    }

    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use &#x60;GET /v2/editorial/images/{id}&#x60; instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetDetailsRequestBuilder getDetails(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetDetailsRequestBuilder(id, country);
    }
    private okhttp3.Call getImageDetailsCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageDetailsValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImageDetails(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getImageDetails(Async)");
        }

        return getImageDetailsCall(id, country, _callback);

    }


    private ApiResponse<EditorialContent> getImageDetailsWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getImageDetailsValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImageDetailsAsync(String id, String country, final ApiCallback<EditorialContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageDetailsValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetImageDetailsRequestBuilder {
        private final String id;
        private final String country;

        private GetImageDetailsRequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Build call for getImageDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImageDetailsCall(id, country, _callback);
        }


        /**
         * Execute getImageDetails request
         * @return EditorialContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public EditorialContent execute() throws ApiException {
            ApiResponse<EditorialContent> localVarResp = getImageDetailsWithHttpInfo(id, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getImageDetails request with HTTP info returned
         * @return ApiResponse&lt;EditorialContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialContent> executeWithHttpInfo() throws ApiException {
            return getImageDetailsWithHttpInfo(id, country);
        }

        /**
         * Execute getImageDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialContent> _callback) throws ApiException {
            return getImageDetailsAsync(id, country, _callback);
        }
    }

    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @return GetImageDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetImageDetailsRequestBuilder getImageDetails(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetImageDetailsRequestBuilder(id, country);
    }
    private okhttp3.Call getLivefeedImagesCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivefeedImagesValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLivefeedImages(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getLivefeedImages(Async)");
        }

        return getLivefeedImagesCall(id, country, _callback);

    }


    private ApiResponse<EditorialImageLivefeed> getLivefeedImagesWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getLivefeedImagesValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivefeedImagesAsync(String id, String country, final ApiCallback<EditorialImageLivefeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivefeedImagesValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivefeedImagesRequestBuilder {
        private final String id;
        private final String country;

        private GetLivefeedImagesRequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Build call for getLivefeedImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivefeedImagesCall(id, country, _callback);
        }


        /**
         * Execute getLivefeedImages request
         * @return EditorialImageLivefeed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public EditorialImageLivefeed execute() throws ApiException {
            ApiResponse<EditorialImageLivefeed> localVarResp = getLivefeedImagesWithHttpInfo(id, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivefeedImages request with HTTP info returned
         * @return ApiResponse&lt;EditorialImageLivefeed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialImageLivefeed> executeWithHttpInfo() throws ApiException {
            return getLivefeedImagesWithHttpInfo(id, country);
        }

        /**
         * Execute getLivefeedImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialImageLivefeed> _callback) throws ApiException {
            return getLivefeedImagesAsync(id, country, _callback);
        }
    }

    /**
     * Get editorial livefeed
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return GetLivefeedImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetLivefeedImagesRequestBuilder getLivefeedImages(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetLivefeedImagesRequestBuilder(id, country);
    }
    private okhttp3.Call getLivefeedItemsCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivefeedItemsValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLivefeedItems(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getLivefeedItems(Async)");
        }

        return getLivefeedItemsCall(id, country, _callback);

    }


    private ApiResponse<EditorialImageContentDataList> getLivefeedItemsWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getLivefeedItemsValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialImageContentDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivefeedItemsAsync(String id, String country, final ApiCallback<EditorialImageContentDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivefeedItemsValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageContentDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivefeedItemsRequestBuilder {
        private final String id;
        private final String country;

        private GetLivefeedItemsRequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Build call for getLivefeedItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivefeedItemsCall(id, country, _callback);
        }


        /**
         * Execute getLivefeedItems request
         * @return EditorialImageContentDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public EditorialImageContentDataList execute() throws ApiException {
            ApiResponse<EditorialImageContentDataList> localVarResp = getLivefeedItemsWithHttpInfo(id, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivefeedItems request with HTTP info returned
         * @return ApiResponse&lt;EditorialImageContentDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialImageContentDataList> executeWithHttpInfo() throws ApiException {
            return getLivefeedItemsWithHttpInfo(id, country);
        }

        /**
         * Execute getLivefeedItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialImageContentDataList> _callback) throws ApiException {
            return getLivefeedItemsAsync(id, country, _callback);
        }
    }

    /**
     * Get editorial livefeed items
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return GetLivefeedItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetLivefeedItemsRequestBuilder getLivefeedItems(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetLivefeedItemsRequestBuilder(id, country);
    }
    private okhttp3.Call getLivefeedItems_0Call(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivefeedItems_0ValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLivefeedItems_0(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getLivefeedItems_0(Async)");
        }

        return getLivefeedItems_0Call(id, country, _callback);

    }


    private ApiResponse<EditorialLivefeed> getLivefeedItems_0WithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getLivefeedItems_0ValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialLivefeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivefeedItems_0Async(String id, String country, final ApiCallback<EditorialLivefeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivefeedItems_0ValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialLivefeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivefeedItems0RequestBuilder {
        private final String id;
        private final String country;

        private GetLivefeedItems0RequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Build call for getLivefeedItems_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivefeedItems_0Call(id, country, _callback);
        }


        /**
         * Execute getLivefeedItems_0 request
         * @return EditorialLivefeed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialLivefeed execute() throws ApiException {
            ApiResponse<EditorialLivefeed> localVarResp = getLivefeedItems_0WithHttpInfo(id, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivefeedItems_0 request with HTTP info returned
         * @return ApiResponse&lt;EditorialLivefeed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialLivefeed> executeWithHttpInfo() throws ApiException {
            return getLivefeedItems_0WithHttpInfo(id, country);
        }

        /**
         * Execute getLivefeedItems_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialLivefeed> _callback) throws ApiException {
            return getLivefeedItems_0Async(id, country, _callback);
        }
    }

    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use &#x60;GET /v2/editorial/images/livefeeds/{id}&#x60; instead to get an editorial livefeed.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return GetLivefeedItems0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetLivefeedItems0RequestBuilder getLivefeedItems_0(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetLivefeedItems0RequestBuilder(id, country);
    }
    private okhttp3.Call getLivefeedItems_1Call(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivefeedItems_1ValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLivefeedItems_1(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getLivefeedItems_1(Async)");
        }

        return getLivefeedItems_1Call(id, country, _callback);

    }


    private ApiResponse<EditorialContentDataList> getLivefeedItems_1WithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getLivefeedItems_1ValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialContentDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivefeedItems_1Async(String id, String country, final ApiCallback<EditorialContentDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivefeedItems_1ValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialContentDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivefeedItems1RequestBuilder {
        private final String id;
        private final String country;

        private GetLivefeedItems1RequestBuilder(String id, String country) {
            this.id = id;
            this.country = country;
        }

        /**
         * Build call for getLivefeedItems_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivefeedItems_1Call(id, country, _callback);
        }


        /**
         * Execute getLivefeedItems_1 request
         * @return EditorialContentDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialContentDataList execute() throws ApiException {
            ApiResponse<EditorialContentDataList> localVarResp = getLivefeedItems_1WithHttpInfo(id, country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivefeedItems_1 request with HTTP info returned
         * @return ApiResponse&lt;EditorialContentDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialContentDataList> executeWithHttpInfo() throws ApiException {
            return getLivefeedItems_1WithHttpInfo(id, country);
        }

        /**
         * Execute getLivefeedItems_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialContentDataList> _callback) throws ApiException {
            return getLivefeedItems_1Async(id, country, _callback);
        }
    }

    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds/{id}/items&#x60; instead to get editorial livefeed items.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return GetLivefeedItems1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetLivefeedItems1RequestBuilder getLivefeedItems_1(String id, String country) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetLivefeedItems1RequestBuilder(id, country);
    }
    private okhttp3.Call getLivefeedListCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivefeedListValidateBeforeCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getLivefeedList(Async)");
        }

        return getLivefeedListCall(country, page, perPage, _callback);

    }


    private ApiResponse<EditorialLivefeedList> getLivefeedListWithHttpInfo(String country, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getLivefeedListValidateBeforeCall(country, page, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialLivefeedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivefeedListAsync(String country, Integer page, Integer perPage, final ApiCallback<EditorialLivefeedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivefeedListValidateBeforeCall(country, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialLivefeedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivefeedListRequestBuilder {
        private final String country;
        private Integer page;
        private Integer perPage;

        private GetLivefeedListRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return GetLivefeedListRequestBuilder
         */
        public GetLivefeedListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return GetLivefeedListRequestBuilder
         */
        public GetLivefeedListRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getLivefeedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivefeedListCall(country, page, perPage, _callback);
        }


        /**
         * Execute getLivefeedList request
         * @return EditorialLivefeedList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialLivefeedList execute() throws ApiException {
            ApiResponse<EditorialLivefeedList> localVarResp = getLivefeedListWithHttpInfo(country, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivefeedList request with HTTP info returned
         * @return ApiResponse&lt;EditorialLivefeedList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialLivefeedList> executeWithHttpInfo() throws ApiException {
            return getLivefeedListWithHttpInfo(country, page, perPage);
        }

        /**
         * Execute getLivefeedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialLivefeedList> _callback) throws ApiException {
            return getLivefeedListAsync(country, page, perPage, _callback);
        }
    }

    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds&#x60; instead to get a list of editorial livefeeds.
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @return GetLivefeedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetLivefeedListRequestBuilder getLivefeedList(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new GetLivefeedListRequestBuilder(country);
    }
    private okhttp3.Call licenseContentCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEditorialContentRequest;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseContentValidateBeforeCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseEditorialContentRequest' is set
        if (licenseEditorialContentRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseContent(Async)");
        }

        return licenseContentCall(licenseEditorialContentRequest, _callback);

    }


    private ApiResponse<LicenseEditorialContentResults> licenseContentWithHttpInfo(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseContentValidateBeforeCall(licenseEditorialContentRequest, null);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseContentAsync(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseContentValidateBeforeCall(licenseEditorialContentRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseContentRequestBuilder {
        private final Object country;
        private final List<LicenseEditorialContent> editorial;

        private LicenseContentRequestBuilder(Object country, List<LicenseEditorialContent> editorial) {
            this.country = country;
            this.editorial = editorial;
        }

        /**
         * Build call for licenseContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContentCall(licenseEditorialContentRequest, _callback);
        }

        private LicenseEditorialContentRequest buildBodyParams() {
            LicenseEditorialContentRequest licenseEditorialContentRequest = new LicenseEditorialContentRequest();
            licenseEditorialContentRequest.country(this.country);
            licenseEditorialContentRequest.editorial(this.editorial);
            return licenseEditorialContentRequest;
        }

        /**
         * Execute licenseContent request
         * @return LicenseEditorialContentResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public LicenseEditorialContentResults execute() throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            ApiResponse<LicenseEditorialContentResults> localVarResp = licenseContentWithHttpInfo(licenseEditorialContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseContent request with HTTP info returned
         * @return ApiResponse&lt;LicenseEditorialContentResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LicenseEditorialContentResults> executeWithHttpInfo() throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContentWithHttpInfo(licenseEditorialContentRequest);
        }

        /**
         * Execute licenseContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContentAsync(licenseEditorialContentRequest, _callback);
        }
    }

    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return LicenseContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public LicenseContentRequestBuilder licenseContent(Object country, List<LicenseEditorialContent> editorial) throws IllegalArgumentException {
        
        if (editorial == null) throw new IllegalArgumentException("\"editorial\" is required but got null");
        return new LicenseContentRequestBuilder(country, editorial);
    }
    private okhttp3.Call licenseContent_0Call(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEditorialContentRequest;

        // create path and map variables
        String localVarPath = "/v2/editorial/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseContent_0ValidateBeforeCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseEditorialContentRequest' is set
        if (licenseEditorialContentRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseContent_0(Async)");
        }

        return licenseContent_0Call(licenseEditorialContentRequest, _callback);

    }


    private ApiResponse<LicenseEditorialContentResults> licenseContent_0WithHttpInfo(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseContent_0ValidateBeforeCall(licenseEditorialContentRequest, null);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call licenseContent_0Async(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseContent_0ValidateBeforeCall(licenseEditorialContentRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LicenseContent0RequestBuilder {
        private final Object country;
        private final List<LicenseEditorialContent> editorial;

        private LicenseContent0RequestBuilder(Object country, List<LicenseEditorialContent> editorial) {
            this.country = country;
            this.editorial = editorial;
        }

        /**
         * Build call for licenseContent_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContent_0Call(licenseEditorialContentRequest, _callback);
        }

        private LicenseEditorialContentRequest buildBodyParams() {
            LicenseEditorialContentRequest licenseEditorialContentRequest = new LicenseEditorialContentRequest();
            licenseEditorialContentRequest.country(this.country);
            licenseEditorialContentRequest.editorial(this.editorial);
            return licenseEditorialContentRequest;
        }

        /**
         * Execute licenseContent_0 request
         * @return LicenseEditorialContentResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public LicenseEditorialContentResults execute() throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            ApiResponse<LicenseEditorialContentResults> localVarResp = licenseContent_0WithHttpInfo(licenseEditorialContentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute licenseContent_0 request with HTTP info returned
         * @return ApiResponse&lt;LicenseEditorialContentResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<LicenseEditorialContentResults> executeWithHttpInfo() throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContent_0WithHttpInfo(licenseEditorialContentRequest);
        }

        /**
         * Execute licenseContent_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {
            LicenseEditorialContentRequest licenseEditorialContentRequest = buildBodyParams();
            return licenseContent_0Async(licenseEditorialContentRequest, _callback);
        }
    }

    /**
     * (Deprecated) License editorial content
     * Deprecated; use &#x60;POST /v2/editorial/images/licenses&#x60; instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return LicenseContent0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public LicenseContent0RequestBuilder licenseContent_0(Object country, List<LicenseEditorialContent> editorial) throws IllegalArgumentException {
        
        if (editorial == null) throw new IllegalArgumentException("\"editorial\" is required but got null");
        return new LicenseContent0RequestBuilder(country, editorial);
    }
    private okhttp3.Call listCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(_callback);

    }


    private ApiResponse<EditorialCategoryResults> listCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EditorialCategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(final ApiCallback<EditorialCategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EditorialCategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {

        private ListCategoriesRequestBuilder() {
        }

        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(_callback);
        }


        /**
         * Execute listCategories request
         * @return EditorialCategoryResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialCategoryResults execute() throws ApiException {
            ApiResponse<EditorialCategoryResults> localVarResp = listCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;EditorialCategoryResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialCategoryResults> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo();
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialCategoryResults> _callback) throws ApiException {
            return listCategoriesAsync(_callback);
        }
    }

    /**
     * (Deprecated) List editorial categories
     * Deprecated; use &#x60;GET /v2/editorial/images/categories&#x60; instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListCategoriesRequestBuilder listCategories() throws IllegalArgumentException {
        return new ListCategoriesRequestBuilder();
    }
    private okhttp3.Call listCategories_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategories_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCategories_0Call(_callback);

    }


    private ApiResponse<EditorialImageCategoryResults> listCategories_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCategories_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EditorialImageCategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategories_0Async(final ApiCallback<EditorialImageCategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategories_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EditorialImageCategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategories0RequestBuilder {

        private ListCategories0RequestBuilder() {
        }

        /**
         * Build call for listCategories_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategories_0Call(_callback);
        }


        /**
         * Execute listCategories_0 request
         * @return EditorialImageCategoryResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EditorialImageCategoryResults execute() throws ApiException {
            ApiResponse<EditorialImageCategoryResults> localVarResp = listCategories_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories_0 request with HTTP info returned
         * @return ApiResponse&lt;EditorialImageCategoryResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialImageCategoryResults> executeWithHttpInfo() throws ApiException {
            return listCategories_0WithHttpInfo();
        }

        /**
         * Execute listCategories_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialImageCategoryResults> _callback) throws ApiException {
            return listCategories_0Async(_callback);
        }
    }

    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return ListCategories0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListCategories0RequestBuilder listCategories_0() throws IllegalArgumentException {
        return new ListCategories0RequestBuilder();
    }
    private okhttp3.Call listLicensesCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLicensesValidateBeforeCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return listLicensesCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }


    private ApiResponse<DownloadHistoryDataList> listLicensesWithHttpInfo(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLicensesAsync(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLicensesValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLicensesRequestBuilder {
        private String imageId;
        private String license;
        private Integer page;
        private Integer perPage;
        private String sort;
        private String username;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String downloadAvailability;
        private Boolean teamHistory;

        private ListLicensesRequestBuilder() {
        }

        /**
         * Set imageId
         * @param imageId Show licenses for the specified editorial image ID (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder imageId(String imageId) {
            this.imageId = imageId;
            return this;
        }
        
        /**
         * Set license
         * @param license Show editorial images that are available with the specified license name (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort order (optional, default to newest)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set username
         * @param username Filter licenses by username of licensee (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Show licenses created on or after the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Show licenses created before the specified date (optional)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set downloadAvailability
         * @param downloadAvailability Filter licenses by download availability (optional, default to all)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder downloadAvailability(String downloadAvailability) {
            this.downloadAvailability = downloadAvailability;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
         * @return ListLicensesRequestBuilder
         */
        public ListLicensesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Build call for listLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLicensesCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }


        /**
         * Execute listLicenses request
         * @return DownloadHistoryDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public DownloadHistoryDataList execute() throws ApiException {
            ApiResponse<DownloadHistoryDataList> localVarResp = listLicensesWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLicenses request with HTTP info returned
         * @return ApiResponse&lt;DownloadHistoryDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadHistoryDataList> executeWithHttpInfo() throws ApiException {
            return listLicensesWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        }

        /**
         * Execute listLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {
            return listLicensesAsync(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        }
    }

    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @return ListLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListLicensesRequestBuilder listLicenses() throws IllegalArgumentException {
        return new ListLicensesRequestBuilder();
    }
    private okhttp3.Call listLivefeedImagesCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLivefeedImagesValidateBeforeCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling listLivefeedImages(Async)");
        }

        return listLivefeedImagesCall(country, page, perPage, _callback);

    }


    private ApiResponse<EditorialImageLivefeedList> listLivefeedImagesWithHttpInfo(String country, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listLivefeedImagesValidateBeforeCall(country, page, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLivefeedImagesAsync(String country, Integer page, Integer perPage, final ApiCallback<EditorialImageLivefeedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLivefeedImagesValidateBeforeCall(country, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLivefeedImagesRequestBuilder {
        private final String country;
        private Integer page;
        private Integer perPage;

        private ListLivefeedImagesRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListLivefeedImagesRequestBuilder
         */
        public ListLivefeedImagesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListLivefeedImagesRequestBuilder
         */
        public ListLivefeedImagesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listLivefeedImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLivefeedImagesCall(country, page, perPage, _callback);
        }


        /**
         * Execute listLivefeedImages request
         * @return EditorialImageLivefeedList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public EditorialImageLivefeedList execute() throws ApiException {
            ApiResponse<EditorialImageLivefeedList> localVarResp = listLivefeedImagesWithHttpInfo(country, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLivefeedImages request with HTTP info returned
         * @return ApiResponse&lt;EditorialImageLivefeedList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialImageLivefeedList> executeWithHttpInfo() throws ApiException {
            return listLivefeedImagesWithHttpInfo(country, page, perPage);
        }

        /**
         * Execute listLivefeedImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialImageLivefeedList> _callback) throws ApiException {
            return listLivefeedImagesAsync(country, page, perPage, _callback);
        }
    }

    /**
     * Get editorial livefeed list
     * 
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @return ListLivefeedImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListLivefeedImagesRequestBuilder listLivefeedImages(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new ListLivefeedImagesRequestBuilder(country);
    }
    private okhttp3.Call listUpdatedContentCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (dateUpdatedStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_start", dateUpdatedStart));
        }

        if (dateUpdatedEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_end", dateUpdatedEnd));
        }

        if (dateTakenStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_start", dateTakenStart));
        }

        if (dateTakenEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_end", dateTakenEnd));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpdatedContentValidateBeforeCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listUpdatedContent(Async)");
        }

        // verify the required parameter 'dateUpdatedStart' is set
        if (dateUpdatedStart == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedStart' when calling listUpdatedContent(Async)");
        }

        // verify the required parameter 'dateUpdatedEnd' is set
        if (dateUpdatedEnd == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedEnd' when calling listUpdatedContent(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling listUpdatedContent(Async)");
        }

        return listUpdatedContentCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);

    }


    private ApiResponse<EditorialUpdatedResults> listUpdatedContentWithHttpInfo(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listUpdatedContentValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpdatedContentAsync(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpdatedContentValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpdatedContentRequestBuilder {
        private final String type;
        private final OffsetDateTime dateUpdatedStart;
        private final OffsetDateTime dateUpdatedEnd;
        private final String country;
        private LocalDate dateTakenStart;
        private LocalDate dateTakenEnd;
        private String cursor;
        private String sort;
        private List<String> supplierCode;
        private Integer perPage;

        private ListUpdatedContentRequestBuilder(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country) {
            this.type = type;
            this.dateUpdatedStart = dateUpdatedStart;
            this.dateUpdatedEnd = dateUpdatedEnd;
            this.country = country;
        }

        /**
         * Set dateTakenStart
         * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder dateTakenStart(LocalDate dateTakenStart) {
            this.dateTakenStart = dateTakenStart;
            return this;
        }
        
        /**
         * Set dateTakenEnd
         * @param dateTakenEnd Show images that were taken before the specified date (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder dateTakenEnd(LocalDate dateTakenEnd) {
            this.dateTakenEnd = dateTakenEnd;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to newest)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set supplierCode
         * @param supplierCode Show only editorial content from certain suppliers (optional)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder supplierCode(List<String> supplierCode) {
            this.supplierCode = supplierCode;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 500)
         * @return ListUpdatedContentRequestBuilder
         */
        public ListUpdatedContentRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listUpdatedContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpdatedContentCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        }


        /**
         * Execute listUpdatedContent request
         * @return EditorialUpdatedResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public EditorialUpdatedResults execute() throws ApiException {
            ApiResponse<EditorialUpdatedResults> localVarResp = listUpdatedContentWithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpdatedContent request with HTTP info returned
         * @return ApiResponse&lt;EditorialUpdatedResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialUpdatedResults> executeWithHttpInfo() throws ApiException {
            return listUpdatedContentWithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
        }

        /**
         * Execute listUpdatedContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {
            return listUpdatedContentAsync(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        }
    }

    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @return ListUpdatedContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ListUpdatedContentRequestBuilder listUpdatedContent(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (dateUpdatedStart == null) throw new IllegalArgumentException("\"dateUpdatedStart\" is required but got null");
        if (dateUpdatedEnd == null) throw new IllegalArgumentException("\"dateUpdatedEnd\" is required but got null");
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new ListUpdatedContentRequestBuilder(type, dateUpdatedStart, dateUpdatedEnd, country);
    }
    private okhttp3.Call listUpdatedContent_0Call(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (dateUpdatedStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_start", dateUpdatedStart));
        }

        if (dateUpdatedEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_end", dateUpdatedEnd));
        }

        if (dateTakenStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_start", dateTakenStart));
        }

        if (dateTakenEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_end", dateTakenEnd));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpdatedContent_0ValidateBeforeCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listUpdatedContent_0(Async)");
        }

        // verify the required parameter 'dateUpdatedStart' is set
        if (dateUpdatedStart == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedStart' when calling listUpdatedContent_0(Async)");
        }

        // verify the required parameter 'dateUpdatedEnd' is set
        if (dateUpdatedEnd == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedEnd' when calling listUpdatedContent_0(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling listUpdatedContent_0(Async)");
        }

        return listUpdatedContent_0Call(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);

    }


    private ApiResponse<EditorialUpdatedResults> listUpdatedContent_0WithHttpInfo(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listUpdatedContent_0ValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpdatedContent_0Async(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpdatedContent_0ValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpdatedContent0RequestBuilder {
        private final String type;
        private final OffsetDateTime dateUpdatedStart;
        private final OffsetDateTime dateUpdatedEnd;
        private final String country;
        private LocalDate dateTakenStart;
        private LocalDate dateTakenEnd;
        private String cursor;
        private String sort;
        private List<String> supplierCode;
        private Integer perPage;

        private ListUpdatedContent0RequestBuilder(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country) {
            this.type = type;
            this.dateUpdatedStart = dateUpdatedStart;
            this.dateUpdatedEnd = dateUpdatedEnd;
            this.country = country;
        }

        /**
         * Set dateTakenStart
         * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder dateTakenStart(LocalDate dateTakenStart) {
            this.dateTakenStart = dateTakenStart;
            return this;
        }
        
        /**
         * Set dateTakenEnd
         * @param dateTakenEnd Show images that were taken before the specified date (optional)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder dateTakenEnd(LocalDate dateTakenEnd) {
            this.dateTakenEnd = dateTakenEnd;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to newest)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set supplierCode
         * @param supplierCode Show only editorial content from certain suppliers (optional)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder supplierCode(List<String> supplierCode) {
            this.supplierCode = supplierCode;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 500)
         * @return ListUpdatedContent0RequestBuilder
         */
        public ListUpdatedContent0RequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listUpdatedContent_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpdatedContent_0Call(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        }


        /**
         * Execute listUpdatedContent_0 request
         * @return EditorialUpdatedResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialUpdatedResults execute() throws ApiException {
            ApiResponse<EditorialUpdatedResults> localVarResp = listUpdatedContent_0WithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpdatedContent_0 request with HTTP info returned
         * @return ApiResponse&lt;EditorialUpdatedResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialUpdatedResults> executeWithHttpInfo() throws ApiException {
            return listUpdatedContent_0WithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
        }

        /**
         * Execute listUpdatedContent_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {
            return listUpdatedContent_0Async(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        }
    }

    /**
     * (Deprecated) List updated content
     * Deprecated; use &#x60;GET /v2/editorial/images/updated&#x60; instead to get recently updated items.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @return ListUpdatedContent0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListUpdatedContent0RequestBuilder listUpdatedContent_0(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (dateUpdatedStart == null) throw new IllegalArgumentException("\"dateUpdatedStart\" is required but got null");
        if (dateUpdatedEnd == null) throw new IllegalArgumentException("\"dateUpdatedEnd\" is required but got null");
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new ListUpdatedContent0RequestBuilder(type, dateUpdatedStart, dateUpdatedEnd, country);
    }
    private okhttp3.Call searchCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling search(Async)");
        }

        return searchCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);

    }


    private ApiResponse<EditorialSearchResults> searchWithHttpInfo(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, null);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAsync(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback<EditorialSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchRequestBuilder {
        private final String country;
        private String query;
        private String sort;
        private String category;
        private List<String> supplierCode;
        private LocalDate dateStart;
        private LocalDate dateEnd;
        private Integer perPage;
        private String cursor;

        private SearchRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to relevant)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set category
         * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set supplierCode
         * @param supplierCode Show only editorial content from certain suppliers (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder supplierCode(List<String> supplierCode) {
            this.supplierCode = supplierCode;
            return this;
        }
        
        /**
         * Set dateStart
         * @param dateStart Show only editorial content generated on or after a specific date (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder dateStart(LocalDate dateStart) {
            this.dateStart = dateStart;
            return this;
        }
        
        /**
         * Set dateEnd
         * @param dateEnd Show only editorial content generated on or before a specific date (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder dateEnd(LocalDate dateEnd) {
            this.dateEnd = dateEnd;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for search
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        }


        /**
         * Execute search request
         * @return EditorialSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public EditorialSearchResults execute() throws ApiException {
            ApiResponse<EditorialSearchResults> localVarResp = searchWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute search request with HTTP info returned
         * @return ApiResponse&lt;EditorialSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditorialSearchResults> executeWithHttpInfo() throws ApiException {
            return searchWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
        }

        /**
         * Execute search request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditorialSearchResults> _callback) throws ApiException {
            return searchAsync(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        }
    }

    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @return SearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public SearchRequestBuilder search(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new SearchRequestBuilder(country);
    }
    private okhttp3.Call searchContentCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchContentValidateBeforeCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling searchContent(Async)");
        }

        return searchContentCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);

    }


    private ApiResponse<EditorialSearchResults> searchContentWithHttpInfo(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = searchContentValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, null);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchContentAsync(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback<EditorialSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchContentValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchContentRequestBuilder {
        private final String country;
        private String query;
        private String sort;
        private String category;
        private List<String> supplierCode;
        private LocalDate dateStart;
        private LocalDate dateEnd;
        private Integer perPage;
        private String cursor;

        private SearchContentRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to relevant)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set category
         * @param category Show editorial content within a certain editorial category; specify by category name (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set supplierCode
         * @param supplierCode Show only editorial content from certain suppliers (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder supplierCode(List<String> supplierCode) {
            this.supplierCode = supplierCode;
            return this;
        }
        
        /**
         * Set dateStart
         * @param dateStart Show only editorial content generated on or after a specific date (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder dateStart(LocalDate dateStart) {
            this.dateStart = dateStart;
            return this;
        }
        
        /**
         * Set dateEnd
         * @param dateEnd Show only editorial content generated on or before a specific date (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder dateEnd(LocalDate dateEnd) {
            this.dateEnd = dateEnd;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
         * @return SearchContentRequestBuilder
         */
        public SearchContentRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for searchContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchContentCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        }


        /**
         * Execute searchContent request
         * @return EditorialSearchResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EditorialSearchResults execute() throws ApiException {
            ApiResponse<EditorialSearchResults> localVarResp = searchContentWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchContent request with HTTP info returned
         * @return ApiResponse&lt;EditorialSearchResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EditorialSearchResults> executeWithHttpInfo() throws ApiException {
            return searchContentWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
        }

        /**
         * Execute searchContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EditorialSearchResults> _callback) throws ApiException {
            return searchContentAsync(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        }
    }

    /**
     * (Deprecated) Search editorial content
     * Deprecated; use &#x60;GET /v2/editorial/images/search&#x60; instead to search for editorial images.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @return SearchContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SearchContentRequestBuilder searchContent(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new SearchContentRequestBuilder(country);
    }
}
