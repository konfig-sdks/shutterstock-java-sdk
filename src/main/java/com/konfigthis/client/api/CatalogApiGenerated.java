/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CatalogCollection;
import com.konfigthis.client.model.CatalogCollectionDataList;
import com.konfigthis.client.model.CatalogCollectionItemDataList;
import com.konfigthis.client.model.CreateCatalogCollection;
import com.konfigthis.client.model.CreateCatalogCollectionItem;
import com.konfigthis.client.model.CreateCatalogCollectionItems;
import com.konfigthis.client.model.RemoveCatalogCollectionItem;
import com.konfigthis.client.model.RemoveCatalogCollectionItems;
import com.konfigthis.client.model.UpdateCatalogCollection;
import com.konfigthis.client.model.UpdateCatalogCollectionCoverAsset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CatalogApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToCollectionItemsCall(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCatalogCollectionItems;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}/items"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionItemsValidateBeforeCall(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling addToCollectionItems(Async)");
        }

        // verify the required parameter 'createCatalogCollectionItems' is set
        if (createCatalogCollectionItems == null) {
            throw new ApiException("Missing the required parameter 'createCatalogCollectionItems' when calling addToCollectionItems(Async)");
        }

        return addToCollectionItemsCall(collectionId, createCatalogCollectionItems, _callback);

    }


    private ApiResponse<CatalogCollection> addToCollectionItemsWithHttpInfo(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(collectionId, createCatalogCollectionItems, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToCollectionItemsAsync(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionItemsValidateBeforeCall(collectionId, createCatalogCollectionItems, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToCollectionItemsRequestBuilder {
        private final List<CreateCatalogCollectionItem> items;
        private final String collectionId;

        private AddToCollectionItemsRequestBuilder(List<CreateCatalogCollectionItem> items, String collectionId) {
            this.items = items;
            this.collectionId = collectionId;
        }

        /**
         * Build call for addToCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCatalogCollectionItems createCatalogCollectionItems = buildBodyParams();
            return addToCollectionItemsCall(collectionId, createCatalogCollectionItems, _callback);
        }

        private CreateCatalogCollectionItems buildBodyParams() {
            CreateCatalogCollectionItems createCatalogCollectionItems = new CreateCatalogCollectionItems();
            createCatalogCollectionItems.items(this.items);
            return createCatalogCollectionItems;
        }

        /**
         * Execute addToCollectionItems request
         * @return CatalogCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollection execute() throws ApiException {
            CreateCatalogCollectionItems createCatalogCollectionItems = buildBodyParams();
            ApiResponse<CatalogCollection> localVarResp = addToCollectionItemsWithHttpInfo(collectionId, createCatalogCollectionItems);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollection> executeWithHttpInfo() throws ApiException {
            CreateCatalogCollectionItems createCatalogCollectionItems = buildBodyParams();
            return addToCollectionItemsWithHttpInfo(collectionId, createCatalogCollectionItems);
        }

        /**
         * Execute addToCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollection> _callback) throws ApiException {
            CreateCatalogCollectionItems createCatalogCollectionItems = buildBodyParams();
            return addToCollectionItemsAsync(collectionId, createCatalogCollectionItems, _callback);
        }
    }

    /**
     * Add items to catalog collections
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to add assets to (required)
     * @param createCatalogCollectionItems Collection item attributes to add to collection (required)
     * @return AddToCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddToCollectionItemsRequestBuilder addToCollectionItems(List<CreateCatalogCollectionItem> items, String collectionId) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new AddToCollectionItemsRequestBuilder(items, collectionId);
    }
    private okhttp3.Call createCollectionCall(CreateCatalogCollection createCatalogCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCatalogCollection;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(CreateCatalogCollection createCatalogCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCatalogCollection' is set
        if (createCatalogCollection == null) {
            throw new ApiException("Missing the required parameter 'createCatalogCollection' when calling createCollection(Async)");
        }

        return createCollectionCall(createCatalogCollection, _callback);

    }


    private ApiResponse<CatalogCollection> createCollectionWithHttpInfo(CreateCatalogCollection createCatalogCollection) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCatalogCollection, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCollectionAsync(CreateCatalogCollection createCatalogCollection, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCatalogCollection, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCollectionRequestBuilder {
        private final String name;
        private List<CreateCatalogCollectionItem> items;
        private String visibility;

        private CreateCollectionRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set items
         * @param items  (optional)
         * @return CreateCollectionRequestBuilder
         */
        public CreateCollectionRequestBuilder items(List<CreateCatalogCollectionItem> items) {
            this.items = items;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional, default to private)
         * @return CreateCollectionRequestBuilder
         */
        public CreateCollectionRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for createCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCatalogCollection createCatalogCollection = buildBodyParams();
            return createCollectionCall(createCatalogCollection, _callback);
        }

        private CreateCatalogCollection buildBodyParams() {
            CreateCatalogCollection createCatalogCollection = new CreateCatalogCollection();
            createCatalogCollection.items(this.items);
            createCatalogCollection.name(this.name);
            if (this.visibility != null)
            createCatalogCollection.visibility(CreateCatalogCollection.VisibilityEnum.fromValue(this.visibility));
            return createCatalogCollection;
        }

        /**
         * Execute createCollection request
         * @return CatalogCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollection execute() throws ApiException {
            CreateCatalogCollection createCatalogCollection = buildBodyParams();
            ApiResponse<CatalogCollection> localVarResp = createCollectionWithHttpInfo(createCatalogCollection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCollection request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollection> executeWithHttpInfo() throws ApiException {
            CreateCatalogCollection createCatalogCollection = buildBodyParams();
            return createCollectionWithHttpInfo(createCatalogCollection);
        }

        /**
         * Execute createCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollection> _callback) throws ApiException {
            CreateCatalogCollection createCatalogCollection = buildBodyParams();
            return createCollectionAsync(createCatalogCollection, _callback);
        }
    }

    /**
     * Create catalog collections
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use &#x60;PATCH /v2/catalog/collections/{collection_id}/items&#x60;.
     * @param createCatalogCollection Create a catalog collection and, optionally, add items. (required)
     * @return CreateCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateCollectionRequestBuilder createCollection(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        return new CreateCollectionRequestBuilder(name);
    }
    private okhttp3.Call deleteCollectionCall(String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(collectionId, _callback);

    }


    private ApiResponse<Void> deleteCollectionWithHttpInfo(String collectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCollectionAsync(String collectionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCollectionRequestBuilder {
        private final String collectionId;

        private DeleteCollectionRequestBuilder(String collectionId) {
            this.collectionId = collectionId;
        }

        /**
         * Build call for deleteCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCollectionCall(collectionId, _callback);
        }


        /**
         * Execute deleteCollection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCollectionWithHttpInfo(collectionId);
        }

        /**
         * Execute deleteCollection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCollectionWithHttpInfo(collectionId);
        }

        /**
         * Execute deleteCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCollectionAsync(collectionId, _callback);
        }
    }

    /**
     * Delete catalog collections
     * This endpoint deletes a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to delete (required)
     * @return DeleteCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCollectionRequestBuilder deleteCollection(String collectionId) throws IllegalArgumentException {
        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new DeleteCollectionRequestBuilder(collectionId);
    }
    private okhttp3.Call listCollectionsCall(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (shared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shared", shared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionsValidateBeforeCall(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback _callback) throws ApiException {
        return listCollectionsCall(page, perPage, sort, shared, _callback);

    }


    private ApiResponse<CatalogCollectionDataList> listCollectionsWithHttpInfo(Integer page, Integer perPage, String sort, Boolean shared) throws ApiException {
        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, sort, shared, null);
        Type localVarReturnType = new TypeToken<CatalogCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCollectionsAsync(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback<CatalogCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(page, perPage, sort, shared, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCollectionsRequestBuilder {
        private Integer page;
        private Integer perPage;
        private String sort;
        private Boolean shared;

        private ListCollectionsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional, default to newest)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set shared
         * @param shared Set to true to omit collections that you own and return only collections  that are shared with you (optional, default to false)
         * @return ListCollectionsRequestBuilder
         */
        public ListCollectionsRequestBuilder shared(Boolean shared) {
            this.shared = shared;
            return this;
        }
        
        /**
         * Build call for listCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCollectionsCall(page, perPage, sort, shared, _callback);
        }


        /**
         * Execute listCollections request
         * @return CatalogCollectionDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollectionDataList execute() throws ApiException {
            ApiResponse<CatalogCollectionDataList> localVarResp = listCollectionsWithHttpInfo(page, perPage, sort, shared);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCollections request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollectionDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollectionDataList> executeWithHttpInfo() throws ApiException {
            return listCollectionsWithHttpInfo(page, perPage, sort, shared);
        }

        /**
         * Execute listCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollectionDataList> _callback) throws ApiException {
            return listCollectionsAsync(page, perPage, sort, shared, _callback);
        }
    }

    /**
     * List catalog collections
     * This endpoint returns a list of catalog collections.
     * @return ListCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public ListCollectionsRequestBuilder listCollections() throws IllegalArgumentException {
        return new ListCollectionsRequestBuilder();
    }
    private okhttp3.Call removeItemsFromCollectionCall(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeCatalogCollectionItems;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}/items"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemsFromCollectionValidateBeforeCall(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling removeItemsFromCollection(Async)");
        }

        // verify the required parameter 'removeCatalogCollectionItems' is set
        if (removeCatalogCollectionItems == null) {
            throw new ApiException("Missing the required parameter 'removeCatalogCollectionItems' when calling removeItemsFromCollection(Async)");
        }

        return removeItemsFromCollectionCall(collectionId, removeCatalogCollectionItems, _callback);

    }


    private ApiResponse<CatalogCollection> removeItemsFromCollectionWithHttpInfo(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems) throws ApiException {
        okhttp3.Call localVarCall = removeItemsFromCollectionValidateBeforeCall(collectionId, removeCatalogCollectionItems, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeItemsFromCollectionAsync(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemsFromCollectionValidateBeforeCall(collectionId, removeCatalogCollectionItems, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveItemsFromCollectionRequestBuilder {
        private final List<RemoveCatalogCollectionItem> items;
        private final String collectionId;

        private RemoveItemsFromCollectionRequestBuilder(List<RemoveCatalogCollectionItem> items, String collectionId) {
            this.items = items;
            this.collectionId = collectionId;
        }

        /**
         * Build call for removeItemsFromCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemoveCatalogCollectionItems removeCatalogCollectionItems = buildBodyParams();
            return removeItemsFromCollectionCall(collectionId, removeCatalogCollectionItems, _callback);
        }

        private RemoveCatalogCollectionItems buildBodyParams() {
            RemoveCatalogCollectionItems removeCatalogCollectionItems = new RemoveCatalogCollectionItems();
            removeCatalogCollectionItems.items(this.items);
            return removeCatalogCollectionItems;
        }

        /**
         * Execute removeItemsFromCollection request
         * @return CatalogCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollection execute() throws ApiException {
            RemoveCatalogCollectionItems removeCatalogCollectionItems = buildBodyParams();
            ApiResponse<CatalogCollection> localVarResp = removeItemsFromCollectionWithHttpInfo(collectionId, removeCatalogCollectionItems);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeItemsFromCollection request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollection> executeWithHttpInfo() throws ApiException {
            RemoveCatalogCollectionItems removeCatalogCollectionItems = buildBodyParams();
            return removeItemsFromCollectionWithHttpInfo(collectionId, removeCatalogCollectionItems);
        }

        /**
         * Execute removeItemsFromCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollection> _callback) throws ApiException {
            RemoveCatalogCollectionItems removeCatalogCollectionItems = buildBodyParams();
            return removeItemsFromCollectionAsync(collectionId, removeCatalogCollectionItems, _callback);
        }
    }

    /**
     * Remove items from catalog collection
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to remove assets from (required)
     * @param removeCatalogCollectionItems Items to remove from the collection (required)
     * @return RemoveItemsFromCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveItemsFromCollectionRequestBuilder removeItemsFromCollection(List<RemoveCatalogCollectionItem> items, String collectionId) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new RemoveItemsFromCollectionRequestBuilder(items, collectionId);
    }
    private okhttp3.Call searchAssetsCall(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (collectionId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "collection_id", collectionId));
        }

        if (assetType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asset_type", assetType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAssetsValidateBeforeCall(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback _callback) throws ApiException {
        return searchAssetsCall(sort, page, perPage, query, collectionId, assetType, _callback);

    }


    private ApiResponse<CatalogCollectionItemDataList> searchAssetsWithHttpInfo(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType) throws ApiException {
        okhttp3.Call localVarCall = searchAssetsValidateBeforeCall(sort, page, perPage, query, collectionId, assetType, null);
        Type localVarReturnType = new TypeToken<CatalogCollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAssetsAsync(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback<CatalogCollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAssetsValidateBeforeCall(sort, page, perPage, query, collectionId, assetType, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAssetsRequestBuilder {
        private String sort;
        private Integer page;
        private Integer perPage;
        private String query;
        private List<String> collectionId;
        private List<String> assetType;

        private SearchAssetsRequestBuilder() {
        }

        /**
         * Set sort
         * @param sort Sort by (optional, default to newest)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 1)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of results per page (optional, default to 20)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query One or more search terms separated by spaces (optional)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set collectionId
         * @param collectionId Filter by collection id (optional)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder collectionId(List<String> collectionId) {
            this.collectionId = collectionId;
            return this;
        }
        
        /**
         * Set assetType
         * @param assetType Filter by asset type (optional)
         * @return SearchAssetsRequestBuilder
         */
        public SearchAssetsRequestBuilder assetType(List<String> assetType) {
            this.assetType = assetType;
            return this;
        }
        
        /**
         * Build call for searchAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAssetsCall(sort, page, perPage, query, collectionId, assetType, _callback);
        }


        /**
         * Execute searchAssets request
         * @return CatalogCollectionItemDataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollectionItemDataList execute() throws ApiException {
            ApiResponse<CatalogCollectionItemDataList> localVarResp = searchAssetsWithHttpInfo(sort, page, perPage, query, collectionId, assetType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAssets request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollectionItemDataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollectionItemDataList> executeWithHttpInfo() throws ApiException {
            return searchAssetsWithHttpInfo(sort, page, perPage, query, collectionId, assetType);
        }

        /**
         * Execute searchAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollectionItemDataList> _callback) throws ApiException {
            return searchAssetsAsync(sort, page, perPage, query, collectionId, assetType, _callback);
        }
    }

    /**
     * Search catalogs for assets
     * This endpoint searches for assets in the account&#39;s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @return SearchAssetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchAssetsRequestBuilder searchAssets() throws IllegalArgumentException {
        return new SearchAssetsRequestBuilder();
    }
    private okhttp3.Call updateCollectionMetadataCall(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCatalogCollection;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionMetadataValidateBeforeCall(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updateCollectionMetadata(Async)");
        }

        // verify the required parameter 'updateCatalogCollection' is set
        if (updateCatalogCollection == null) {
            throw new ApiException("Missing the required parameter 'updateCatalogCollection' when calling updateCollectionMetadata(Async)");
        }

        return updateCollectionMetadataCall(collectionId, updateCatalogCollection, _callback);

    }


    private ApiResponse<CatalogCollection> updateCollectionMetadataWithHttpInfo(String collectionId, UpdateCatalogCollection updateCatalogCollection) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionMetadataValidateBeforeCall(collectionId, updateCatalogCollection, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCollectionMetadataAsync(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionMetadataValidateBeforeCall(collectionId, updateCatalogCollection, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCollectionMetadataRequestBuilder {
        private final String collectionId;
        private UpdateCatalogCollectionCoverAsset coverAsset;
        private String name;
        private String visibility;

        private UpdateCollectionMetadataRequestBuilder(String collectionId) {
            this.collectionId = collectionId;
        }

        /**
         * Set coverAsset
         * @param coverAsset  (optional)
         * @return UpdateCollectionMetadataRequestBuilder
         */
        public UpdateCollectionMetadataRequestBuilder coverAsset(UpdateCatalogCollectionCoverAsset coverAsset) {
            this.coverAsset = coverAsset;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateCollectionMetadataRequestBuilder
         */
        public UpdateCollectionMetadataRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional)
         * @return UpdateCollectionMetadataRequestBuilder
         */
        public UpdateCollectionMetadataRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for updateCollectionMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCatalogCollection updateCatalogCollection = buildBodyParams();
            return updateCollectionMetadataCall(collectionId, updateCatalogCollection, _callback);
        }

        private UpdateCatalogCollection buildBodyParams() {
            UpdateCatalogCollection updateCatalogCollection = new UpdateCatalogCollection();
            updateCatalogCollection.coverAsset(this.coverAsset);
            updateCatalogCollection.name(this.name);
            if (this.visibility != null)
            updateCatalogCollection.visibility(UpdateCatalogCollection.VisibilityEnum.fromValue(this.visibility));
            return updateCatalogCollection;
        }

        /**
         * Execute updateCollectionMetadata request
         * @return CatalogCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CatalogCollection execute() throws ApiException {
            UpdateCatalogCollection updateCatalogCollection = buildBodyParams();
            ApiResponse<CatalogCollection> localVarResp = updateCollectionMetadataWithHttpInfo(collectionId, updateCatalogCollection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCollectionMetadata request with HTTP info returned
         * @return ApiResponse&lt;CatalogCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogCollection> executeWithHttpInfo() throws ApiException {
            UpdateCatalogCollection updateCatalogCollection = buildBodyParams();
            return updateCollectionMetadataWithHttpInfo(collectionId, updateCatalogCollection);
        }

        /**
         * Execute updateCollectionMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogCollection> _callback) throws ApiException {
            UpdateCatalogCollection updateCatalogCollection = buildBodyParams();
            return updateCollectionMetadataAsync(collectionId, updateCatalogCollection, _callback);
        }
    }

    /**
     * Update collection metadata
     * This endpoint updates the metadata of a catalog collection.
     * @param collectionId ID of collection that needs to be modified (required)
     * @param updateCatalogCollection Collections Metadata to update (required)
     * @return UpdateCollectionMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCollectionMetadataRequestBuilder updateCollectionMetadata(String collectionId) throws IllegalArgumentException {
        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new UpdateCollectionMetadataRequestBuilder(collectionId);
    }
}
