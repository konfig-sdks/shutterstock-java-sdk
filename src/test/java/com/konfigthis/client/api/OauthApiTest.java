/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.OauthAccessTokenResponse;
import com.konfigthis.client.model.OauthGetUserAccessTokenRequest;
import com.konfigthis.client.model.OauthGetUserAccessTokenRequest1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OauthApi
 */
@Disabled
public class OauthApiTest {

    private static OauthApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OauthApi(apiClient);
    }

    /**
     * Authorize applications
     *
     * This endpoint returns a redirect URI (in the &#39;Location&#39; header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeApplicationsTest() throws ApiException {
        String clientId = null;
        String redirectUri = null;
        String responseType = null;
        String state = null;
        String realm = null;
        String scope = null;
        api.authorizeApplications(clientId, redirectUri, responseType, state)
                .realm(realm)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * Get access tokens
     *
     * This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccessTokenTest() throws ApiException {
        String clientId = null;
        String grantType = null;
        String clientSecret = null;
        String code = null;
        Boolean expires = null;
        String realm = null;
        String refreshToken = null;
        OauthAccessTokenResponse response = api.getUserAccessToken(clientId, grantType)
                .clientSecret(clientSecret)
                .code(code)
                .expires(expires)
                .realm(realm)
                .refreshToken(refreshToken)
                .execute();
        // TODO: test validations
    }

}
