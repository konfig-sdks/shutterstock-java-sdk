/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.Language;
import com.konfigthis.client.model.LicenseSFX;
import com.konfigthis.client.model.LicenseSFXRequest;
import com.konfigthis.client.model.LicenseSFXResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SFX;
import com.konfigthis.client.model.SFXDataList;
import com.konfigthis.client.model.SFXSearchResults;
import com.konfigthis.client.model.SfxUrl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SoundEffectsApi
 */
@Disabled
public class SoundEffectsApiTest {

    private static SoundEffectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SoundEffectsApi(apiClient);
    }

    /**
     * Get details about sound effects
     *
     * This endpoint shows information about a sound effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        Integer id = null;
        Language language = null;
        String view = null;
        String library = null;
        String searchId = null;
        SFX response = api.getDetails(id)
                .language(language)
                .view(view)
                .library(library)
                .searchId(searchId)
                .execute();
        // TODO: test validations
    }

    /**
     * License sound effects
     *
     * This endpoint licenses sounds effect assets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseAssetsTest() throws ApiException {
        List<LicenseSFX> soundEffects = null;
        LicenseSFXResultDataList response = api.licenseAssets(soundEffects)
                .execute();
        // TODO: test validations
    }

    /**
     * List details about sound effects
     *
     * This endpoint shows information about sound effects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDetailsTest() throws ApiException {
        List<String> id = null;
        String view = null;
        Language language = null;
        String library = null;
        String searchId = null;
        SFXDataList response = api.listDetails(id)
                .view(view)
                .language(language)
                .library(library)
                .searchId(searchId)
                .execute();
        // TODO: test validations
    }

    /**
     * List sound effects licenses
     *
     * This endpoint lists existing licenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicensesTest() throws ApiException {
        String sfxId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String licenseId = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.listLicenses()
                .sfxId(sfxId)
                .license(license)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .username(username)
                .startDate(startDate)
                .endDate(endDate)
                .licenseId(licenseId)
                .downloadAvailability(downloadAvailability)
                .teamHistory(teamHistory)
                .execute();
        // TODO: test validations
    }

    /**
     * Download sound effects
     *
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redownloadLicensesTest() throws ApiException {
        String id = null;
        SfxUrl response = api.redownloadLicenses(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for sound effects
     *
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSoundEffectsTest() throws ApiException {
        LocalDate addedDate = null;
        LocalDate addedDateStart = null;
        LocalDate addedDateEnd = null;
        Integer duration = null;
        Integer durationFrom = null;
        Integer durationTo = null;
        Integer page = null;
        Integer perPage = null;
        String query = null;
        Boolean safe = null;
        String sort = null;
        String view = null;
        Language language = null;
        SFXSearchResults response = api.searchSoundEffects()
                .addedDate(addedDate)
                .addedDateStart(addedDateStart)
                .addedDateEnd(addedDateEnd)
                .duration(duration)
                .durationFrom(durationFrom)
                .durationTo(durationTo)
                .page(page)
                .perPage(perPage)
                .query(query)
                .safe(safe)
                .sort(sort)
                .view(view)
                .language(language)
                .execute();
        // TODO: test validations
    }

}
