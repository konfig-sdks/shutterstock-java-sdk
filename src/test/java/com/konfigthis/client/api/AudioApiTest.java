/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Audio;
import com.konfigthis.client.model.AudioDataList;
import com.konfigthis.client.model.AudioSearchResults;
import com.konfigthis.client.model.AudioUrl;
import com.konfigthis.client.model.Collection;
import com.konfigthis.client.model.CollectionCreateRequest;
import com.konfigthis.client.model.CollectionCreateResponse;
import com.konfigthis.client.model.CollectionDataList;
import com.konfigthis.client.model.CollectionItem;
import com.konfigthis.client.model.CollectionItemDataList;
import com.konfigthis.client.model.CollectionItemRequest;
import com.konfigthis.client.model.CollectionUpdateRequest;
import com.konfigthis.client.model.DownloadHistoryDataList;
import com.konfigthis.client.model.GenreList;
import com.konfigthis.client.model.InstrumentList;
import com.konfigthis.client.model.LicenseAudio;
import com.konfigthis.client.model.LicenseAudioRequest;
import com.konfigthis.client.model.LicenseAudioResultDataList;
import com.konfigthis.client.model.MoodList;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AudioApi
 */
@Disabled
public class AudioApiTest {

    private static AudioApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AudioApi(apiClient);
    }

    /**
     * Add audio tracks to collections
     *
     * This endpoint adds one or more tracks to a collection by track IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTracksToCollectionTest() throws ApiException {
        List<CollectionItem> items = null;
        String id = null;
        api.addTracksToCollection(items, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create audio collections
     *
     * This endpoint creates one or more collections (soundboxes). To add tracks, use &#x60;POST /v2/audio/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionsTest() throws ApiException {
        String name = null;
        CollectionCreateResponse response = api.createCollections(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete audio collections
     *
     * This endpoint deletes a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String id = null;
        api.deleteCollection(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the details of audio collections
     *
     * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use &#x60;GET /v2/audio/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionDetailsTest() throws ApiException {
        String id = null;
        List<String> embed = null;
        String shareCode = null;
        Collection response = api.getCollectionDetails(id)
                .embed(embed)
                .shareCode(shareCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Get details about audio tracks
     *
     * This endpoint shows information about a track, including its genres, instruments, and other attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackDetailsTest() throws ApiException {
        Integer id = null;
        String view = null;
        String searchId = null;
        Audio response = api.getTrackDetails(id)
                .view(view)
                .searchId(searchId)
                .execute();
        // TODO: test validations
    }

    /**
     * License audio tracks
     *
     * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseTracksTest() throws ApiException {
        List<LicenseAudio> audio = null;
        String license = null;
        String searchId = null;
        LicenseAudioResultDataList response = api.licenseTracks(audio)
                .license(license)
                .searchId(searchId)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio licenses
     *
     * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAudioLicensesTest() throws ApiException {
        String audioId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.listAudioLicenses()
                .audioId(audioId)
                .license(license)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .username(username)
                .startDate(startDate)
                .endDate(endDate)
                .downloadAvailability(downloadAvailability)
                .teamHistory(teamHistory)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the contents of audio collections
     *
     * This endpoint lists the IDs of tracks in a collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String shareCode = null;
        String sort = null;
        CollectionItemDataList response = api.listCollectionItems(id)
                .page(page)
                .perPage(perPage)
                .shareCode(shareCode)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio collections
     *
     * This endpoint lists your collections of audio tracks and their basic attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<String> embed = null;
        CollectionDataList response = api.listCollections()
                .page(page)
                .perPage(perPage)
                .embed(embed)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio genres
     *
     * This endpoint returns a list of all audio genres.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGenresTest() throws ApiException {
        String language = null;
        GenreList response = api.listGenres()
                .language(language)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio instruments
     *
     * This endpoint returns a list of all audio instruments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstrumentsTest() throws ApiException {
        String language = null;
        InstrumentList response = api.listInstruments()
                .language(language)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio moods
     *
     * This endpoint returns a list of all audio moods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMoodsTest() throws ApiException {
        String language = null;
        MoodList response = api.listMoods()
                .language(language)
                .execute();
        // TODO: test validations
    }

    /**
     * List audio tracks
     *
     * This endpoint lists information about one or more audio tracks, including the description and publication date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTracksTest() throws ApiException {
        List<String> id = null;
        String view = null;
        String searchId = null;
        AudioDataList response = api.listTracks(id)
                .view(view)
                .searchId(searchId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download audio tracks
     *
     * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redownloadTracksTest() throws ApiException {
        String id = null;
        AudioUrl response = api.redownloadTracks(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove audio tracks from collections
     *
     * This endpoint removes one or more tracks from a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTracksFromCollectionTest() throws ApiException {
        String id = null;
        List<String> itemId = null;
        api.removeTracksFromCollection(id)
                .itemId(itemId)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for tracks
     *
     * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTracksTest() throws ApiException {
        List<String> artists = null;
        Integer bpm = null;
        Integer bpmFrom = null;
        Integer bpmTo = null;
        Integer duration = null;
        Integer durationFrom = null;
        Integer durationTo = null;
        List<String> genre = null;
        Boolean isInstrumental = null;
        List<String> instruments = null;
        List<String> moods = null;
        Integer page = null;
        Integer perPage = null;
        String query = null;
        String sort = null;
        String sortOrder = null;
        String vocalDescription = null;
        String view = null;
        String fields = null;
        String library = null;
        String language = null;
        AudioSearchResults response = api.searchTracks()
                .artists(artists)
                .bpm(bpm)
                .bpmFrom(bpmFrom)
                .bpmTo(bpmTo)
                .duration(duration)
                .durationFrom(durationFrom)
                .durationTo(durationTo)
                .genre(genre)
                .isInstrumental(isInstrumental)
                .instruments(instruments)
                .moods(moods)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .sortOrder(sortOrder)
                .vocalDescription(vocalDescription)
                .view(view)
                .fields(fields)
                .library(library)
                .language(language)
                .execute();
        // TODO: test validations
    }

    /**
     * Rename audio collections
     *
     * This endpoint sets a new name for a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCollectionNameTest() throws ApiException {
        String name = null;
        String id = null;
        api.setCollectionName(name, id)
                .execute();
        // TODO: test validations
    }

}
